"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/advanced",{

/***/ "./dist/index.js":
/*!***********************!*\
  !*** ./dist/index.js ***!
  \***********************/
/***/ (function(module, exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar e = __webpack_require__(/*! viem */ \"./node_modules/viem/_cjs/index.js\");\nconst t = \"0xA31a2dE4845e4fe869067618F2ABf0Cad279472F\", o = [\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"token\",\n                type: \"address\"\n            },\n            {\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\"\n            },\n            {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\"\n            },\n            {\n                internalType: \"uint256\",\n                name: \"gasFee\",\n                type: \"uint256\"\n            },\n            {\n                internalType: \"uint256\",\n                name: \"seq\",\n                type: \"uint256\"\n            }\n        ],\n        name: \"pay\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\"\n    }\n], n = \"0x9EF153E07BAFE741aAc34bE9AA01403D7aEc6d63\";\ne.keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"), e.keccak256(\"ForwardRequest(address from,address to,uint256 value,uint256 gas,uint256 nonce,uint48 deadline,bytes data)\");\nconst a = [\n    {\n        name: \"name\",\n        type: \"string\"\n    },\n    {\n        name: \"version\",\n        type: \"string\"\n    },\n    {\n        name: \"chainId\",\n        type: \"uint256\"\n    },\n    {\n        name: \"verifyingContract\",\n        type: \"address\"\n    }\n], s = {\n    ForwardRequest: [\n        {\n            name: \"from\",\n            type: \"address\"\n        },\n        {\n            name: \"to\",\n            type: \"address\"\n        },\n        {\n            name: \"value\",\n            type: \"uint256\"\n        },\n        {\n            name: \"gas\",\n            type: \"uint256\"\n        },\n        {\n            name: \"nonce\",\n            type: \"uint256\"\n        },\n        {\n            name: \"deadline\",\n            type: \"uint48\"\n        },\n        {\n            name: \"data\",\n            type: \"bytes\"\n        }\n    ]\n}, r = [\n    {\n        inputs: [\n            {\n                type: \"address\",\n                name: \"to\"\n            },\n            {\n                type: \"uint256\",\n                name: \"amount\"\n            }\n        ],\n        name: \"transfer\",\n        outputs: [\n            {\n                type: \"bool\"\n            }\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\"\n    },\n    {\n        inputs: [\n            {\n                type: \"address\",\n                name: \"owner\"\n            },\n            {\n                type: \"address\",\n                name: \"spender\"\n            }\n        ],\n        name: \"allowance\",\n        outputs: [\n            {\n                type: \"uint256\"\n            }\n        ],\n        stateMutability: \"view\",\n        type: \"function\"\n    },\n    {\n        inputs: [\n            {\n                type: \"address\",\n                name: \"spender\"\n            },\n            {\n                type: \"uint256\",\n                name: \"amount\"\n            }\n        ],\n        name: \"approve\",\n        outputs: [\n            {\n                type: \"bool\"\n            }\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\"\n    },\n    {\n        inputs: [\n            {\n                type: \"address\",\n                name: \"account\"\n            }\n        ],\n        name: \"balanceOf\",\n        outputs: [\n            {\n                type: \"uint256\"\n            }\n        ],\n        stateMutability: \"view\",\n        type: \"function\"\n    }\n], i = \"undefined\" != \"object\", c = ()=>i ? window.ethereum : null;\nasync function l(t, o, r, i, l) {\n    console.log(\"开始签名过程，参数:\"), console.log(\"- 账户地址:\", o.address), console.log(\"- 链 ID:\", i), console.log(\"- Nonce:\", l.toString()), console.log(\"- 请求数据:\", r);\n    const d = {\n        name: \"MetaTxForwarder\",\n        version: \"1\",\n        chainId: i,\n        verifyingContract: n\n    }, u = {\n        from: r.from,\n        to: r.to,\n        value: r.value.toString(),\n        gas: r.gas.toString(),\n        nonce: r.nonce.toString(),\n        deadline: r.deadline.toString(),\n        data: r.data\n    };\n    try {\n        if (t.signTypedData) {\n            console.log(\"使用 viem 钱包客户端签名...\");\n            const e = await t.signTypedData({\n                account: o,\n                domain: d,\n                types: {\n                    ...s\n                },\n                primaryType: \"ForwardRequest\",\n                message: u\n            });\n            console.log(\"viem 签名成功:\", e);\n        }\n        console.log(\"回退到 window.ethereum 直接签名...\");\n        const l = c();\n        if (!l) throw new Error(\"MetaMask 未安装或不可用\");\n        const g = {\n            domain: {\n                ...d,\n                chainId: d.chainId.toString()\n            },\n            message: u,\n            primaryType: \"ForwardRequest\",\n            types: {\n                EIP712Domain: a,\n                ...s\n            }\n        };\n        console.log(\"调用 eth_signTypedData_v4...\");\n        const h = await l.request({\n            method: \"eth_signTypedData_v4\",\n            params: [\n                o.address,\n                JSON.stringify(g)\n            ]\n        }), { valid: p, signer: m } = await async function(param) {\n            let { chainId: t, types: o = s, message: a, signature: r, expectedSigner: i } = param;\n            const c = {\n                name: \"MetaTxForwarder\",\n                version: \"1\",\n                chainId: t,\n                verifyingContract: n\n            }, l = await e.recoverTypedDataAddress({\n                domain: c,\n                types: o,\n                primaryType: \"ForwardRequest\",\n                message: a,\n                signature: r\n            }), d = l.toLowerCase() === i.toLowerCase();\n            return {\n                valid: d,\n                signer: l\n            };\n        }({\n            chainId: i,\n            message: r,\n            signature: h,\n            expectedSigner: r.from\n        });\n        return console.log(\"签名验证：\", p, m), console.log(\"MetaMask 签名成功:\", h), h;\n    } catch (e) {\n        throw console.error(\"签名过程中出错:\", e), console.error(\"错误详情:\", {\n            message: e.message,\n            code: e.code,\n            data: e.data\n        }), new Error(\"签名失败: \".concat(e.message));\n    }\n}\nexports.PaymentDelegate = class {\n    async initializeClients() {\n        if (console.log(\"开始初始化客户端...\"), !this.config.useMetaMask) throw console.warn(\"只支持 MetaMask，请设置 useMetaMask 为 true\"), new Error(\"Currently only MetaMask is supported\");\n        {\n            if (console.log(\"尝试使用 MetaMask...\"), !i) throw new Error(\"MetaMask只能在浏览器环境中使用\");\n            const t = c();\n            if (!t) throw console.error(\"MetaMask 未安装\"), new Error(\"MetaMask not found. Please install MetaMask extension.\");\n            console.log(\"检测到 MetaMask，创建钱包客户端...\");\n            try {\n                const o = await t.request({\n                    method: \"eth_chainId\"\n                });\n                this.chainId = parseInt(o, 16), console.log(\"从 MetaMask 获取到链 ID:\", this.chainId), this.wallet = e.createWalletClient({\n                    transport: e.custom(t)\n                }), console.log(\"钱包客户端创建完成\"), this.publicClient = e.createPublicClient({\n                    transport: e.custom(t)\n                }), console.log(\"公共客户端创建完成\");\n            } catch (e) {\n                throw console.error(\"初始化客户端失败:\", e), console.error(\"错误详情:\", {\n                    message: e.message,\n                    code: e.code,\n                    data: e.data\n                }), new Error(\"初始化客户端失败: \".concat(e.message));\n            }\n        }\n    }\n    async connectWallet() {\n        if (!this.config.useMetaMask) throw new Error(\"MetaMask is required\");\n        this.wallet && this.publicClient || await this.initializeClients();\n        try {\n            console.log(\"请求连接钱包...\");\n            const [e] = await this.wallet.requestAddresses();\n            console.log(\"获取到钱包地址:\", e), this.account = {\n                address: e,\n                type: \"json-rpc\"\n            };\n            try {\n                const e = await c().request({\n                    method: \"eth_chainId\"\n                });\n                this.chainId = parseInt(e, 16), console.log(\"连接钱包后获取链 ID:\", this.chainId);\n            } catch (e) {\n                console.warn(\"获取链 ID 失败:\", e), this.chainId = 1, console.warn(\"使用默认链 ID:\", this.chainId);\n            }\n            return console.log(\"钱包连接完成，地址:\", e), console.log(\"当前链 ID:\", this.chainId), e;\n        } catch (e) {\n            throw console.error(\"连接钱包失败:\", e), new Error(\"连接钱包失败: \".concat(e.message));\n        }\n    }\n    isConnected() {\n        return !!this.account;\n    }\n    getConnectedAddress() {\n        var _this_account;\n        return (_this_account = this.account) === null || _this_account === void 0 ? void 0 : _this_account.address;\n    }\n    getChainId() {\n        return this.chainId;\n    }\n    encodePayCallData(t, n, a) {\n        let s = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0n, r = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0n;\n        const i = e.encodeFunctionData({\n            abi: o,\n            functionName: \"pay\",\n            args: [\n                t,\n                n,\n                a,\n                s,\n                r\n            ]\n        });\n        return console.log(\"编码 pay 调用参数:\"), console.log(\"- token:\", t), console.log(\"- to:\", n), console.log(\"- amount:\", a.toString()), console.log(\"- gasFee:\", s.toString()), console.log(\"- seq:\", r.toString()), i;\n    }\n    async ensureTokenAllowance(e, t, o, n) {\n        const a = await this.publicClient.readContract({\n            address: e,\n            abi: r,\n            functionName: \"allowance\",\n            args: [\n                t,\n                o\n            ]\n        });\n        if (console.log(\"当前allowance: \".concat(a, \" 需要: \").concat(n)), a >= n) return console.log(\"授权额度充足\"), !0;\n        console.log(\"授权额度不足，发起approve...\");\n        const s = await this.wallet.writeContract({\n            account: this.account,\n            chain: this.chainId ? {\n                id: this.chainId\n            } : void 0,\n            address: e,\n            abi: r,\n            functionName: \"approve\",\n            args: [\n                o,\n                n\n            ]\n        });\n        console.log(\"等待approve确认...\");\n        if (\"success\" !== (await this.publicClient.waitForTransactionReceipt({\n            hash: s\n        })).status) throw new Error(\"ERC20 approve 失败！\");\n        return console.log(\"approve成功，继续metaTx流程\"), !0;\n    }\n    async processTransfer(e) {\n        try {\n            if (console.log(\"开始处理转账...\"), !(this.wallet && void 0 !== this.chainId && this.account || (console.log(\"钱包未初始化或未连接，尝试初始化和连接...\"), this.wallet && this.publicClient || (console.log(\"初始化客户端...\"), await this.initializeClients()), this.account || (console.log(\"连接钱包...\"), await this.connectWallet()), this.wallet && void 0 !== this.chainId && this.account))) throw new Error(\"无法初始化或连接钱包\");\n            console.log(\"钱包状态: 已初始化\"), console.log(\"钱包地址:\", this.account.address), console.log(\"链ID:\", this.chainId), e.tokenAddress && await this.ensureTokenAllowance(e.tokenAddress, this.account.address, t, e.amount);\n            const o = e.seq || BigInt(Math.floor(Date.now() / 1e3));\n            console.log(\"使用序列号 seq:\", o.toString());\n            const n = e.gasFee || 0n;\n            let a;\n            if (console.log(\"使用 gasFee:\", n.toString()), e.tokenAddress) a = this.encodePayCallData(e.tokenAddress, e.to, e.amount, n, o);\n            else {\n                const t = \"0x0000000000000000000000000000000000000000\";\n                a = this.encodePayCallData(t, e.to, e.amount, n, o);\n            }\n            const s = Math.floor(Date.now() / 1e3) + 36e3, r = await this.getNonce(this.account.address), i = {\n                from: this.account.address,\n                to: t,\n                value: e.tokenAddress ? \"0\" : e.amount.toString(),\n                gas: \"3000000\",\n                nonce: r.toString(),\n                deadline: s.toString(),\n                data: a\n            };\n            if (console.log(\"构建的请求数据:\", i), this.wallet && void 0 !== this.chainId) try {\n                if (console.log(\"准备进行 EIP-712 签名...\"), console.log(\"钱包状态:\", this.wallet ? \"已初始化\" : \"未初始化\"), console.log(\"账户状态:\", this.account ? \"已连接\" : \"未连接\"), console.log(\"链ID:\", this.chainId), c() && c().isMetaMask) {\n                    console.log(\"MetaMask 已安装\");\n                    const e = await c().request({\n                        method: \"eth_accounts\"\n                    });\n                    console.log(\"MetaMask 连接的账户:\", e), e && 0 !== e.length || (console.warn(\"MetaMask 未连接任何账户，尝试请求连接...\"), await c().request({\n                        method: \"eth_requestAccounts\"\n                    }));\n                }\n                const t = await l(this.wallet, this.account, i, this.chainId, r);\n                console.log(\"生成的签名:\", t);\n                const a = {\n                    token: e.tokenAddress || \"0x0000000000000000000000000000000000000000\",\n                    to: e.to,\n                    amount: e.amount.toString(),\n                    gasFee: n.toString(),\n                    seq: o.toString(),\n                    payer: this.account.address\n                };\n                return {\n                    ...i,\n                    signature: t,\n                    payParams: a\n                };\n            } catch (t) {\n                console.error(\"签名失败:\", t), console.error(\"签名错误详情:\", {\n                    message: t.message,\n                    code: t.code,\n                    data: t.data,\n                    stack: t.stack\n                });\n                let a = \"签名请求被拒绝或发生错误\";\n                4001 === t.code || t.message && t.message.includes(\"user rejected\") ? a = \"用户拒绝了签名请求\" : t.message && (a = \"签名错误: \".concat(t.message));\n                const s = {\n                    token: e.tokenAddress || \"0x0000000000000000000000000000000000000000\",\n                    to: e.to,\n                    amount: e.amount.toString(),\n                    gasFee: n.toString(),\n                    seq: o.toString(),\n                    payer: this.account.address\n                };\n                return {\n                    ...i,\n                    payParams: s,\n                    error: a,\n                    rawError: {\n                        message: t.message,\n                        code: t.code\n                    }\n                };\n            }\n            const d = {\n                token: e.tokenAddress || \"0x0000000000000000000000000000000000000000\",\n                to: e.to,\n                amount: e.amount.toString(),\n                gasFee: n.toString(),\n                seq: o.toString(),\n                payer: this.account.address\n            };\n            return {\n                ...i,\n                payParams: d\n            };\n        } catch (e) {\n            throw console.error(\"处理转账失败:\", e), new Error(\"处理转账失败: \".concat(e.message));\n        }\n    }\n    async getNonce(e, t) {\n        if (!this.publicClient) throw new Error(\"Public client not initialized\");\n        var _t_timeout;\n        const o = (_t_timeout = t === null || t === void 0 ? void 0 : t.timeout) !== null && _t_timeout !== void 0 ? _t_timeout : 1e4;\n        try {\n            return await Promise.race([\n                this.publicClient.readContract({\n                    address: n,\n                    abi: [\n                        {\n                            inputs: [\n                                {\n                                    internalType: \"address\",\n                                    name: \"owner\",\n                                    type: \"address\"\n                                }\n                            ],\n                            name: \"nonces\",\n                            outputs: [\n                                {\n                                    internalType: \"uint256\",\n                                    name: \"\",\n                                    type: \"uint256\"\n                                }\n                            ],\n                            stateMutability: \"view\",\n                            type: \"function\"\n                        }\n                    ],\n                    functionName: \"nonces\",\n                    args: [\n                        e\n                    ]\n                }),\n                new Promise((e, t)=>setTimeout(()=>t(new Error(\"TimeoutError: readContract timeout\")), o))\n            ]);\n        } catch (e) {\n            throw e;\n        }\n    }\n    constructor(e){\n        this.config = e;\n    }\n}; //# sourceMappingURL=index.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./dist/index.js\n"));

/***/ })

});