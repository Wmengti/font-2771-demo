{"version":3,"file":"index.js","sources":["../src/config/contract.ts","../src/core/delegate.ts"],"sourcesContent":["import { \n  keccak256,\n} from 'viem';\nexport const paymentContractAddress = '0xA31a2dE4845e4fe869067618F2ABf0Cad279472F' as `0x${string}`;\n\n// PaymentContract ABI (只包含 pay 方法)\nexport const PAYMENT_CONTRACT_ABI = [\n  {\n    \"inputs\": [\n      {\"internalType\": \"address\", \"name\": \"token\", \"type\": \"address\"},\n      {\"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\"},\n      {\"internalType\": \"uint256\", \"name\": \"amount\", \"type\": \"uint256\"},\n      {\"internalType\": \"uint256\", \"name\": \"gasFee\", \"type\": \"uint256\"},\n      {\"internalType\": \"uint256\", \"name\": \"seq\", \"type\": \"uint256\"}\n    ],\n    \"name\": \"pay\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  }\n];\n\nexport const ERC2771_FORWARDER_ABI = [{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"deadline\",\"type\":\"uint48\"}],\"name\":\"ERC2771ForwarderExpiredRequest\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"ERC2771ForwarderInvalidSigner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestedValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"msgValue\",\"type\":\"uint256\"}],\"name\":\"ERC2771ForwarderMismatchedValue\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"ERC2771UntrustfulTarget\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"ExecutedForwardRequest\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"deadline\",\"type\":\"uint48\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct ERC2771Forwarder.ForwardRequestData\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"deadline\",\"type\":\"uint48\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct ERC2771Forwarder.ForwardRequestData[]\",\"name\":\"requests\",\"type\":\"tuple[]\"},{\"internalType\":\"address payable\",\"name\":\"refundReceiver\",\"type\":\"address\"}],\"name\":\"executeBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"deadline\",\"type\":\"uint48\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"getDigest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"deadline\",\"type\":\"uint48\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct ERC2771Forwarder.ForwardRequestData\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]\n\n\nexport const erc2771ForwarderAddress = '0x9EF153E07BAFE741aAc34bE9AA01403D7aEc6d63' as `0x${string}`;\nexport const EIP712_DOMAIN_HASH = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\" as `0x${string}`);\nexport const FORWARD_REQUEST_TYPEHASH = keccak256(\n  \"ForwardRequest(address from,address to,uint256 value,uint256 gas,uint256 nonce,uint48 deadline,bytes data)\" as `0x${string}`\n);\n\nexport const EIP712_DOMAIN_TYPE = [\n  { name: 'name', type: 'string' },\n  { name: 'version', type: 'string' },\n  { name: 'chainId', type: 'uint256' },\n  { name: 'verifyingContract', type: 'address' }\n]\n\nexport const FORWARD_REQUEST_TYPES = {\n  ForwardRequest: [\n    { name: 'from', type: 'address' },\n    { name: 'to', type: 'address' },\n    { name: 'value', type: 'uint256' },\n    { name: 'gas', type: 'uint256' },\n    { name: 'nonce', type: 'uint256' },\n    { name: 'deadline', type: 'uint48' },\n    { name: 'data', type: 'bytes' }\n  ]\n}\n\nexport const contract7702Address = '0x38e424b5310DCB25c0eae5bc58D412D0eF699a7f' as `0x${string}`;\nexport const erc20Address = '0x540126734dee9B0e623c71c2a9ED44Ef4387A81F' as `0x${string}`;\n\nexport const contract7702Abi = [\n  {\n    \"inputs\": [],\n    \"name\": \"nonce\",\n    \"outputs\": [{\"type\": \"uint256\"}],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"components\": [\n          {\"type\": \"bytes\", \"name\": \"data\"},\n          {\"type\": \"address\", \"name\": \"to\"},\n          {\"type\": \"uint256\", \"name\": \"value\"}\n        ],\n        \"type\": \"tuple[]\"\n      },\n      {\"type\": \"bytes\", \"name\": \"signature\"}\n    ],\n    \"name\": \"executeSponsor\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  }\n] as const;\n\nexport const erc20Abi = [\n  {\n    \"inputs\": [\n      {\"type\": \"address\", \"name\": \"to\"},\n      {\"type\": \"uint256\", \"name\": \"amount\"}\n    ],\n    \"name\": \"transfer\",\n    \"outputs\": [{\"type\": \"bool\"}],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\"type\": \"address\", \"name\": \"owner\"},\n      {\"type\": \"address\", \"name\": \"spender\"}\n    ],\n    \"name\": \"allowance\",\n    \"outputs\": [{\"type\": \"uint256\"}],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\"type\": \"address\", \"name\": \"spender\"},\n      {\"type\": \"uint256\", \"name\": \"amount\"}\n    ],\n    \"name\": \"approve\",\n    \"outputs\": [{\"type\": \"bool\"}],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [{\"type\": \"address\", \"name\": \"account\"}],\n    \"name\": \"balanceOf\",\n    \"outputs\": [{\"type\": \"uint256\"}],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  }\n] as const; ","import { \n  createWalletClient, \n  createPublicClient, \n  http, \n  parseEther, \n  encodeFunctionData, \n  keccak256, \n  encodePacked,\n  recoverAddress,\n  hashTypedData,\n  recoverTypedDataAddress,\n  type WalletClient,\n  type PublicClient,\n  type Hash,\n  type Account,\n  type Address,\n  custom\n} from 'viem';\nimport { DelegateConfig, TransferParams, ProcessResult } from '../types';\nimport { _TypedDataEncoder } from '@ethersproject/hash';\nimport { ethers } from 'ethers';\nimport { erc20Abi,PAYMENT_CONTRACT_ABI,paymentContractAddress,erc2771ForwarderAddress,FORWARD_REQUEST_TYPEHASH,EIP712_DOMAIN_TYPE,FORWARD_REQUEST_TYPES,EIP712_DOMAIN_HASH } from '../config/contract';\n\n// 检查是否在浏览器环境中\nconst isBrowser = typeof window !== 'undefined';\n\n// 安全地访问window.ethereum\nconst getEthereum = () => {\n  if (!isBrowser) {\n    return null;\n  }\n  return window.ethereum;\n};\n\n\n\n// 添加生成 EIP-712 签名的函数\nasync function signTypedData(\n  wallet: WalletClient,\n  account: Account,\n  request: any,\n  chainId: number,\n  nonce: bigint\n): Promise<string> {\n  console.log('开始签名过程，参数:');\n  console.log('- 账户地址:', account.address);\n  console.log('- 链 ID:', chainId);\n  console.log('- Nonce:', nonce.toString());\n  console.log('- 请求数据:', request);\n\n\n  const domain = {\n    name: 'MetaTxForwarder',\n    version: '1',\n    chainId: chainId, // 你的链ID\n    verifyingContract: erc2771ForwarderAddress \n  }\n\n  \n  // 确保所有值都是字符串形式，避免 BigInt 序列化问题\n  const safeRequest = {\n    from: request.from,\n    to: request.to,\n    value: request.value.toString(),\n    gas: request.gas.toString(),\n    nonce: request.nonce.toString(),\n    deadline: request.deadline.toString(),\n    data: request.data\n  };\n  \n  \n\n  try {\n    // 尝试直接使用 viem 的钱包客户端进行签名\n    if (wallet.signTypedData) {\n      console.log('使用 viem 钱包客户端签名...');\n      const signature = await wallet.signTypedData({\n        account,\n        domain,\n        types: { ...FORWARD_REQUEST_TYPES },\n        primaryType: 'ForwardRequest',\n        message: safeRequest\n      });\n      console.log('viem 签名成功:', signature);\n      // return signature as string;\n    \n    }\n\n    \n    // 如果 viem 方法不可用，回退到直接使用 window.ethereum\n    console.log('回退到 window.ethereum 直接签名...');\n    \n    // 确保 window.ethereum 存在\n    const ethereum = getEthereum();\n    if (!ethereum) {\n      throw new Error('MetaMask 未安装或不可用');\n    }\n    \n    // 为 MetaMask 构建完整的 EIP-712 数据结构，包含 EIP712Domain 类型\n    const typedDataForMetaMask = {\n      domain: { ...domain, chainId: domain.chainId.toString() },\n      message: safeRequest,\n      primaryType: 'ForwardRequest',\n      types: {\n        EIP712Domain: EIP712_DOMAIN_TYPE,\n        ...FORWARD_REQUEST_TYPES\n      },\n    };\n    \n    console.log('调用 eth_signTypedData_v4...');\n    const signature = await ethereum.request({\n      method: 'eth_signTypedData_v4',\n      params: [\n        account.address,\n        JSON.stringify(typedDataForMetaMask)\n      ]\n    });\n    const { valid, signer } = await verifyTypedDataSignature({\n      chainId,\n      message: request,    // 或 safeRequest\n      signature: signature,\n      expectedSigner: request.from\n    })\n    console.log('签名验证：', valid, signer)\n   \n    \n    console.log('MetaMask 签名成功:', signature);\n    return signature as string;\n  } catch (error: any) {\n    console.error('签名过程中出错:', error);\n    console.error('错误详情:', {\n      message: error.message,\n      code: error.code,\n      data: error.data\n    });\n    throw new Error(`签名失败: ${error.message}`);\n  }\n}\n\n// === 验签函数（用于任何环境，viem版）===\nexport async function verifyTypedDataSignature({\n  chainId,\n  types = FORWARD_REQUEST_TYPES,\n  message,\n  signature,\n  expectedSigner\n}: {\n  chainId: number,\n  types?: typeof FORWARD_REQUEST_TYPES\n  message: any\n  signature: string\n  expectedSigner: string\n}) {\n  const domain = {\n    name: 'MetaTxForwarder',\n    version: '1',\n    chainId: chainId, // 你的链ID\n    verifyingContract: erc2771ForwarderAddress \n  }\n  // viem 恢复签名者\n  const signer = await recoverTypedDataAddress({\n    domain,\n    types,\n    primaryType: 'ForwardRequest',\n    message,\n    signature: signature as `0x${string}`\n  })\n  const valid = signer.toLowerCase() === expectedSigner.toLowerCase()\n  return { valid, signer }\n}\n\nexport class PaymentDelegate {\n  private wallet?: WalletClient;\n  private publicClient?: PublicClient;\n  private config: DelegateConfig;\n  private account?: Account;\n  private chainId?: number;\n\n  constructor(config: DelegateConfig) {\n    this.config = config;\n  }\n\n  private async initializeClients() {\n    console.log('开始初始化客户端...');\n    \n    if (this.config.useMetaMask) {\n      console.log('尝试使用 MetaMask...');\n      \n      // 检查是否在浏览器环境\n      if (!isBrowser) {\n        throw new Error('MetaMask只能在浏览器环境中使用');\n      }\n\n      const ethereum = getEthereum();\n      if (!ethereum) {\n        console.error('MetaMask 未安装');\n        throw new Error('MetaMask not found. Please install MetaMask extension.');\n      }\n    \n      console.log('检测到 MetaMask，创建钱包客户端...');\n      \n      try {\n        // 获取当前链ID\n        const chainIdHex = await ethereum.request({ method: 'eth_chainId' });\n        this.chainId = parseInt(chainIdHex as string, 16);\n        console.log('从 MetaMask 获取到链 ID:', this.chainId);\n        \n        // 使用 MetaMask 钱包\n        this.wallet = createWalletClient({\n          transport: custom(ethereum)\n        });\n        \n        console.log('钱包客户端创建完成');\n        \n        // 创建公共客户端\n        this.publicClient = createPublicClient({\n          transport: custom(ethereum)\n        });\n        \n        console.log('公共客户端创建完成');\n      } catch (error: any) {\n        console.error('初始化客户端失败:', error);\n        console.error('错误详情:', {\n          message: error.message,\n          code: error.code,\n          data: error.data\n        });\n        throw new Error(`初始化客户端失败: ${error.message}`);\n      }\n    } else {\n      console.warn('只支持 MetaMask，请设置 useMetaMask 为 true');\n      throw new Error('Currently only MetaMask is supported');\n    }\n  }\n\n  async connectWallet(): Promise<string> {\n    if (!this.config.useMetaMask) {\n      throw new Error('MetaMask is required');\n    }\n\n    // 确保客户端已初始化\n    if (!this.wallet || !this.publicClient) {\n      await this.initializeClients();\n    }\n\n    try {\n      console.log('请求连接钱包...');\n      const [address] = await this.wallet!.requestAddresses();\n      console.log('获取到钱包地址:', address);\n      \n      this.account = { address, type: 'json-rpc' };\n      \n      // 获取当前链ID\n      try {\n        const chainIdHex = await getEthereum()!.request({ method: 'eth_chainId' });\n        this.chainId = parseInt(chainIdHex as string, 16);\n        console.log('连接钱包后获取链 ID:', this.chainId);\n      } catch (chainError: any) {\n        console.warn('获取链 ID 失败:', chainError);\n        // 如果无法获取链ID，使用默认值\n        this.chainId = 1; // 以太坊主网\n        console.warn('使用默认链 ID:', this.chainId);\n      }\n      \n      console.log('钱包连接完成，地址:', address);\n      console.log('当前链 ID:', this.chainId);\n\n      return address; // 返回连接的地址\n    } catch (error: any) {\n      console.error('连接钱包失败:', error);\n      throw new Error(`连接钱包失败: ${error.message}`);\n    }\n  }\n\n  // 检查是否已连接钱包\n  isConnected(): boolean {\n    return !!this.account;\n  }\n\n  // 获取当前连接的地址\n  getConnectedAddress(): string | undefined {\n    return this.account?.address;\n  }\n\n  // 获取当前连接的链ID\n  getChainId(): number | undefined {\n    return this.chainId;\n  }\n\n  // 编码对 pay 函数的调用\n  private encodePayCallData(\n    token: string,\n    to: string,\n    amount: bigint, // 金额\n    gasFee: bigint = 0n, // gas转成U 调另一个合约来算\n    seq: bigint = 0n,  // api获取的\n  ): `0x${string}` {\n    \n    \n    const payData = encodeFunctionData({\n      abi: PAYMENT_CONTRACT_ABI,\n      functionName: 'pay',\n      args: [\n        token as `0x${string}`,\n        to as `0x${string}`,\n        amount,\n        gasFee,\n        seq\n      ]\n    }) as `0x${string}`;\n    console.log('编码 pay 调用参数:');\n    console.log('- token:', token);\n    console.log('- to:', to);\n    console.log('- amount:', amount.toString());\n    console.log('- gasFee:', gasFee.toString());\n    console.log('- seq:', seq.toString());\n  \n\n    return payData;\n  }\n\n  // 在 PaymentDelegate 类里加\n    async ensureTokenAllowance(tokenAddress: string, owner: string, spender: string, amount: bigint) {\n      // 查询当前allowance\n      const currentAllowance: bigint = await this.publicClient!.readContract({\n        address: tokenAddress as `0x${string}`,\n        abi: erc20Abi,\n        functionName: 'allowance',\n        args: [owner as `0x${string}`, spender as `0x${string}`]\n      }) as bigint;\n\n      console.log(`当前allowance: ${currentAllowance} 需要: ${amount}`);\n      if (currentAllowance >= amount) {\n        console.log('授权额度充足');\n        return true; // 不需要approve\n      }\n\n      // 额度不足，自动请求用户 approve\n      console.log('授权额度不足，发起approve...');\n\n      const approveHash = await this.wallet!.writeContract({\n        account: this.account!,\n        chain: this.chainId ? { id: this.chainId } as any : undefined,\n        address: tokenAddress as `0x${string}`,\n        abi: erc20Abi,\n        functionName: 'approve',\n        args: [spender as `0x${string}`, amount]\n      });\n\n      // 等待approve确认\n      console.log('等待approve确认...');\n      const receipt = await this.publicClient!.waitForTransactionReceipt({ hash: approveHash });\n      if (receipt.status !== 'success') {\n        throw new Error('ERC20 approve 失败！');\n      }\n      console.log('approve成功，继续metaTx流程');\n      return true;\n    }\n\n\n  \n\n  \n  \n  async processTransfer(params: TransferParams): Promise<any> {\n    try {\n      console.log('开始处理转账...');\n      \n      // 确保钱包已初始化和连接\n      if (!this.wallet || this.chainId === undefined || !this.account) {\n        console.log('钱包未初始化或未连接，尝试初始化和连接...');\n        \n        // 确保客户端已初始化\n        if (!this.wallet || !this.publicClient) {\n          console.log('初始化客户端...');\n          await this.initializeClients();\n        }\n        \n        // 确保已连接钱包\n        if (!this.account) {\n          console.log('连接钱包...');\n          await this.connectWallet();\n        }\n        \n        if (!this.wallet || this.chainId === undefined || !this.account) {\n          throw new Error('无法初始化或连接钱包');\n        }\n      }\n      \n      console.log('钱包状态: 已初始化');\n      console.log('钱包地址:', this.account.address);\n      console.log('链ID:', this.chainId);\n      if (params.tokenAddress) {\n        // 只有代币支付才需要\n        await this.ensureTokenAllowance(\n          params.tokenAddress,\n          this.account.address,\n          paymentContractAddress,\n          params.amount\n        );\n      }\n      \n      \n      // 使用参数中的 seq，如果没有则使用当前时间戳\n      const seq = params.seq || BigInt(Math.floor(Date.now() / 1000));\n      console.log('使用序列号 seq:', seq.toString());\n      \n      // 使用参数中的 gasFee，如果没有则默认为 0\n      const gasFee = params.gasFee || 0n;\n      console.log('使用 gasFee:', gasFee.toString());\n      \n      let payCallData;\n      \n      if (params.tokenAddress) {\n        // 代币支付\n        payCallData = this.encodePayCallData(\n          params.tokenAddress,\n          params.to,\n          params.amount,\n          gasFee, // 使用参数中的 gasFee\n          seq,    // 使用参数中的 seq\n        );\n      } else {\n        // 原生代币 (ETH) 支付\n        // 使用零地址作为代币地址表示 ETH\n        const ethAddress = '0x0000000000000000000000000000000000000000';\n        \n        payCallData = this.encodePayCallData(\n          ethAddress,\n          params.to,\n          params.amount,\n          gasFee, // 使用参数中的 gasFee\n          seq,    // 使用参数中的 seq\n        );\n      }\n      \n      // 设置1小时后的截止时间 (当前时间 + 1小时，以秒为单位)\n      const deadline = Math.floor(Date.now() / 1000) + 36000;\n   \n      // 获取用户地址的 nonce\n      const userNonce = await this.getNonce(this.account.address);\n\n      // try {\n      //   userNonce = await this.getNonce(this.account.address, { timeout: 10000 }); // 10秒超时\n      //   console.log('获取到用户 nonce:', userNonce.toString());\n      // } catch (err: any) {\n      //   if (err.message.includes('TimeoutError')) {\n      //     throw new Error('链响应太慢，请重试');\n      //   } else {\n      //     throw new Error('获取 nonce 失败');\n      //   }\n      // }\n      \n      // 创建符合 ForwardRequestData 结构的请求数据\n      const request = {\n        from: this.account.address,\n        to: paymentContractAddress,\n        value: params.tokenAddress ? '0' : params.amount.toString(), // 如果是代币支付，value为0\n        gas: '3000000', // 设置合理的 gas 限制\n        nonce: userNonce.toString(), // 添加 nonce 字段\n        deadline: deadline.toString(), // 设置截止时间\n        data: payCallData\n      };\n      \n      console.log('构建的请求数据:', request);\n      \n      // 生成签名\n      if (this.wallet && this.chainId !== undefined) {\n        try {\n          console.log('准备进行 EIP-712 签名...');\n          console.log('钱包状态:', this.wallet ? '已初始化' : '未初始化');\n          console.log('账户状态:', this.account ? '已连接' : '未连接');\n          console.log('链ID:', this.chainId);\n          \n          // 手动检查 MetaMask 状态\n          if (getEthereum() && getEthereum()!.isMetaMask) {\n            console.log('MetaMask 已安装');\n            \n            // 确保账户已连接\n            const accounts = await getEthereum()!.request({ method: 'eth_accounts' });\n            console.log('MetaMask 连接的账户:', accounts);\n            \n            if (!accounts || accounts.length === 0) {\n              console.warn('MetaMask 未连接任何账户，尝试请求连接...');\n              await getEthereum()!.request({ method: 'eth_requestAccounts' });\n            }\n          }\n          \n          const signature = await signTypedData(\n            this.wallet,\n            this.account,\n            request,\n            this.chainId,\n            userNonce\n          );\n          \n          console.log('生成的签名:', signature);\n          \n          // 构建 pay 函数的参数对象\n          const payParams = {\n            token: params.tokenAddress || '0x0000000000000000000000000000000000000000',\n            to: params.to,\n            amount: params.amount.toString(),\n            gasFee: gasFee.toString(),\n            seq: seq.toString(),\n            payer: this.account.address\n          };\n          \n          // 返回包含签名的完整请求和 pay 参数\n          return {\n            ...request,\n            signature,\n            payParams // 添加 pay 函数的参数\n          };\n        } catch (signError: any) {\n          console.error('签名失败:', signError);\n          console.error('签名错误详情:', {\n            message: signError.message,\n            code: signError.code,\n            data: signError.data,\n            stack: signError.stack\n          });\n          \n          // 尝试恢复用户体验，提供详细错误信息\n          let errorMessage = '签名请求被拒绝或发生错误';\n          \n          if (signError.code === 4001) {\n            errorMessage = '用户拒绝了签名请求';\n          } else if (signError.message && signError.message.includes('user rejected')) {\n            errorMessage = '用户拒绝了签名请求';\n          } else if (signError.message) {\n            errorMessage = `签名错误: ${signError.message}`;\n          }\n          \n          // 构建 pay 函数的参数对象\n          const payParams = {\n            token: params.tokenAddress || '0x0000000000000000000000000000000000000000',\n            to: params.to,\n            amount: params.amount.toString(),\n            gasFee: gasFee.toString(),\n            seq: seq.toString(),\n            payer: this.account.address\n          };\n          \n          // 继续返回未签名的请求、错误信息和 pay 参数\n          return {\n            ...request,\n            payParams, // 添加 pay 函数的参数\n            error: errorMessage,\n            rawError: {\n              message: signError.message,\n              code: signError.code\n            }\n          };\n        }\n      }\n      \n      // 构建 pay 函数的参数对象\n      const payParams = {\n        token: params.tokenAddress || '0x0000000000000000000000000000000000000000',\n        to: params.to,\n        amount: params.amount.toString(),\n        gasFee: gasFee.toString(),\n        seq: seq.toString(),\n        payer: this.account.address\n      };\n      \n      // 返回请求和 pay 参数\n      return {\n        ...request,\n        payParams // 添加 pay 函数的参数\n      };\n    } catch (error: any) {\n      console.error('处理转账失败:', error);\n      throw new Error(`处理转账失败: ${error.message}`);\n    }\n  }\n\n  // 获取地址的 nonce\n  async getNonce(address: string, options?: { timeout?: number }): Promise<bigint> {\n    if (!this.publicClient) {\n      throw new Error('Public client not initialized');\n    }\n    const timeout = options?.timeout ?? 10000; // 默认10秒\n  \n    try {\n      const nonce = await Promise.race([\n        this.publicClient.readContract({\n          address: erc2771ForwarderAddress as `0x${string}`,\n          abi: [\n            {\n              \"inputs\": [{\"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\"}],\n              \"name\": \"nonces\",\n              \"outputs\": [{\"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\"}],\n              \"stateMutability\": \"view\",\n              \"type\": \"function\"\n            }\n          ],\n          functionName: 'nonces',\n          args: [address as `0x${string}`]\n        }) as Promise<bigint>,\n        new Promise((_, reject) => setTimeout(() => reject(new Error('TimeoutError: readContract timeout')), timeout))\n      ]);\n      return nonce as bigint;\n    } catch (error) {\n      // 这里不吞掉错误，直接抛出\n      throw error;\n    }\n  }\n  \n}\n\n\n\n \n\n\n\n"],"names":["paymentContractAddress","PAYMENT_CONTRACT_ABI","inputs","internalType","name","type","outputs","stateMutability","erc2771ForwarderAddress","keccak256","EIP712_DOMAIN_TYPE","FORWARD_REQUEST_TYPES","ForwardRequest","erc20Abi","isBrowser","window","getEthereum","ethereum","async","signTypedData","wallet","account","request","chainId","nonce","console","log","address","toString","domain","version","verifyingContract","safeRequest","from","to","value","gas","deadline","data","signature","types","primaryType","message","Error","typedDataForMetaMask","EIP712Domain","method","params","JSON","stringify","valid","signer","expectedSigner","recoverTypedDataAddress","toLowerCase","verifyTypedDataSignature","error","code","constructor","config","this","initializeClients","useMetaMask","warn","chainIdHex","parseInt","createWalletClient","transport","custom","publicClient","createPublicClient","connectWallet","requestAddresses","chainError","isConnected","getConnectedAddress","getChainId","encodePayCallData","token","amount","gasFee","seq","payData","encodeFunctionData","abi","functionName","args","ensureTokenAllowance","tokenAddress","owner","spender","currentAllowance","readContract","approveHash","writeContract","chain","id","undefined","waitForTransactionReceipt","hash","status","processTransfer","BigInt","Math","floor","Date","now","payCallData","ethAddress","userNonce","getNonce","isMetaMask","accounts","length","payParams","payer","signError","stack","errorMessage","includes","rawError","options","timeout","Promise","race","_","reject","setTimeout"],"mappings":"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"}