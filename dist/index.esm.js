import{keccak256 as e,createWalletClient as t,custom as n,createPublicClient as a,encodeFunctionData as i,recoverTypedDataAddress as s}from"viem";const o="0x97169867AC7DD5ca2fb506d335EA940D89695E4F",r=[{inputs:[{internalType:"address",name:"_trustedForwarder",type:"address"},{internalType:"address",name:"_feeReceiver",type:"address"},{internalType:"address",name:"_feeRuleProvider",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"OwnableInvalidOwner",type:"error"},{inputs:[{internalType:"address",name:"account",type:"address"}],name:"OwnableUnauthorizedAccount",type:"error"},{inputs:[{internalType:"address",name:"token",type:"address"}],name:"SafeERC20FailedOperation",type:"error"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"user",type:"address"},{indexed:!0,internalType:"bytes32",name:"merchantId",type:"bytes32"},{indexed:!0,internalType:"address",name:"token",type:"address"},{indexed:!1,internalType:"uint256",name:"originalAmount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"discountedAmount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"pointsUsed",type:"uint256"},{indexed:!1,internalType:"uint256",name:"voucherUsed",type:"uint256"},{indexed:!1,internalType:"uint256",name:"pointsReward",type:"uint256"},{indexed:!1,internalType:"uint256",name:"voucherReward",type:"uint256"},{indexed:!1,internalType:"uint256",name:"feePaid",type:"uint256"},{indexed:!1,internalType:"address",name:"merchantRecipient",type:"address"},{indexed:!1,internalType:"address",name:"feeReceiver",type:"address"},{indexed:!1,internalType:"uint256",name:"seq",type:"uint256"}],name:"Consumed",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"user",type:"address"},{indexed:!0,internalType:"address",name:"token",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Deposit",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"merchantId",type:"bytes32"},{indexed:!1,internalType:"bool",name:"promoTiersEnabled",type:"bool"},{indexed:!1,internalType:"bool",name:"discountEnabled",type:"bool"},{indexed:!1,internalType:"uint256",name:"discountBase",type:"uint256"},{indexed:!1,internalType:"uint256",name:"discountRate",type:"uint256"},{indexed:!1,internalType:"bool",name:"cashbackPointEnabled",type:"bool"},{indexed:!1,internalType:"uint256",name:"cashbackPointBase",type:"uint256"},{indexed:!1,internalType:"uint256",name:"cashbackPointAmount",type:"uint256"},{indexed:!1,internalType:"bool",name:"cashbackVoucherEnabled",type:"bool"},{indexed:!1,internalType:"uint256",name:"cashbackVoucherBase",type:"uint256"},{indexed:!1,internalType:"uint256",name:"cashbackVoucherAmount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"voucherExpirePeriod",type:"uint256"}],name:"MerchantConfigUpdated",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"Operator",type:"address"},{indexed:!1,internalType:"bytes32",name:"merchantId",type:"bytes32"},{indexed:!1,internalType:"bool",name:"enable",type:"bool"}],name:"MerchantOperatorSet",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"merchantId",type:"bytes32"},{indexed:!1,internalType:"address",name:"recipient",type:"address"}],name:"MerchantRecipientsSet",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"bytes32",name:"merchantId",type:"bytes32"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"PointsGranted",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"token",type:"address"},{indexed:!1,internalType:"bool",name:"status",type:"bool"}],name:"TokenWhitelistChanged",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"voucherId",type:"uint256"},{indexed:!1,internalType:"bytes32",name:"merchantId",type:"bytes32"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"expireAt",type:"uint256"}],name:"VoucherGranted",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"user",type:"address"},{indexed:!0,internalType:"address",name:"token",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Withdraw",type:"event"},{inputs:[{internalType:"bytes32",name:"merchantId",type:"bytes32"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"voucherId",type:"uint256"},{internalType:"uint256",name:"pointToUse",type:"uint256"},{internalType:"uint256",name:"seq",type:"uint256"}],name:"consume",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"deposit",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"feeReceiver",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"feeRuleProvider",outputs:[{internalType:"contract IFeeRuleProvider",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"token",type:"address"}],name:"getMyBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"merchantId",type:"bytes32"}],name:"getMyPoints",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"getMyVouchers",outputs:[{internalType:"uint256[]",name:"",type:"uint256[]"},{internalType:"bytes32[]",name:"",type:"bytes32[]"},{internalType:"uint256[]",name:"",type:"uint256[]"},{internalType:"bool[]",name:"",type:"bool[]"},{internalType:"uint256[]",name:"",type:"uint256[]"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"user",type:"address"},{internalType:"address",name:"token",type:"address"}],name:"getUserBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"user",type:"address"},{internalType:"bytes32",name:"merchantId",type:"bytes32"}],name:"getUserPoints",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"vid",type:"uint256"}],name:"getVoucher",outputs:[{internalType:"bytes32",name:"merchantId",type:"bytes32"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"bool",name:"used",type:"bool"},{internalType:"uint256",name:"expireAt",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"bytes32",name:"merchantId",type:"bytes32"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"grantPoints",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"bytes32",name:"merchantId",type:"bytes32"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"expireAt",type:"uint256"}],name:"grantVoucher",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"forwarder",type:"address"}],name:"isTrustedForwarder",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"",type:"bytes32"}],name:"merchantConfigs",outputs:[{internalType:"bool",name:"promoTiersEnabled",type:"bool"},{internalType:"bool",name:"discountEnabled",type:"bool"},{internalType:"uint256",name:"discountBase",type:"uint256"},{internalType:"uint256",name:"discountRate",type:"uint256"},{internalType:"bool",name:"cashbackPointEnabled",type:"bool"},{internalType:"uint256",name:"cashbackPointBase",type:"uint256"},{internalType:"uint256",name:"cashbackPointAmount",type:"uint256"},{internalType:"bool",name:"cashbackVoucherEnabled",type:"bool"},{internalType:"uint256",name:"cashbackVoucherBase",type:"uint256"},{internalType:"uint256",name:"cashbackVoucherAmount",type:"uint256"},{internalType:"uint256",name:"voucherExpirePeriod",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"bytes32",name:"",type:"bytes32"}],name:"merchantOperator",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"",type:"bytes32"}],name:"merchantRecipients",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"nextVoucherId",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"merchantId",type:"bytes32"},{components:[{internalType:"bool",name:"promoTiersEnabled",type:"bool"},{components:[{internalType:"uint256",name:"minAmount",type:"uint256"},{internalType:"uint256",name:"discountRate",type:"uint256"},{internalType:"uint256",name:"voucherAmount",type:"uint256"},{internalType:"uint256",name:"pointAmount",type:"uint256"}],internalType:"struct UnifiedMerchantVault.PromoTier[]",name:"promoTiers",type:"tuple[]"},{internalType:"bool",name:"discountEnabled",type:"bool"},{internalType:"uint256",name:"discountBase",type:"uint256"},{internalType:"uint256",name:"discountRate",type:"uint256"},{internalType:"bool",name:"cashbackPointEnabled",type:"bool"},{internalType:"uint256",name:"cashbackPointBase",type:"uint256"},{internalType:"uint256",name:"cashbackPointAmount",type:"uint256"},{internalType:"bool",name:"cashbackVoucherEnabled",type:"bool"},{internalType:"uint256",name:"cashbackVoucherBase",type:"uint256"},{internalType:"uint256",name:"cashbackVoucherAmount",type:"uint256"},{internalType:"uint256",name:"voucherExpirePeriod",type:"uint256"}],internalType:"struct UnifiedMerchantVault.MerchantConfig",name:"config",type:"tuple"}],name:"setMerchantConfig",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"Operator",type:"address"},{internalType:"bytes32",name:"merchantId",type:"bytes32"},{internalType:"bool",name:"enable",type:"bool"}],name:"setMerchantOperator",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"merchantId",type:"bytes32"},{internalType:"address",name:"recipient",type:"address"}],name:"setMerchantRecipient",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"bool",name:"status",type:"bool"}],name:"setTokenWhitelist",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"forwarder",type:"address"}],name:"setTrustedForwarder",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"tokenWhitelist",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"trustedForwarder",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"usedSeq",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"address",name:"",type:"address"}],name:"userBalances",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"bytes32",name:"",type:"bytes32"}],name:"userPoints",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"}],name:"userVouchers",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"vouchers",outputs:[{internalType:"bytes32",name:"merchantId",type:"bytes32"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"bool",name:"used",type:"bool"},{internalType:"uint256",name:"expireAt",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"withdraw",outputs:[],stateMutability:"nonpayable",type:"function"}],l="0xB805f94b483bAB6658CA7164FBe02dcB5cA1D332",p=[{inputs:[{internalType:"string",name:"_name",type:"string"},{internalType:"address",name:"_feeAddress",type:"address"},{internalType:"uint256",name:"_feePpm",type:"uint256"},{internalType:"address",name:"trustedForwarder",type:"address"},{internalType:"address[]",name:"initialTokens",type:"address[]"},{internalType:"uint256[]",name:"initialMinUnits",type:"uint256[]"}],stateMutability:"nonpayable",type:"constructor"},{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"OwnableInvalidOwner",type:"error"},{inputs:[{internalType:"address",name:"account",type:"address"}],name:"OwnableUnauthorizedAccount",type:"error"},{inputs:[{internalType:"address",name:"token",type:"address"}],name:"SafeERC20FailedOperation",type:"error"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"payer",type:"address"},{indexed:!0,internalType:"address",name:"token",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"fee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"toAmount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"seq",type:"uint256"}],name:"Paid",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"token",type:"address"},{indexed:!1,internalType:"bool",name:"isWhitelisted",type:"bool"}],name:"TokenWhitelistUpdated",type:"event"},{inputs:[],name:"MAX_AMOUNT",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"feeAddress",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"feePpm",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"feePpmPerTo",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"token",type:"address"}],name:"isTokenWhitelisted",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"forwarder",type:"address"}],name:"isTrustedForwarder",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"minUnitPerToken",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"seq",type:"uint256"}],name:"pay",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"_feePpm",type:"uint256"}],name:"setFee",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"_feeAddress",type:"address"}],name:"setFeeAddress",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"newFeePpm",type:"uint256"}],name:"setFeePpmForTo",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"minUnit",type:"uint256"}],name:"setMinUnit",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"bool",name:"allowed",type:"bool"}],name:"setTokenWhitelist",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"tokenWhitelist",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"trustedForwarder",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"usedSeq",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"}],c="0xC109B607A2228FF55b6341F0b926b3aE7FDe964c";e("EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"),e("ForwardRequest(address from,address to,uint256 value,uint256 gas,uint256 nonce,uint48 deadline,bytes data)");const u=[{name:"name",type:"string"},{name:"version",type:"string"},{name:"chainId",type:"uint256"},{name:"verifyingContract",type:"address"}],d={ForwardRequest:[{name:"from",type:"address"},{name:"to",type:"address"},{name:"value",type:"uint256"},{name:"gas",type:"uint256"},{name:"nonce",type:"uint256"},{name:"deadline",type:"uint48"},{name:"data",type:"bytes"}]},y=[{inputs:[{type:"address",name:"to"},{type:"uint256",name:"amount"}],name:"transfer",outputs:[{type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{type:"address",name:"owner"},{type:"address",name:"spender"}],name:"allowance",outputs:[{type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{type:"address",name:"spender"},{type:"uint256",name:"amount"}],name:"approve",outputs:[{type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{type:"address",name:"account"}],name:"balanceOf",outputs:[{type:"uint256"}],stateMutability:"view",type:"function"}],m="undefined"!=typeof window,h=()=>m?window.ethereum:null;class b{constructor(e={useMetaMask:!0}){this.config=e}async initializeClients(){if(console.log("开始初始化客户端..."),!this.config.useMetaMask)throw console.warn("只支持 MetaMask，请设置 useMetaMask 为 true"),new Error("Currently only MetaMask is supported");{if(console.log("尝试使用 MetaMask..."),!m)throw new Error("MetaMask只能在浏览器环境中使用");const e=h();if(!e)throw console.error("MetaMask 未安装"),new Error("MetaMask not found. Please install MetaMask extension.");console.log("检测到 MetaMask，创建钱包客户端...");try{const i=await e.request({method:"eth_chainId"});this.chainId=parseInt(i,16),console.log("从 MetaMask 获取到链 ID:",this.chainId),this.wallet=t({transport:n(e)}),console.log("钱包客户端创建完成"),this.publicClient=a({transport:n(e)}),console.log("公共客户端创建完成")}catch(e){throw console.error("初始化客户端失败:",e),console.error("错误详情:",{message:e.message,code:e.code,data:e.data}),new Error(`初始化客户端失败: ${e.message}`)}}}async connectWallet(){if(!this.config.useMetaMask)throw new Error("MetaMask is required");this.wallet&&this.publicClient||await this.initializeClients();try{console.log("请求连接钱包...");const[e]=await this.wallet.requestAddresses();console.log("获取到钱包地址:",e),this.account={address:e,type:"json-rpc"};try{const e=await h().request({method:"eth_chainId"});this.chainId=parseInt(e,16),console.log("连接钱包后获取链 ID:",this.chainId)}catch(e){console.warn("获取链 ID 失败:",e),this.chainId=1,console.warn("使用默认链 ID:",this.chainId)}return console.log("钱包连接完成，地址:",e),console.log("当前链 ID:",this.chainId),e}catch(e){throw console.error("连接钱包失败:",e),new Error(`连接钱包失败: ${e.message}`)}}async ensureWalletConnected(){if(!(this.wallet&&void 0!==this.chainId&&this.account||(console.log("钱包未初始化或未连接，尝试初始化和连接..."),this.wallet&&this.publicClient||(console.log("初始化客户端..."),await this.initializeClients()),this.account||(console.log("连接钱包..."),await this.connectWallet()),this.wallet&&void 0!==this.chainId&&this.account)))throw new Error("无法初始化或连接钱包")}isConnected(){return!!this.account}getConnectedAddress(){return this.account?.address}getChainId(){return this.chainId}getAccount(){return this.account}getWalletClient(){return this.wallet}getPublicClient(){return this.publicClient}async ensureTokenAllowance(e,t,n){await this.ensureWalletConnected();const a=await this.publicClient.readContract({address:e,abi:y,functionName:"allowance",args:[this.account.address,t]});if(console.log(`当前allowance: ${a} 需要: ${n}`),a>=n)return console.log("授权额度充足"),!0;console.log("授权额度不足，发起approve...");const i=await this.wallet.writeContract({account:this.account,chain:this.chainId?{id:this.chainId}:void 0,address:e,abi:y,functionName:"approve",args:[t,n]});console.log("等待approve确认...");if("success"!==(await this.publicClient.waitForTransactionReceipt({hash:i})).status)throw new Error("ERC20 approve 失败！");return console.log("approve成功"),!0}async getNonce(e,t){await this.ensureWalletConnected();const n=t?.timeout??1e4;try{return await Promise.race([this.publicClient.readContract({address:c,abi:[{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"nonces",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"}],functionName:"nonces",args:[e]}),new Promise(((e,t)=>setTimeout((()=>t(new Error("TimeoutError: readContract timeout"))),n)))])}catch(e){throw e}}}class g{constructor(e){this.blockchainService=e}async approveToken(e,t,n){await this.blockchainService.ensureWalletConnected();const a=this.blockchainService.getWalletClient(),i=this.blockchainService.getAccount(),s=this.blockchainService.getChainId();if(!a||!i||void 0===s)throw new Error("钱包未连接或初始化失败");console.log(`开始授权代币 ${e} 给 ${t}，金额: ${n.toString()}`);const o=await a.writeContract({account:i,chain:{id:s},address:e,abi:y,functionName:"approve",args:[t,n]});return console.log("授权交易已发送，哈希:",o),o}async checkAllowance(e,t,n){await this.blockchainService.ensureWalletConnected();const a=this.blockchainService.getPublicClient();if(!a)throw new Error("公共客户端未初始化");const i=await a.readContract({address:e,abi:y,functionName:"allowance",args:[t,n]});return console.log(`当前授权额度: ${i.toString()}`),i}async ensureTokenAllowance(e,t,n){const a=this.blockchainService.getConnectedAddress();if(!a)throw new Error("钱包未连接");const i=await this.checkAllowance(e,a,t);if(console.log(`检查授权额度: 当前 ${i.toString()}, 需要 ${n.toString()}`),i>=n)return console.log("授权额度充足"),!0;console.log("授权额度不足，发起授权交易...");const s=await this.approveToken(e,t,n),o=this.blockchainService.getPublicClient();if(o){console.log("等待授权交易确认...");if("success"!==(await o.waitForTransactionReceipt({hash:s})).status)throw new Error("授权交易失败");console.log("授权交易确认成功")}return!0}async getTokenBalance(e,t){await this.blockchainService.ensureWalletConnected();const n=this.blockchainService.getPublicClient();if(!n)throw new Error("公共客户端未初始化");const a=t||this.blockchainService.getConnectedAddress();if(!a)throw new Error("未指定查询地址且钱包未连接");const i=await n.readContract({address:e,abi:y,functionName:"balanceOf",args:[a]});return console.log(`代币 ${e} 余额: ${i.toString()}`),i}}class w{constructor(e){this.blockchainService=e,this.tokenOperations=new g(e)}async pay(e,t,n,a=BigInt(Math.floor(Date.now()/1e3))){await this.blockchainService.ensureWalletConnected();const i=this.blockchainService.getWalletClient(),s=this.blockchainService.getAccount(),o=this.blockchainService.getChainId();if(!i||!s||void 0===o)throw new Error("钱包未连接或初始化失败");console.log("开始直接支付:"),console.log("- 接收方:",e),console.log("- 金额:",t.toString()),console.log("- 代币地址:",n||"ETH"),console.log("- 序列号:",a.toString()),n&&await this.tokenOperations.ensureTokenAllowance(n,l,t);const r=await i.writeContract({account:s,chain:{id:o},address:l,abi:p,functionName:"pay",args:[n||"0x0000000000000000000000000000000000000000",e,t,a],value:n?0n:t});return console.log("支付交易已发送，哈希:",r),r}encodePayCallData(e,t,n,a=0n){const s=i({abi:p,functionName:"pay",args:[e,t,n,a]});return console.log("编码支付调用参数:"),console.log("- token:",e),console.log("- to:",t),console.log("- amount:",n.toString()),console.log("- seq:",a.toString()),s}}const T="undefined"!=typeof window;class v{constructor(e){this.blockchainService=e}async verifyTypedDataSignature({chainId:e,message:t,signature:n,expectedSigner:a}){const i={name:"MetaTxForwarder",version:"1",chainId:e,verifyingContract:c},o=await s({domain:i,types:d,primaryType:"ForwardRequest",message:t,signature:n});return{valid:o.toLowerCase()===a.toLowerCase(),signer:o}}async signTypedData(e,t,n){console.log("开始签名过程，参数:"),console.log("- 账户地址:",e.from),console.log("- 链 ID:",t),console.log("- Nonce:",n.toString());const a={name:"MetaTxForwarder",version:"1",chainId:t,verifyingContract:c},i={from:e.from,to:e.to,value:e.value.toString(),gas:e.gas.toString(),nonce:e.nonce.toString(),deadline:e.deadline.toString(),data:e.data};try{const n=this.blockchainService.getWalletClient(),s=this.blockchainService.getAccount();if(!n||!s)throw new Error("钱包未连接或初始化失败");if(n.signTypedData){console.log("使用 viem 钱包客户端签名...");try{const e=await n.signTypedData({account:s,domain:a,types:{...d},primaryType:"ForwardRequest",message:i});return console.log("viem 签名成功:",e),e}catch(e){console.warn("viem 签名失败，回退到原生方法:",e.message)}}if(!T||!window.ethereum)throw new Error("浏览器环境不可用或未安装钱包");console.log("使用浏览器原生签名方法...");const o={domain:{...a,chainId:a.chainId.toString()},message:i,primaryType:"ForwardRequest",types:{EIP712Domain:u,...d}};let r;try{r=await window.ethereum.request({method:"eth_signTypedData_v4",params:[e.from,JSON.stringify(o)]})}catch(t){console.warn("eth_signTypedData_v4 失败，尝试 eth_signTypedData_v3"),r=await window.ethereum.request({method:"eth_signTypedData_v3",params:[e.from,JSON.stringify(o)]})}const{valid:l,signer:p}=await this.verifyTypedDataSignature({chainId:t,message:i,signature:r,expectedSigner:e.from});if(console.log("签名验证：",l,p),!l)throw new Error("签名验证失败");return console.log("签名成功:",r),r}catch(e){throw console.error("签名过程中出错:",e),new Error(`签名失败: ${e.message}`)}}}class f{constructor(e){this.blockchainService=e,this.tokenOperations=new g(e),this.directPayment=new w(e),this.signingService=new v(e)}async preparePayment(e,t,n,a=BigInt(Math.floor(Date.now()/1e3)),i=3600){await this.blockchainService.ensureWalletConnected();const s=this.blockchainService.getAccount(),o=this.blockchainService.getChainId();if(!s||void 0===o)throw new Error("钱包未连接或初始化失败");console.log("准备代付gas支付请求:"),console.log("- 接收方:",e),console.log("- 金额:",t.toString()),console.log("- 代币地址:",n||"ETH"),console.log("- 序列号:",a.toString()),console.log("- 过期时间(秒):",i),n&&await this.tokenOperations.ensureTokenAllowance(n,l,t);const r=this.directPayment.encodePayCallData(n||"0x0000000000000000000000000000000000000000",e,t,a),p=Math.floor(Date.now()/1e3)+i,c=await this.blockchainService.getNonce(s.address),u={from:s.address,to:l,value:n?"0":t.toString(),gas:"3000000",nonce:c.toString(),deadline:p.toString(),data:r};console.log("构建的请求数据:",u);try{const e=await this.signingService.signTypedData(u,o,c);u.signature=e,console.log("签名成功")}catch(e){console.error("签名失败:",e),console.warn("返回未签名的请求数据")}return u}}class k{constructor(e){this.blockchainService=e,this.tokenOperations=new g(e),this.signingService=new v(e)}async deposit(e,t){await this.blockchainService.ensureWalletConnected();const n=this.blockchainService.getWalletClient(),a=this.blockchainService.getAccount(),i=this.blockchainService.getChainId();if(!n||!a||void 0===i)throw new Error("钱包未连接或初始化失败");console.log("开始存款到金库:"),console.log("- 代币地址:",e),console.log("- 存款金额:",t.toString()),await this.tokenOperations.ensureTokenAllowance(e,o,t);const s=await n.writeContract({account:a,chain:{id:i},address:o,abi:r,functionName:"deposit",args:[e,t]});return console.log("存款交易已发送，哈希:",s),s}async withdraw(e,t){await this.blockchainService.ensureWalletConnected();const n=this.blockchainService.getWalletClient(),a=this.blockchainService.getAccount(),i=this.blockchainService.getChainId();if(!n||!a||void 0===i)throw new Error("钱包未连接或初始化失败");console.log("开始从金库提现:"),console.log("- 代币地址:",e),console.log("- 提现金额:",t.toString());const s=await n.writeContract({account:a,chain:{id:i},address:o,abi:r,functionName:"withdraw",args:[e,t]});return console.log("提现交易已发送，哈希:",s),s}async consumeDirect(e,t,n,a=0n,i=0n,s=BigInt(Math.floor(Date.now()/1e3))){await this.blockchainService.ensureWalletConnected();const l=this.blockchainService.getWalletClient(),p=this.blockchainService.getAccount(),c=this.blockchainService.getChainId();if(!l||!p||void 0===c)throw new Error("钱包未连接或初始化失败");console.log("开始直接消费:"),console.log("- 商家ID:",e),console.log("- 代币地址:",t),console.log("- 消费金额:",n.toString()),console.log("- 代金券ID:",a.toString()),console.log("- 使用积分:",i.toString()),console.log("- 序列号:",s.toString());const u=await l.writeContract({account:p,chain:{id:c},address:o,abi:r,functionName:"consume",args:[e,t,n,a,i,s]});return console.log("消费交易已发送，哈希:",u),u}async prepareRelayedConsume(e,t,n,a=0n,s=0n,l=BigInt(Math.floor(Date.now()/1e3)),p=3600){await this.blockchainService.ensureWalletConnected();const c=this.blockchainService.getAccount(),u=this.blockchainService.getChainId();if(!c||void 0===u)throw new Error("钱包未连接或初始化失败");console.log("准备代付gas消费请求:"),console.log("- 商家ID:",e),console.log("- 代币地址:",t),console.log("- 消费金额:",n.toString()),console.log("- 代金券ID:",a.toString()),console.log("- 使用积分:",s.toString()),console.log("- 序列号:",l.toString()),console.log("- 过期时间(秒):",p);const d=i({abi:r,functionName:"consume",args:[e,t,n,a,s,l]}),y=Math.floor(Date.now()/1e3)+p,m=await this.blockchainService.getNonce(c.address),h={from:c.address,to:o,value:"0",gas:"3000000",nonce:m.toString(),deadline:y.toString(),data:d};console.log("构建的请求数据:",h);try{const e=await this.signingService.signTypedData(h,u,m);h.signature=e,console.log("签名成功")}catch(e){console.error("签名失败:",e),console.warn("返回未签名的请求数据")}return h}async getVaultBalance(e,t){await this.blockchainService.ensureWalletConnected();const n=this.blockchainService.getPublicClient();if(!n)throw new Error("公共客户端未初始化");const a=t||this.blockchainService.getConnectedAddress();if(!a)throw new Error("未指定查询地址且钱包未连接");const i=await n.readContract({address:o,abi:r,functionName:"getUserBalance",args:[a,e]});return console.log(`金库余额 ${e}: ${i.toString()}`),i}async getUserPoints(e,t){await this.blockchainService.ensureWalletConnected();const n=this.blockchainService.getPublicClient();if(!n)throw new Error("公共客户端未初始化");const a=t||this.blockchainService.getConnectedAddress();if(!a)throw new Error("未指定查询地址且钱包未连接");const i=await n.readContract({address:o,abi:r,functionName:"getUserPoints",args:[a,e]});return console.log(`用户积分 ${e}: ${i.toString()}`),i}}class M{constructor(e={useMetaMask:!0}){this.blockchainService=new b(e),this.token=new g(this.blockchainService),this.directPayment=new w(this.blockchainService),this.relayedPayment=new f(this.blockchainService),this.vault=new k(this.blockchainService)}async connectWallet(){return this.blockchainService.connectWallet()}isConnected(){return this.blockchainService.isConnected()}getConnectedAddress(){return this.blockchainService.getConnectedAddress()}getChainId(){return this.blockchainService.getChainId()}async approveToken(e,t,n){return this.token.approveToken(e,t,n)}async checkAllowance(e,t,n){return this.token.checkAllowance(e,t,n)}async ensureTokenAllowance(e,t,n){return this.token.ensureTokenAllowance(e,t,n)}async userPayDirect(e,t,n,a){return this.directPayment.pay(e,t,n,a)}async prepareRelayedPayment(e,t,n,a,i=3600){return this.relayedPayment.preparePayment(e,t,n,a,i)}async depositToVault(e,t){return this.vault.deposit(e,t)}async withdrawFromVault(e,t){return this.vault.withdraw(e,t)}async consumeFromVault(e,t,n,a=0n,i=0n,s){return this.vault.consumeDirect(e,t,n,a,i,s)}async prepareRelayedConsume(e,t,n,a=0n,i=0n,s,o=3600){return this.vault.prepareRelayedConsume(e,t,n,a,i,s,o)}}class S{constructor(e){this.config=e,this.delegate=new M({useMetaMask:e.useMetaMask})}async connectWallet(){return this.delegate.connectWallet()}isConnected(){return this.delegate.isConnected()}getConnectedAddress(){return this.delegate.getConnectedAddress()}getChainId(){return this.delegate.getChainId()}async processTransfer(e){try{console.log("开始处理转账（向后兼容模式）...");const t=await this.delegate.prepareRelayedPayment(e.to,e.amount,e.tokenAddress,e.seq),n={token:e.tokenAddress||"0x0000000000000000000000000000000000000000",to:e.to,amount:e.amount.toString(),seq:(e.seq||BigInt(Math.floor(Date.now()/1e3))).toString(),payer:this.delegate.getConnectedAddress()||""};return{request:{from:t.from,to:t.to,value:t.value,gas:t.gas,nonce:t.nonce,deadline:t.deadline,data:t.data,signature:t.signature},payParams:n}}catch(e){throw console.error("处理转账失败:",e),new Error(`处理转账失败: ${e.message}`)}}get token(){return this.delegate.token}get directPayment(){return this.delegate.directPayment}get relayedPayment(){return this.delegate.relayedPayment}get vault(){return this.delegate.vault}}export{S as PaymentDelegate};
//# sourceMappingURL=index.esm.js.map
