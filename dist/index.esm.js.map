{"version":3,"file":"index.esm.js","sources":["../src/config/contract.ts","../src/core/wallet-service.ts","../src/core/blockchain.ts","../src/core/operations/token.ts","../src/core/operations/direct-payment.ts","../src/core/signing.ts","../src/core/operations/relayed-payment.ts","../src/core/operations/vault.ts","../src/core/merchant-config-manager.ts","../src/core/transaction.ts","../src/core/index.ts","../src/types/index.ts","../src/core/relayer-service.ts"],"sourcesContent":["import { \n  keccak256,\n} from 'viem';\n\nexport const VaultContractAddress = ''\n\nexport const forwarderAddress = '';\nexport const paymentContractAddress = '';\nexport const UNIFIED_VAULT_ABI = [{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trustedForwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeRuleProvider\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"merchantId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"originalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"discountedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"spendAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"merchantAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pointsUsed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voucherUsed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pointsReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voucherReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feePaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"merchantRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seq\",\"type\":\"uint256\"}],\"name\":\"Consumed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"merchantId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"merchantId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"MerchantOperatorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merchantId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PointsGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"merchantId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"discountRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voucherAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pointAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voucherExpirePeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"PromoTierSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"TokenWhitelistChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"fromMerchantId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"toMerchantId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferMerchantBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voucherId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merchantId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expireAt\",\"type\":\"uint256\"}],\"name\":\"VoucherGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"merchantId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merchantId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"voucherId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pointToUse\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seq\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"consume\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merchantId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRuleProvider\",\"outputs\":[{\"internalType\":\"contract IFeeRuleProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merchantId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getMyBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merchantId\",\"type\":\"bytes32\"}],\"name\":\"getMyPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyVouchers\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merchantId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"getPromoTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"voucherAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pointAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"voucherExpirePeriod\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"merchantId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getUserBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"merchantId\",\"type\":\"bytes32\"}],\"name\":\"getUserPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vid\",\"type\":\"uint256\"}],\"name\":\"getVoucher\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"merchantId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"used\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"expireAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"merchantOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTierIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextVoucherId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merchantId\",\"type\":\"bytes32\"}],\"name\":\"removeMerchantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merchantId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"setMerchantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merchantId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"voucherAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pointAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"voucherExpirePeriod\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setPromoTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setTokenWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"fromMerchantId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"toMerchantId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferMerchantBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usedSeq\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userMerchantBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"userMerchantPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userVouchers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vouchers\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"merchantId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"used\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"expireAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merchantId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}];\n\n\n\n// PaymentContract ABI (只包含 pay 方法)\nexport const PAYMENT_CONTRACT_ABI =[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feePpm\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_initTrustedForwarder\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"initialTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"initialMinUnits\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeAddress\",\"type\":\"address\"}],\"name\":\"FeeAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFeePpm\",\"type\":\"uint256\"}],\"name\":\"FeePpmForToUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFeePpm\",\"type\":\"uint256\"}],\"name\":\"FeePpmUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minUnit\",\"type\":\"uint256\"}],\"name\":\"MinUnitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seq\",\"type\":\"uint256\"}],\"name\":\"Paid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isWhitelisted\",\"type\":\"bool\"}],\"name\":\"TokenWhitelistUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newForwarder\",\"type\":\"address\"}],\"name\":\"TrustedForwarderUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePpm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feePpmPerTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isTokenWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minUnitPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seq\",\"type\":\"uint256\"}],\"name\":\"pay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePpm\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newFeePpm\",\"type\":\"uint256\"}],\"name\":\"setFeePpmForTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minUnit\",\"type\":\"uint256\"}],\"name\":\"setMinUnit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"setTokenWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usedSeq\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\n\nexport const ERC2771_FORWARDER_ABI = [{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"deadline\",\"type\":\"uint48\"}],\"name\":\"ERC2771ForwarderExpiredRequest\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"ERC2771ForwarderInvalidSigner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestedValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"msgValue\",\"type\":\"uint256\"}],\"name\":\"ERC2771ForwarderMismatchedValue\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"ERC2771UntrustfulTarget\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"ExecutedForwardRequest\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"deadline\",\"type\":\"uint48\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct ERC2771Forwarder.ForwardRequestData\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"deadline\",\"type\":\"uint48\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct ERC2771Forwarder.ForwardRequestData[]\",\"name\":\"requests\",\"type\":\"tuple[]\"},{\"internalType\":\"address payable\",\"name\":\"refundReceiver\",\"type\":\"address\"}],\"name\":\"executeBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"deadline\",\"type\":\"uint48\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct ERC2771Forwarder.ForwardRequestData\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\n\nexport const EIP712_DOMAIN_HASH = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\" as `0x${string}`);\nexport const FORWARD_REQUEST_TYPEHASH = keccak256(\n  \"ForwardRequest(address from,address to,uint256 value,uint256 gas,uint256 nonce,uint48 deadline,bytes data)\" as `0x${string}`\n);\n\nexport const EIP712_DOMAIN_TYPE = [\n  { name: 'name', type: 'string' },\n  { name: 'version', type: 'string' },\n  { name: 'chainId', type: 'uint256' },\n  { name: 'verifyingContract', type: 'address' }\n]\n\nexport const FORWARD_REQUEST_TYPES = {\n  ForwardRequest: [\n    { name: 'from', type: 'address' },\n    { name: 'to', type: 'address' },\n    { name: 'value', type: 'uint256' },\n    { name: 'gas', type: 'uint256' },\n    { name: 'nonce', type: 'uint256' },\n    { name: 'deadline', type: 'uint48' },\n    { name: 'data', type: 'bytes' }\n  ]\n}\n\n\nexport const ERC20_ABI = [\n  {\n    \"inputs\": [\n      {\"type\": \"address\", \"name\": \"to\"},\n      {\"type\": \"uint256\", \"name\": \"amount\"}\n    ],\n    \"name\": \"transfer\",\n    \"outputs\": [{\"type\": \"bool\"}],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\"type\": \"address\", \"name\": \"owner\"},\n      {\"type\": \"address\", \"name\": \"spender\"}\n    ],\n    \"name\": \"allowance\",\n    \"outputs\": [{\"type\": \"uint256\"}],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\"type\": \"address\", \"name\": \"spender\"},\n      {\"type\": \"uint256\", \"name\": \"amount\"}\n    ],\n    \"name\": \"approve\",\n    \"outputs\": [{\"type\": \"bool\"}],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [{\"type\": \"address\", \"name\": \"account\"}],\n    \"name\": \"balanceOf\",\n    \"outputs\": [{\"type\": \"uint256\"}],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  }\n] as const; ","import { \n  createWalletClient, \n  createPublicClient, \n  http,\n  custom,\n  type WalletClient,\n  type PublicClient,\n  type Account,\n  type Address\n} from 'viem';\nimport { DelegateConfig } from '../types';\n\n// 检查是否在浏览器环境中\nconst isBrowser = typeof window !== 'undefined';\n\n// 安全地访问window.ethereum\nconst getEthereum = () => {\n  if (!isBrowser) {\n    return null;\n  }\n  return window.ethereum;\n};\n\n// 检查是否有任何可用的钱包提供者\nconst getAnyWalletProvider = () => {\n  if (!isBrowser) {\n    return null;\n  }\n  \n  // 检查各种钱包提供者\n  return window.ethereum || \n         window.walletLinkExtension || \n         window.walletConnect || \n         window.coinbaseWalletExtension ||\n         null;\n};\n\nexport class WalletService {\n  protected wallet?: WalletClient;\n  protected publicClient?: PublicClient;\n  protected config: DelegateConfig;\n  protected account?: Account;\n  protected chainId?: number;\n\n  constructor(config: DelegateConfig) {\n    this.config = config;\n  }\n\n  /**\n   * 初始化客户端\n   * @returns 是否初始化成功\n   */\n  protected async initializeClients(timeoutMs: number = 15000): Promise<boolean> {\n    console.log('开始初始化钱包客户端...');\n    \n    // 检查是否在浏览器环境\n    if (!isBrowser) {\n      throw new Error('钱包只能在浏览器环境中使用');\n    }\n\n    // 尝试获取任何可用的钱包提供者\n    const provider = getAnyWalletProvider();\n    if (!provider) {\n      console.error('未检测到可用的钱包');\n      throw new Error('未检测到可用的钱包。请安装MetaMask、Coinbase Wallet或其他以太坊钱包。');\n    }\n  \n    console.log('检测到钱包提供者，创建钱包客户端...');\n    \n    try {\n      // 添加超时处理\n      const withTimeout = <T>(promise: Promise<T>, ms: number, errorMessage: string): Promise<T> => {\n        return Promise.race([\n          promise,\n          new Promise<T>((_, reject) => \n            setTimeout(() => reject(new Error(errorMessage)), ms)\n          )\n        ]);\n      };\n\n      // 获取当前链ID\n      const chainIdHex = await withTimeout(\n        provider.request({ method: 'eth_chainId' }),\n        timeoutMs,\n        '获取链ID超时，请检查钱包连接状态'\n      );\n      this.chainId = parseInt(chainIdHex as string, 16);\n      console.log('从钱包获取到链 ID:', this.chainId);\n      \n      // 使用检测到的钱包 - 直接使用钱包提供者，不指定 RPC URL\n      this.wallet = createWalletClient({\n        transport: custom(provider)\n      });\n      \n      console.log('钱包客户端创建完成');\n      \n      // 创建公共客户端 - 直接使用钱包提供者的 RPC，不指定自定义 RPC URL\n      // 这样可以确保使用与钱包相同的网络\n      this.publicClient = createPublicClient({\n        transport: custom(provider)\n      });\n      \n      console.log('公共客户端创建完成');\n      return true;\n    } catch (error: any) {\n      console.error('初始化客户端失败:', error);\n      console.error('错误详情:', {\n        message: error.message,\n        code: error.code,\n        data: error.data\n      });\n      throw new Error(`初始化客户端失败: ${error.message}`);\n    }\n  }\n\n  /**\n   * 连接钱包\n   * @returns 连接的地址\n   */\n  async connectWallet(timeoutMs: number = 15000): Promise<string> {\n    // 确保客户端已初始化\n    if (!this.wallet || !this.publicClient) {\n      await this.initializeClients(timeoutMs);\n    }\n\n    try {\n      console.log('请求连接钱包...');\n      \n      // 添加超时处理\n      const withTimeout = <T>(promise: Promise<T>, ms: number, errorMessage: string): Promise<T> => {\n        return Promise.race([\n          promise,\n          new Promise<T>((_, reject) => \n            setTimeout(() => reject(new Error(errorMessage)), ms)\n          )\n        ]);\n      };\n      \n      const [address] = await withTimeout(\n        this.wallet!.requestAddresses(),\n        timeoutMs,\n        '请求钱包地址超时，用户可能未响应钱包连接请求'\n      );\n      console.log('获取到钱包地址:', address);\n      \n      // 创建账户对象\n      this.account = {\n        address,\n        type: 'json-rpc'\n      };\n      \n      return address;\n    } catch (error: any) {\n      console.error('连接钱包失败:', error);\n      throw new Error(`连接钱包失败: ${error.message}`);\n    }\n  }\n\n  /**\n   * 检查是否已连接钱包\n   * @returns 是否已连接\n   */\n  isConnected(): boolean {\n    return !!this.account;\n  }\n\n  /**\n   * 获取当前连接的地址\n   * @returns 连接的地址\n   */\n  getConnectedAddress(): string | undefined {\n    return this.account?.address;\n  }\n\n  /**\n   * 获取当前连接的链ID\n   * @returns 链ID\n   */\n  getChainId(): number | undefined {\n    return this.chainId;\n  }\n\n  /**\n   * 获取钱包客户端\n   * @returns 钱包客户端\n   */\n  getWallet(): WalletClient | undefined {\n    return this.wallet;\n  }\n\n  /**\n   * 获取公共客户端\n   * @returns 公共客户端\n   */\n  getPublicClient(): PublicClient | undefined {\n    return this.publicClient;\n  }\n\n  /**\n   * 获取当前账户\n   * @returns 账户\n   */\n  getAccount(): Account | undefined {\n    return this.account;\n  }\n\n  /**\n   * 确保钱包已连接，如果未连接则尝试连接\n   * @returns 是否已连接\n   */\n  async ensureConnected(timeoutMs: number = 15000): Promise<boolean> {\n    if (!this.isConnected()) {\n      await this.connectWallet(timeoutMs);\n    }\n    return this.isConnected();\n  }\n\n  /**\n   * 确保客户端已初始化，如果未初始化则尝试初始化\n   * @returns 是否已初始化\n   */\n  async ensureInitialized(timeoutMs: number = 15000): Promise<boolean> {\n    if (!this.publicClient || !this.wallet) {\n      await this.initializeClients(timeoutMs);\n    }\n    return !!this.publicClient && !!this.wallet;\n  }\n} ","import { \n  type Hash,\n  type Address,\n  createPublicClient,\n  http\n} from 'viem';\nimport { ERC20_ABI, forwarderAddress, paymentContractAddress, VaultContractAddress, UNIFIED_VAULT_ABI, ERC2771_FORWARDER_ABI } from '../config/contract';\nimport { WalletService } from './wallet-service';\nimport { DelegateConfig } from '../types';\n\nexport interface BlockchainConfig {\n  rpcUrl?: string; // 添加自定义 RPC URL 配置\n  forwarderAddress?: string;\n  paymentContractAddress?: string;\n  vaultContractAddress?: string;\n}\n\nexport class BlockchainService extends WalletService {\n  private customRpcClient: any; // 自定义 RPC 客户端\n\n  constructor(config: BlockchainConfig = { }) {\n    console.log('[BlockchainService] 构造收到的config:', config);\n    // 转换为 DelegateConfig - 不强制指定 RPC URL\n    const delegateConfig: DelegateConfig = {\n      rpcUrl: config.rpcUrl,\n      paymentContractAddress: config.paymentContractAddress || paymentContractAddress,\n      vaultContractAddress: config.vaultContractAddress || VaultContractAddress,\n      forwarderAddress: config.forwarderAddress || forwarderAddress,\n    };\n    console.log('[BlockchainService] delegateConfig:', delegateConfig);\n    super(delegateConfig);\n    this.customRpcClient = null;\n  }\n\n  // 获取钱包客户端\n  getWalletClient() {\n    return this.wallet;\n  }\n\n  // 获取账户\n  getAccount() {\n    return this.account;\n  }\n\n  // 检查钱包状态\n  async ensureWalletConnected(timeoutMs: number = 15000): Promise<void> {\n    await this.ensureConnected(timeoutMs);\n  }\n\n  // 检查并确保代币授权\n  async ensureTokenAllowance(tokenAddress: string, spender: string, amount: bigint): Promise<boolean> {\n    await this.ensureWalletConnected();\n\n    // 查询当前allowance - 使用自定义 RPC 客户端\n    const currentAllowance: bigint = await this.readContract<bigint>(\n      tokenAddress,\n      ERC20_ABI,\n      'allowance',\n      [this.account!.address as `0x${string}`, spender as `0x${string}`]\n    );\n\n    console.log(`当前allowance: ${currentAllowance} 需要: ${amount}`);\n    if (currentAllowance >= amount) {\n      console.log('授权额度充足');\n      return true; // 不需要approve\n    }\n\n    // 额度不足，自动请求用户 approve\n    console.log('授权额度不足，发起approve...');\n\n    const approveHash = await this.writeContract(\n      tokenAddress,\n      ERC20_ABI,\n      'approve',\n      [spender as `0x${string}`, amount]\n    );\n\n    console.log('approve成功');\n    return true;\n  }\n\n  // 获取Nonce\n  async getNonce(address: string, options?: { timeout?: number }): Promise<bigint> {\n    try {\n      const nonce = await this.readContract<bigint>(\n        this.getForwarderAddress(),\n        ERC2771_FORWARDER_ABI,\n        'nonces',\n        [address as `0x${string}`],\n        options\n      );\n      \n      return nonce;\n    } catch (error) {\n      // 这里不吞掉错误，直接抛出\n      throw error;\n    }\n  }\n  \n  // 发送交易\n  async sendTransaction(to: string, value: bigint, data?: `0x${string}`): Promise<Hash> {\n    await this.ensureWalletConnected();\n    \n    console.log('发送交易...');\n    console.log('- 发送方:', this.account!.address);\n    console.log('- 接收方:', to);\n    console.log('- 金额:', value.toString());\n    \n    // 构建交易对象\n    const transaction = {\n      account: this.account!,\n      chain: this.chainId ? { id: this.chainId } as any : undefined,\n      to: to as `0x${string}`,\n      value,\n      data\n    };\n    \n    try {\n      // 发送交易\n      const hash = await this.wallet!.sendTransaction(transaction);\n      console.log('交易已发送，等待确认，哈希:', hash);\n      \n      // 等待交易确认\n      const receipt = await this.publicClient!.waitForTransactionReceipt({ hash });\n      \n      if (receipt.status !== 'success') {\n        throw new Error('交易执行失败');\n      }\n      \n      console.log('交易已确认');\n      return hash;\n    } catch (error: any) {\n      console.error('发送交易失败:', error);\n      throw new Error(`发送交易失败: ${error.message}`);\n    }\n  }\n  \n  // 调用合约写方法\n  async writeContract(\n    address: string, \n    abi: any, \n    functionName: string, \n    args: any[],\n    value: bigint = 0n\n  ): Promise<Hash> {\n    await this.ensureWalletConnected();\n    \n    console.log('调用合约写方法...');\n    console.log('- 合约地址:', address);\n    console.log('- 函数名:', functionName);\n    console.log('- 参数:', args);\n    \n    try {\n      // 调用合约\n      const hash = await this.wallet!.writeContract({\n        account: this.account!,\n        chain: this.chainId ? { id: this.chainId } as any : undefined,\n        address: address as `0x${string}`,\n        abi,\n        functionName,\n        args,\n        value\n      });\n      \n      console.log('合约调用已发送，等待确认，哈希:', hash);\n      \n      // 等待交易确认\n      const receipt = await this.publicClient!.waitForTransactionReceipt({ hash });\n      \n      if (receipt.status !== 'success') {\n        throw new Error('合约调用执行失败');\n      }\n      \n      console.log('合约调用已确认');\n      return hash;\n    } catch (error: any) {\n      console.error('调用合约写方法失败:', error);\n      throw new Error(`调用合约写方法失败: ${error.message}`);\n    }\n  }\n  \n  // 调用合约读方法 - 使用自定义 RPC 客户端而不是钱包\n  async readContract<T = any>(\n    address: string,\n    abi: any,\n    functionName: string,\n    args: any[] = [],\n    options?: { timeout?: number }\n  ): Promise<T> {\n    // 不需要确保钱包已初始化，直接使用自定义 RPC 客户端\n    const timeout = options?.timeout ?? 10000; // 默认10秒\n    \n    console.log('调用合约读方法...');\n    console.log('- 合约地址:', address);\n    console.log('- 函数名:', functionName);\n    console.log('- 参数:', args);\n    \n    try {\n      // 带超时的合约调用 - 获取或创建自定义 RPC 客户端\n      const result = await Promise.race([\n        this.getCustomRpcClient().readContract({\n          address: address as `0x${string}`,\n          abi,\n          functionName,\n          args\n        }) as Promise<T>,\n        new Promise<never>((_, reject) => \n          setTimeout(() => reject(new Error('TimeoutError: readContract timeout')), timeout)\n        )\n      ]);\n      \n      console.log('合约读取结果:', result);\n      return result;\n    } catch (error: any) {\n      console.error('调用合约读方法失败:', error);\n      throw new Error(`调用合约读方法失败: ${error.message}`);\n    }\n  }\n\n  getPaymentContractAddress(): string {\n    const addr = this.config?.paymentContractAddress || paymentContractAddress;\n    console.log('[BlockchainService] getPaymentContractAddress 返回:', addr);\n    return addr;\n  }\n\n  getVaultContractAddress(): string {\n    const addr = this.config?.vaultContractAddress || VaultContractAddress;\n    console.log('[BlockchainService] getVaultContractAddress 返回:', addr);\n    return addr;\n  }\n\n  getForwarderAddress(): string {\n    const addr = this.config?.forwarderAddress || forwarderAddress;\n    console.log('[BlockchainService] getForwarderAddress 返回:', addr);\n    return addr;\n  }\n\n  /**\n   * 获取或创建自定义 RPC 客户端\n   * @returns 自定义 RPC 客户端\n   */\n  private getCustomRpcClient() {\n    // 如果已经创建，直接返回\n    if (this.customRpcClient) {\n      return this.customRpcClient;\n    }\n    \n    // 尝试使用配置的 RPC URL\n    const rpcUrl = this.config.rpcUrl;\n    \n    if (rpcUrl) {\n      console.log('使用配置的 RPC URL:', rpcUrl);\n      this.customRpcClient = createPublicClient({\n        transport: http(rpcUrl)\n      });\n      return this.customRpcClient;\n    }\n    \n    // 如果已经有 publicClient (通过钱包连接)，优先使用它\n    if (this.publicClient) {\n      console.log('使用钱包提供的 RPC 连接');\n      this.customRpcClient = this.publicClient;\n      return this.customRpcClient;\n    }\n    \n    // 如果没有配置RPC URL且没有钱包连接，抛出错误\n    console.error('未提供RPC URL且未连接钱包');\n    throw new Error('未提供RPC URL且未连接钱包，请配置RPC URL或连接MetaMask');\n  }\n\n  /**\n   * 获取可用于 estimateContractGas 的客户端\n   */\n  public getEstimateClient() {\n    // 优先用 publicClient\n    if (this.publicClient) return this.publicClient;\n    return this.getCustomRpcClient();\n  }\n} ","import { type Hash } from 'viem';\nimport { ERC20_ABI } from '../../config/contract';\nimport { BlockchainService } from '../blockchain';\n\n/**\n * Token操作类\n * 负责处理ERC20代币的授权、检查等操作\n */\nexport class TokenOperations {\n  private blockchainService: BlockchainService;\n\n  constructor(blockchainService: BlockchainService) {\n    this.blockchainService = blockchainService;\n  }\n\n  /**\n   * 授权代币\n   * @param tokenAddress 代币地址\n   * @param spender 被授权者地址\n   * @param amount 授权金额\n   * @returns 交易哈希\n   */\n  async approveToken(tokenAddress: string, spender: string, amount: bigint): Promise<Hash> {\n    await this.blockchainService.ensureWalletConnected();\n    const wallet = this.blockchainService.getWalletClient();\n    const account = this.blockchainService.getAccount();\n    const chainId = this.blockchainService.getChainId();\n\n    if (!wallet || !account || chainId === undefined) {\n      throw new Error('钱包未连接或初始化失败');\n    }\n\n    console.log(`开始授权代币 ${tokenAddress} 给 ${spender}，金额: ${amount.toString()}`);\n\n    const hash = await wallet.writeContract({\n      account,\n      chain: { id: chainId } as any,\n      address: tokenAddress as `0x${string}`,\n      abi: ERC20_ABI,\n      functionName: 'approve',\n      args: [spender as `0x${string}`, amount]\n    });\n\n    console.log('授权交易已发送，哈希:', hash);\n    return hash;\n  }\n\n  /**\n   * 检查授权额度\n   * @param tokenAddress 代币地址\n   * @param owner 代币持有者\n   * @param spender 被授权者\n   * @returns 当前授权额度\n   */\n  async checkAllowance(tokenAddress: string, owner: string, spender: string): Promise<bigint> {\n    await this.blockchainService.ensureWalletConnected();\n    const publicClient = this.blockchainService.getPublicClient();\n\n    if (!publicClient) {\n      throw new Error('公共客户端未初始化');\n    }\n\n    const allowance = await publicClient.readContract({\n      address: tokenAddress as `0x${string}`,\n      abi: ERC20_ABI,\n      functionName: 'allowance',\n      args: [owner as `0x${string}`, spender as `0x${string}`]\n    }) as bigint;\n\n    console.log(`当前授权额度: ${allowance.toString()}`);\n    return allowance;\n  }\n\n  /**\n   * 确保代币授权额度充足\n   * 如果授权不足会自动发起授权交易\n   * @param tokenAddress 代币地址\n   * @param spender 被授权者\n   * @param amount 需要的授权额度\n   * @returns 是否成功确保授权\n   */\n  async ensureTokenAllowance(tokenAddress: string, spender: string, amount: bigint): Promise<boolean> {\n    const owner = this.blockchainService.getConnectedAddress();\n    if (!owner) {\n      throw new Error('钱包未连接');\n    }\n\n    // 检查当前授权额度\n    const currentAllowance = await this.checkAllowance(tokenAddress, owner, spender);\n    \n    console.log(`检查授权额度: 当前 ${currentAllowance.toString()}, 需要 ${amount.toString()}`);\n    \n    if (currentAllowance >= amount) {\n      console.log('授权额度充足');\n      return true;\n    }\n\n    console.log('授权额度不足，发起授权交易...');\n    \n    // 发起授权交易\n    const approveHash = await this.approveToken(tokenAddress, spender, amount);\n    \n    // 等待交易确认\n    const publicClient = this.blockchainService.getPublicClient();\n    if (publicClient) {\n      console.log('等待授权交易确认...');\n      const receipt = await publicClient.waitForTransactionReceipt({ hash: approveHash });\n      if (receipt.status !== 'success') {\n        throw new Error('授权交易失败');\n      }\n      console.log('授权交易确认成功');\n    }\n\n    return true;\n  }\n\n  /**\n   * 获取代币余额\n   * @param tokenAddress 代币地址\n   * @param owner 持有者地址，如不提供则使用当前连接的地址\n   * @returns 代币余额\n   */\n  async getTokenBalance(tokenAddress: string, owner?: string): Promise<bigint> {\n    await this.blockchainService.ensureWalletConnected();\n    const publicClient = this.blockchainService.getPublicClient();\n\n    if (!publicClient) {\n      throw new Error('公共客户端未初始化');\n    }\n\n    const targetOwner = owner || this.blockchainService.getConnectedAddress();\n    if (!targetOwner) {\n      throw new Error('未指定查询地址且钱包未连接');\n    }\n\n    const balance = await publicClient.readContract({\n      address: tokenAddress as `0x${string}`,\n      abi: ERC20_ABI,\n      functionName: 'balanceOf',\n      args: [targetOwner as `0x${string}`]\n    }) as bigint;\n\n    console.log(`代币 ${tokenAddress} 余额: ${balance.toString()}`);\n    return balance;\n  }\n} ","import { type Hash, encodeFunctionData } from 'viem';\nimport { PAYMENT_CONTRACT_ABI } from '../../config/contract';\nimport { BlockchainService } from '../blockchain';\nimport { TokenOperations } from './token';\n\n/**\n * 直接支付类\n * 负责处理用户付gas的直接支付操作\n */\nexport class DirectPayment {\n  private blockchainService: BlockchainService;\n  private tokenOperations: TokenOperations;\n\n  constructor(blockchainService: BlockchainService) {\n    this.blockchainService = blockchainService;\n    this.tokenOperations = new TokenOperations(blockchainService);\n  }\n\n  /**\n   * 用户直接支付（自己付gas）\n   * @param to 接收方地址\n   * @param amount 支付金额\n   * @param tokenAddress 代币地址，如不提供则为原生代币(ETH)\n   * @param seq 序列号，默认为当前时间戳\n   * @returns 交易哈希\n   */\n  async pay(\n    to: string,\n    amount: bigint,\n    tokenAddress?: string,\n    seq: bigint = BigInt(Math.floor(Date.now() / 1000))\n  ): Promise<Hash> {\n    await this.blockchainService.ensureWalletConnected();\n    const wallet = this.blockchainService.getWalletClient();\n    const account = this.blockchainService.getAccount();\n    const chainId = this.blockchainService.getChainId();\n\n    if (!wallet || !account || chainId === undefined) {\n      throw new Error('钱包未连接或初始化失败');\n    }\n\n    console.log('开始直接支付:');\n    console.log('- 接收方:', to);\n    console.log('- 金额:', amount.toString());\n    console.log('- 代币地址:', tokenAddress || 'ETH');\n    console.log('- 序列号:', seq.toString());\n    console.log('- paymentContractAddress:', this.blockchainService.getPaymentContractAddress());\n\n    // 如果是代币支付，确保有足够的授权\n    if (tokenAddress) {\n      await this.tokenOperations.ensureTokenAllowance(\n        tokenAddress,\n        this.blockchainService.getPaymentContractAddress(),\n        amount\n      );\n    } \n    \n\n    // 执行支付交易\n    const hash = await wallet.writeContract({\n      account,\n      chain: { id: chainId } as any,\n      address: this.blockchainService.getPaymentContractAddress() as `0x${string}`,\n      abi: PAYMENT_CONTRACT_ABI,\n      functionName: 'pay',\n      args: [\n        (tokenAddress || '0x0000000000000000000000000000000000000000') as `0x${string}`,\n        to as `0x${string}`,\n        amount,\n        seq\n      ],\n      value: tokenAddress ? 0n : amount // 如果是原生代币，设置value\n    });\n\n    console.log('支付交易已发送，哈希:', hash);\n    return hash;\n  }\n\n  /**\n   * 编码支付函数调用数据\n   * @param token 代币地址\n   * @param to 接收方地址\n   * @param amount 金额\n   * @param seq 序列号\n   * @returns 编码后的调用数据\n   */\n  encodePayCallData(\n    token: string,\n    to: string,\n    amount: bigint,\n    seq: bigint = 0n\n  ): `0x${string}` {\n    const payData = encodeFunctionData({\n      abi: PAYMENT_CONTRACT_ABI,\n      functionName: 'pay',\n      args: [\n        token as `0x${string}`,\n        to as `0x${string}`,\n        amount,\n        seq\n      ]\n    }) as `0x${string}`;\n    \n    console.log('编码支付调用参数:');\n    console.log('- token:', token);\n    console.log('- to:', to);\n    console.log('- amount:', amount.toString());\n    console.log('- seq:', seq.toString());\n\n    return payData;\n  }\n} ","import { recoverTypedDataAddress } from 'viem';\nimport { \n  FORWARD_REQUEST_TYPES,\n  EIP712_DOMAIN_TYPE\n} from '../config/contract';\nimport { BlockchainService } from './blockchain';\n\n// 检查是否在浏览器环境中\nconst isBrowser = typeof window !== 'undefined';\n\nexport interface ForwardRequestData {\n  from: string;\n  to: string;\n  value: string;\n  gas: string;\n  nonce: string;\n  deadline: string;\n  data: string;\n}\n\n/**\n * 签名服务类\n * 负责处理EIP-712签名和验证\n */\nexport class SigningService {\n  private blockchainService: BlockchainService;\n\n  constructor(blockchainService: BlockchainService) {\n    this.blockchainService = blockchainService;\n  }\n\n  /**\n   * 验证EIP-712签名\n   */\n  async verifyTypedDataSignature({\n    chainId,\n    message,\n    signature,\n    expectedSigner\n  }: {\n    chainId: number,\n    message: any\n    signature: string\n    expectedSigner: string\n  }) {\n    const domain = {\n      name: 'MetaTxForwarder',\n      version: '1',\n      chainId: chainId,\n      verifyingContract: this.blockchainService.getForwarderAddress() as `0x${string}`\n    } as const;\n    \n    const signer = await recoverTypedDataAddress({\n      domain,\n      types: FORWARD_REQUEST_TYPES,\n      primaryType: 'ForwardRequest',\n      message,\n      signature: signature as `0x${string}`\n    })\n    \n    const valid = signer.toLowerCase() === expectedSigner.toLowerCase()\n    return { valid, signer }\n  }\n\n  /**\n   * 生成 EIP-712 签名\n   */\n  async signTypedData(\n    request: ForwardRequestData,\n    chainId: number,\n    nonce: bigint\n  ): Promise<string> {\n    console.log('开始签名过程，参数:');\n    console.log('- 账户地址:', request.from);\n    console.log('- 链 ID:', chainId);\n    console.log('- Nonce:', nonce.toString());\n\n    const domain = {\n      name: 'MetaTxForwarder',\n      version: '1',\n      chainId: chainId,\n      verifyingContract: this.blockchainService.getForwarderAddress() as `0x${string}`\n    } as const;\n    \n    // 确保所有值都是字符串形式，避免 BigInt 序列化问题\n    const safeRequest = {\n      from: request.from,\n      to: request.to,\n      value: request.value.toString(),\n      gas: request.gas.toString(),\n      nonce: request.nonce.toString(),\n      deadline: request.deadline.toString(),\n      data: request.data\n    };\n    \n    try {\n      // 获取钱包客户端\n      const wallet = this.blockchainService.getWalletClient();\n      const account = this.blockchainService.getAccount();\n      \n      if (!wallet || !account) {\n        throw new Error('钱包未连接或初始化失败');\n      }\n      \n      // 尝试直接使用 viem 的钱包客户端进行签名\n      if (wallet.signTypedData) {\n        console.log('使用 viem 钱包客户端签名...');\n        try {\n          const signature = await wallet.signTypedData({\n            account,\n            domain,\n            types: { ...FORWARD_REQUEST_TYPES },\n            primaryType: 'ForwardRequest',\n            message: safeRequest\n          });\n          console.log('viem 签名成功:', signature);\n          return signature as string;\n        } catch (viemError: any) {\n          console.warn('viem 签名失败，回退到原生方法:', viemError.message);\n        }\n      }\n      \n      // 回退到使用浏览器的原生签名方法\n      if (!isBrowser || !window.ethereum) {\n        throw new Error('浏览器环境不可用或未安装钱包');\n      }\n      \n      console.log('使用浏览器原生签名方法...');\n      \n      // 为钱包构建签名数据\n      const typedDataForWallet = {\n        domain: { ...domain, chainId: domain.chainId.toString() },\n        message: safeRequest,\n        primaryType: 'ForwardRequest',\n        types: {\n          EIP712Domain: EIP712_DOMAIN_TYPE,\n          ...FORWARD_REQUEST_TYPES\n        },\n      };\n      \n      let signature: string;\n      \n      // 尝试 eth_signTypedData_v4，如果不支持则回退到其他方法\n      try {\n        signature = await window.ethereum.request({\n          method: 'eth_signTypedData_v4',\n          params: [\n            request.from,\n            JSON.stringify(typedDataForWallet)\n          ]\n        });\n      } catch (v4Error: any) {\n        console.warn('eth_signTypedData_v4 失败，尝试 eth_signTypedData_v3');\n        signature = await window.ethereum.request({\n          method: 'eth_signTypedData_v3',\n          params: [\n            request.from,\n            JSON.stringify(typedDataForWallet)\n          ]\n        });\n      }\n      \n      // 验证签名\n      const { valid, signer } = await this.verifyTypedDataSignature({\n        chainId,\n        message: safeRequest,\n        signature: signature,\n        expectedSigner: request.from\n      });\n      \n      console.log('签名验证：', valid, signer);\n      \n      if (!valid) {\n        throw new Error('签名验证失败');\n      }\n      \n      console.log('签名成功:', signature);\n      return signature;\n    } catch (error: any) {\n      console.error('签名过程中出错:', error);\n      throw new Error(`签名失败: ${error.message}`);\n    }\n  }\n} ","import { BlockchainService } from '../blockchain';\nimport { TokenOperations } from './token';\nimport { DirectPayment } from './direct-payment';\nimport { SigningService } from '../signing';\nimport { PAYMENT_CONTRACT_ABI } from '../../config/contract';\n\n/**\n * 统一的中继请求数据格式\n */\nexport interface RelayedRequestData {\n  from: string;\n  to: string;\n  value: string;\n  gas: string;\n  nonce: string;\n  deadline: string;\n  data: string;\n  signature?: string;\n}\n\n/**\n * 中继支付类\n * 负责处理代付gas的支付操作，返回统一格式的签名数据\n */\nexport class RelayedPayment {\n  private blockchainService: BlockchainService;\n  private tokenOperations: TokenOperations;\n  private directPayment: DirectPayment;\n  private signingService: SigningService;\n\n  constructor(blockchainService: BlockchainService) {\n    this.blockchainService = blockchainService;\n    this.tokenOperations = new TokenOperations(blockchainService);\n    this.directPayment = new DirectPayment(blockchainService);\n    this.signingService = new SigningService(blockchainService);\n  }\n\n  /**\n   * 准备代付gas的支付请求（仅签名，不发送）\n   * @param to 接收方地址\n   * @param amount 支付金额\n   * @param seq 序列号，默认为当前时间戳\n   * @param tokenAddress 代币地址，如不提供则为原生代币\n   * @param deadline 过期时间戳（秒，bigint，必须是未来的绝对时间戳）\n   * @returns 包含签名的中继请求数据\n   */\n  async preparePayment(\n    to: string,\n    amount: bigint,\n    seq: bigint,\n    tokenAddress: string,\n    deadline: bigint\n  ): Promise<RelayedRequestData> {\n    await this.blockchainService.ensureWalletConnected();\n    const account = this.blockchainService.getAccount();\n    const chainId = this.blockchainService.getChainId();\n\n    if (!account || chainId === undefined) {\n      throw new Error('钱包未连接或初始化失败');\n    }\n\n    console.log('准备代付gas支付请求:');\n    console.log('- 接收方:', to);\n    console.log('- 金额:', amount.toString());\n    console.log('- 序列号:', seq.toString());\n    console.log('- 代币地址:', tokenAddress || 'ETH');\n    console.log('- 过期时间戳:', deadline.toString());\n\n    // 如果是代币支付，确保有足够的授权\n    if (tokenAddress) {\n      await this.tokenOperations.ensureTokenAllowance(\n        tokenAddress,\n        this.blockchainService.getPaymentContractAddress(),\n        amount\n      );\n    }\n\n    // 编码支付函数调用\n    const payCallData = this.directPayment.encodePayCallData(\n      tokenAddress || '0x0000000000000000000000000000000000000000',\n      to,\n      amount,\n      seq\n    );\n\n    // 直接使用传入的绝对时间戳\n    const deadlineValue = deadline;\n    \n    // 获取用户地址的 nonce\n    const userNonce = await this.blockchainService.getNonce(account.address);\n    \n    // 动态估算 gas\n    const gas = await this.blockchainService.getEstimateClient()!.estimateContractGas({\n      address: this.blockchainService.getPaymentContractAddress() as `0x${string}`,\n      abi: PAYMENT_CONTRACT_ABI,\n      functionName: 'pay',\n      args: [\n        (tokenAddress || '0x0000000000000000000000000000000000000000') as `0x${string}`,\n        to as `0x${string}`,\n        amount,\n        seq\n      ],\n      account: account.address\n    });\n\n    // 创建符合统一格式的请求数据\n    const request: RelayedRequestData = {\n      from: account.address,\n      to: this.blockchainService.getPaymentContractAddress(),\n      value: tokenAddress ? '0' : amount.toString(), // 如果是代币支付，value为0\n      gas: gas.toString(), // 动态估算\n      nonce: userNonce.toString(),\n      deadline: deadlineValue.toString(),\n      data: payCallData\n    };\n\n    console.log('构建的请求数据:', request);\n\n    // 尝试生成签名\n    try {\n      const signature = await this.signingService.signTypedData(request, chainId, userNonce);\n      request.signature = signature;\n      console.log('签名成功');\n    } catch (signError: any) {\n      console.error('签名失败:', signError);\n      console.warn('返回未签名的请求数据');\n    }\n\n    return request;\n  }\n} ","import { type Hash, encodeFunctionData, stringToHex, pad } from 'viem';\nimport { UNIFIED_VAULT_ABI, ERC20_ABI } from '../../config/contract';\nimport { BlockchainService } from '../blockchain';\nimport { TokenOperations } from './token';\nimport { SigningService } from '../signing';\nimport { RelayedRequestData } from './relayed-payment';\n\n/**\n * Vault操作类\n * 负责处理UnifiedVault相关的存款、提现、消费操作\n */\nexport class VaultOperations {\n  private blockchainService: BlockchainService;\n  private tokenOperations: TokenOperations;\n  private signingService: SigningService;\n\n  constructor(blockchainService: BlockchainService) {\n    this.blockchainService = blockchainService;\n    this.tokenOperations = new TokenOperations(blockchainService);\n    this.signingService = new SigningService(blockchainService);\n  }\n\n  /**\n   * 将字符串转换为 bytes32 格式\n   */\n  private stringToBytes32(str: string): `0x${string}` {\n    if (str.startsWith('0x') && str.length === 66) {\n      return str as `0x${string}`;\n    }\n    const hex = stringToHex(str);\n    return pad(hex, { size: 32 });\n  }\n\n  /**\n   * 链下校验：检查代币是否在白名单\n   */\n  private async validateTokenWhitelist(tokenAddress: string): Promise<void> {\n    const publicClient = this.blockchainService.getPublicClient();\n    if (!publicClient) {\n      throw new Error('公共客户端未初始化');\n    }\n\n    const isWhitelisted = await this.blockchainService.readContract(this.blockchainService.getVaultContractAddress(), UNIFIED_VAULT_ABI, 'tokenWhitelist', [tokenAddress as `0x${string}`]) as boolean;\n\n    if (!isWhitelisted) {\n      throw new Error('Token not whitelisted');\n    }\n  }\n\n  /**\n   * 链下校验：检查金额是否大于0\n   */\n  private validateAmount(amount: bigint): void {\n    if (amount <= 0n) {\n      throw new Error('Amount must be greater than 0');\n    }\n  }\n\n  /**\n   * 链下校验：检查商户是否设置\n   */\n  private async validateMerchantRecipient(merchantId: string): Promise<void> {\n    const publicClient = this.blockchainService.getPublicClient();\n    if (!publicClient) {\n      throw new Error('公共客户端未初始化');\n    }\n\n    const merchantIdBytes32 = this.stringToBytes32(merchantId);\n    const recipient = await this.blockchainService.readContract(this.blockchainService.getVaultContractAddress(), UNIFIED_VAULT_ABI, 'merchantRecipients', [merchantIdBytes32]) as string;\n\n    if (recipient === '0x0000000000000000000000000000000000000000') {\n      throw new Error('Merchant recipient not set');\n    }\n  }\n\n  /**\n   * 链下校验：检查序列号是否已使用\n   */\n  private async validateSeq(seq: bigint): Promise<void> {\n    const publicClient = this.blockchainService.getPublicClient();\n    if (!publicClient) {\n      throw new Error('公共客户端未初始化');\n    }\n\n    const isUsed = await this.blockchainService.readContract(this.blockchainService.getVaultContractAddress(), UNIFIED_VAULT_ABI, 'usedSeq', [seq]) as boolean;\n\n    if (isUsed) {\n      throw new Error('Seq already used');\n    }\n  }\n\n  /**\n   * 向金库存款（用户付gas）\n   * @param merchantId 商户ID\n   * @param tokenAddress 代币地址\n   * @param amount 存款金额\n   * @returns 交易哈希\n   */\n  async deposit(merchantId: string, tokenAddress: string, amount: bigint): Promise<Hash> {\n    await this.blockchainService.ensureWalletConnected();\n    const wallet = this.blockchainService.getWalletClient();\n    const account = this.blockchainService.getAccount();\n    const chainId = this.blockchainService.getChainId();\n\n    if (!wallet || !account || chainId === undefined) {\n      throw new Error('钱包未连接或初始化失败');\n    }\n\n    console.log('开始存款到金库:');\n    console.log('- 商户ID:', merchantId);\n    console.log('- 代币地址:', tokenAddress);\n    console.log('- 存款金额:', amount.toString());\n\n    // 链下校验\n    this.validateAmount(amount);\n    await this.validateTokenWhitelist(tokenAddress);\n\n    // 检查用户钱包余额\n    const balance = await this.tokenOperations.getTokenBalance(tokenAddress, account.address);\n    if (balance < amount) {\n      throw new Error('Insufficient wallet balance');\n    }\n\n    // 确保有足够的授权\n    await this.tokenOperations.ensureTokenAllowance(\n      tokenAddress,\n      this.blockchainService.getVaultContractAddress(),\n      amount\n    );\n\n    const merchantIdBytes32 = this.stringToBytes32(merchantId);\n\n    // 执行deposit交易\n    const hash = await wallet.writeContract({\n      account,\n      chain: { id: chainId } as any,\n      address: this.blockchainService.getVaultContractAddress() as `0x${string}`,\n      abi: UNIFIED_VAULT_ABI,\n      functionName: 'deposit',\n      args: [\n        merchantIdBytes32,\n        tokenAddress as `0x${string}`,\n        amount\n      ]\n    });\n\n    console.log('存款交易已发送，哈希:', hash);\n    return hash;\n  }\n\n  /**\n   * 从金库提现（用户付gas）\n   * @param merchantId 商户ID\n   * @param tokenAddress 代币地址\n   * @param amount 提现金额\n   * @returns 交易哈希\n   */\n  async withdraw(merchantId: string, tokenAddress: string, amount: bigint): Promise<Hash> {\n    await this.blockchainService.ensureWalletConnected();\n    const wallet = this.blockchainService.getWalletClient();\n    const account = this.blockchainService.getAccount();\n    const chainId = this.blockchainService.getChainId();\n\n    if (!wallet || !account || chainId === undefined) {\n      throw new Error('钱包未连接或初始化失败');\n    }\n\n    console.log('开始从金库提现:');\n    console.log('- 商户ID:', merchantId);\n    console.log('- 代币地址:', tokenAddress);\n    console.log('- 提现金额:', amount.toString());\n\n    // 链下校验\n    this.validateAmount(amount);\n\n    // 检查金库余额\n    const vaultBalance = await this.getUserBalance(account.address, merchantId, tokenAddress);\n    if (vaultBalance < amount) {\n      throw new Error('Insufficient vault balance');\n    }\n\n    const merchantIdBytes32 = this.stringToBytes32(merchantId);\n\n    // 执行withdraw交易\n    const hash = await wallet.writeContract({\n      account,\n      chain: { id: chainId } as any,\n      address: this.blockchainService.getVaultContractAddress() as `0x${string}`,\n      abi: UNIFIED_VAULT_ABI,\n      functionName: 'withdraw',\n      args: [\n        merchantIdBytes32,\n        tokenAddress as `0x${string}`,\n        amount\n      ]\n    });\n\n    console.log('提现交易已发送，哈希:', hash);\n    return hash;\n  }\n\n  /**\n   * 用户直接从金库消费（自己付gas）\n   * @param merchantId 商户ID\n   * @param tokenAddress 代币合约地址\n   * @param amount 消费金额（最小单位）\n   * @param voucherId 代金券ID（没有则填0n）\n   * @param pointToUse 使用的积分数量（没有则填0n）\n   * @param seq 消费序列号（建议用当前时间戳，保证唯一性）\n   * @param idx 促销档位编号\n   * @param recipient 商户收款地址\n   * @param userAddress 用户地址（可选，默认当前钱包地址）\n   * @returns 交易哈希\n   */\n  async consumeDirect(\n    merchantId: string,\n    tokenAddress: string,\n    amount: bigint,\n    voucherId: bigint = 0n,\n    pointToUse: bigint = 0n,\n    seq: bigint = BigInt(Math.floor(Date.now() / 1000)),\n    idx: bigint,\n    recipient: string,\n    userAddress: string\n  ): Promise<Hash> {\n    await this.blockchainService.ensureWalletConnected();\n    const wallet = this.blockchainService.getWalletClient();\n    const account = this.blockchainService.getAccount();\n    const chainId = this.blockchainService.getChainId();\n\n    if (!wallet || !account || chainId === undefined) {\n      throw new Error('钱包未连接或初始化失败');\n    }\n\n    // 统一校验\n    await this.validateConsumeParams({\n      merchantId,\n      token: tokenAddress,\n      amount,\n      voucherId,\n      pointToUse,\n      seq,\n      idx,\n      recipient,\n      userAddress: userAddress || account.address\n    });\n\n    const merchantIdBytes32 = this.stringToBytes32(merchantId);\n\n    // 执行consume交易\n    const hash = await wallet.writeContract({\n      account,\n      chain: { id: chainId } as any,\n      address: this.blockchainService.getVaultContractAddress() as `0x${string}`,\n      abi: UNIFIED_VAULT_ABI,\n      functionName: 'consume',\n      args: [\n        merchantIdBytes32,\n        tokenAddress as `0x${string}`,\n        amount,\n        voucherId,\n        pointToUse,\n        seq,\n        idx,\n        recipient\n      ]\n    });\n\n    return hash;\n  }\n\n  /**\n   * 校验代金券\n   */\n  private async validateVoucher(voucherId: bigint, merchantId: string, tokenAddress: string, userAddress: string): Promise<void> {\n    const publicClient = this.blockchainService.getPublicClient();\n    if (!publicClient) {\n      throw new Error('公共客户端未初始化');\n    }\n\n    // 检查用户是否拥有该代金券\n    const myVouchers = await this.getMyVouchers();\n    if (!myVouchers.ids.includes(voucherId)) {\n      throw new Error('Voucher not owned');\n    }\n\n    // 检查代金券详情\n    const voucher = await this.getVoucher(voucherId);\n    if (voucher.used) {\n      throw new Error('Voucher already used');\n    }\n\n    const currentTime = Math.floor(Date.now() / 1000);\n    if (voucher.expireAt <= currentTime) {\n      throw new Error('Voucher expired');\n    }\n\n    const merchantIdBytes32 = this.stringToBytes32(merchantId);\n    if (voucher.merchantId !== merchantIdBytes32) {\n      throw new Error('Voucher merchant mismatch');\n    }\n\n    if (voucher.token.toLowerCase() !== tokenAddress.toLowerCase()) {\n      throw new Error('Voucher token mismatch');\n    }\n  }\n\n  /**\n   * 余额跨商户转移\n   * @param fromMerchantId 源商户ID\n   * @param toMerchantId 目标商户ID\n   * @param tokenAddress 代币地址\n   * @param amount 转移金额\n   * @returns 交易哈希\n   */\n  async transferMerchantBalance(\n    fromMerchantId: string,\n    toMerchantId: string,\n    tokenAddress: string,\n    amount: bigint\n  ): Promise<Hash> {\n    await this.blockchainService.ensureWalletConnected();\n    const wallet = this.blockchainService.getWalletClient();\n    const account = this.blockchainService.getAccount();\n    const chainId = this.blockchainService.getChainId();\n\n    if (!wallet || !account || chainId === undefined) {\n      throw new Error('钱包未连接或初始化失败');\n    }\n\n    console.log('开始余额跨商户转移:');\n    console.log('- 源商户ID:', fromMerchantId);\n    console.log('- 目标商户ID:', toMerchantId);\n    console.log('- 代币地址:', tokenAddress);\n    console.log('- 转移金额:', amount.toString());\n\n    // 链下校验\n    if (fromMerchantId === toMerchantId) {\n      throw new Error('Cannot transfer to same merchant');\n    }\n    await this.validateTokenWhitelist(tokenAddress);\n    this.validateAmount(amount);\n\n    // 检查源商户余额\n    const vaultBalance = await this.getUserBalance(account.address, fromMerchantId, tokenAddress);\n    if (vaultBalance < amount) {\n      throw new Error('Insufficient vault balance');\n    }\n\n    const fromMerchantIdBytes32 = this.stringToBytes32(fromMerchantId);\n    const toMerchantIdBytes32 = this.stringToBytes32(toMerchantId);\n\n    // 执行transferMerchantBalance交易\n    const hash = await wallet.writeContract({\n      account,\n      chain: { id: chainId } as any,\n      address: this.blockchainService.getVaultContractAddress() as `0x${string}`,\n      abi: UNIFIED_VAULT_ABI,\n      functionName: 'transferMerchantBalance',\n      args: [\n        fromMerchantIdBytes32,\n        toMerchantIdBytes32,\n        tokenAddress as `0x${string}`,\n        amount\n      ]\n    });\n\n    console.log('转移交易已发送，哈希:', hash);\n    return hash;\n  }\n\n  /**\n   * 准备代付gas的消费请求（仅签名，不发送）\n   * @param merchantId 商户ID\n   * @param tokenAddress 代币合约地址\n   * @param amount 消费金额（最小单位）\n   * @param voucherId 代金券ID（没有则填0n）\n   * @param pointToUse 使用的积分数量（没有则填0n）\n   * @param seq 消费序列号（建议用当前时间戳，保证唯一性）\n   * @param idx 促销档位编号\n   * @param recipient 商户收款地址\n   * @param deadline 过期时间戳（秒，bigint，必须是未来的绝对时间戳）\n   * @param userAddress 用户地址（可选，默认当前钱包地址）\n   * @returns 包含签名的中继请求数据\n   */\n  async prepareRelayedConsume(\n    merchantId: string,\n    tokenAddress: string,\n    amount: bigint,\n    voucherId: bigint = 0n,\n    pointToUse: bigint = 0n,\n    seq: bigint = BigInt(Math.floor(Date.now() / 1000)),\n    idx: bigint,\n    recipient: string,\n    deadline: bigint,\n    userAddress: string\n  ): Promise<RelayedRequestData> {\n    await this.blockchainService.ensureWalletConnected();\n    const account = this.blockchainService.getAccount();\n    const chainId = this.blockchainService.getChainId();\n\n    if (!account || chainId === undefined) {\n      throw new Error('钱包未连接或初始化失败');\n    }\n\n    // 统一校验\n    await this.validateConsumeParams({\n      merchantId,\n      token: tokenAddress,\n      amount,\n      voucherId,\n      pointToUse,\n      seq,\n      idx,\n      recipient,\n      userAddress: userAddress || account.address\n    });\n\n    const merchantIdBytes32 = this.stringToBytes32(merchantId);\n\n    // 编码consume函数调用\n    const consumeCallData = encodeFunctionData({\n      abi: UNIFIED_VAULT_ABI,\n      functionName: 'consume',\n      args: [\n        merchantIdBytes32,\n        tokenAddress as `0x${string}`,\n        amount,\n        voucherId,\n        pointToUse,\n        seq,\n        idx,\n        recipient\n      ]\n    }) as `0x${string}`;\n\n    // 直接使用传入的绝对时间戳\n    const deadlineValue = deadline;\n    \n    // 获取用户地址的 nonce\n    const userNonce = await this.blockchainService.getNonce(userAddress || account.address);\n\n    // 动态估算 gas\n    const gas = await this.blockchainService.getEstimateClient()!.estimateContractGas({\n      address: this.blockchainService.getVaultContractAddress() as `0x${string}`,\n      abi: UNIFIED_VAULT_ABI,\n      functionName: 'consume',\n      args: [\n        merchantIdBytes32,\n        tokenAddress as `0x${string}`,\n        amount,\n        voucherId,\n        pointToUse,\n        seq,\n        idx,\n        recipient\n      ],\n      account: userAddress || account.address\n    });\n\n    // 创建符合统一格式的请求数据\n    const request: RelayedRequestData = {\n      from: userAddress || account.address,\n      to: this.blockchainService.getVaultContractAddress(),\n      value: '0', // consume 不需要发送ETH\n      gas: gas.toString(), // 动态估算\n      nonce: userNonce.toString(),\n      deadline: deadlineValue.toString(),\n      data: consumeCallData\n    };\n\n    // 尝试生成签名\n    try {\n      const signature = await this.signingService.signTypedData(request, chainId, userNonce);\n      request.signature = signature;\n    } catch (signError: any) {\n      // 签名失败，返回未签名的请求数据\n    }\n\n    return request;\n  }\n\n  /**\n   * 准备代付gas的存款请求（仅签名，不发送）\n   * @param merchantId 商户ID\n   * @param tokenAddress 代币地址\n   * @param amount 存款金额\n   * @param deadline 过期时间戳（秒，bigint，必须是未来的绝对时间戳）\n   * @returns 包含签名的中继请求数据\n   */\n  async prepareRelayedDeposit(\n    merchantId: string,\n    tokenAddress: string,\n    amount: bigint,\n    deadline: bigint\n  ): Promise<RelayedRequestData> {\n    await this.blockchainService.ensureWalletConnected();\n    const account = this.blockchainService.getAccount();\n    const chainId = this.blockchainService.getChainId();\n\n    if (!account || chainId === undefined) {\n      throw new Error('钱包未连接或初始化失败');\n    }\n\n    console.log('准备代付gas存款请求:');\n    console.log('- 商户ID:', merchantId);\n    console.log('- 代币地址:', tokenAddress);\n    console.log('- 存款金额:', amount.toString());\n    console.log('- 过期时间戳:', deadline.toString());\n\n    // 链下校验\n    this.validateAmount(amount);\n    await this.validateTokenWhitelist(tokenAddress);\n\n    // 检查用户钱包余额\n    const balance = await this.tokenOperations.getTokenBalance(tokenAddress, account.address);\n    if (balance < amount) {\n      throw new Error('Insufficient wallet balance');\n    }\n\n    // 确保有足够的授权\n    await this.tokenOperations.ensureTokenAllowance(\n      tokenAddress,\n      this.blockchainService.getVaultContractAddress(),\n      amount\n    );\n\n    const merchantIdBytes32 = this.stringToBytes32(merchantId);\n\n    // 编码deposit函数调用\n    const depositCallData = encodeFunctionData({\n      abi: UNIFIED_VAULT_ABI,\n      functionName: 'deposit',\n      args: [\n        merchantIdBytes32,\n        tokenAddress as `0x${string}`,\n        amount\n      ]\n    }) as `0x${string}`;\n\n    // 直接使用传入的绝对时间戳\n    const deadlineValue = deadline;\n    \n    // 获取用户地址的 nonce\n    const userNonce = await this.blockchainService.getNonce(account.address);\n\n    // 动态估算 gas\n    const gas = await this.blockchainService.getEstimateClient()!.estimateContractGas({\n      address: this.blockchainService.getVaultContractAddress() as `0x${string}`,\n      abi: UNIFIED_VAULT_ABI,\n      functionName: 'deposit',\n      args: [\n        merchantIdBytes32,\n        tokenAddress as `0x${string}`,\n        amount\n      ],\n      account: account.address\n    });\n\n    // 创建符合统一格式的请求数据\n    const request: RelayedRequestData = {\n      from: account.address,\n      to: this.blockchainService.getVaultContractAddress(),\n      value: '0', // 存款不需要原生代币，因为是ERC20代币\n      gas: gas.toString(), // 动态估算\n      nonce: userNonce.toString(),\n      deadline: deadlineValue.toString(),\n      data: depositCallData\n    };\n\n    console.log('构建的请求数据:', request);\n\n    // 尝试生成签名\n    try {\n      const signature = await this.signingService.signTypedData(request, chainId, userNonce);\n      request.signature = signature;\n      console.log('签名成功');\n    } catch (signError: any) {\n      console.error('签名失败:', signError);\n      console.warn('返回未签名的请求数据');\n    }\n\n    return request;\n  }\n\n  /**\n   * 准备代付gas的提款请求（仅签名，不发送）\n   * @param merchantId 商户ID\n   * @param tokenAddress 代币地址\n   * @param amount 提款金额\n   * @param deadline 过期时间戳（秒，bigint，必须是未来的绝对时间戳）\n   * @returns 包含签名的中继请求数据\n   */\n  async prepareRelayedWithdraw(\n    merchantId: string,\n    tokenAddress: string,\n    amount: bigint,\n    deadline: bigint\n  ): Promise<RelayedRequestData> {\n    await this.blockchainService.ensureWalletConnected();\n    const account = this.blockchainService.getAccount();\n    const chainId = this.blockchainService.getChainId();\n\n    if (!account || chainId === undefined) {\n      throw new Error('钱包未连接或初始化失败');\n    }\n\n    console.log('准备代付gas提款请求:');\n    console.log('- 商户ID:', merchantId);\n    console.log('- 代币地址:', tokenAddress);\n    console.log('- 提款金额:', amount.toString());\n    console.log('- 过期时间戳:', deadline.toString());\n\n    // 链下校验\n    this.validateAmount(amount);\n\n    // 检查金库余额\n    const vaultBalance = await this.getUserBalance(account.address, merchantId, tokenAddress);\n    if (vaultBalance < amount) {\n      throw new Error('Insufficient vault balance');\n    }\n\n    const merchantIdBytes32 = this.stringToBytes32(merchantId);\n\n    // 编码withdraw函数调用\n    const withdrawCallData = encodeFunctionData({\n      abi: UNIFIED_VAULT_ABI,\n      functionName: 'withdraw',\n      args: [\n        merchantIdBytes32,\n        tokenAddress as `0x${string}`,\n        amount\n      ]\n    }) as `0x${string}`;\n\n    // 直接使用传入的绝对时间戳\n    const deadlineValue = deadline;\n    \n    // 获取用户地址的 nonce\n    const userNonce = await this.blockchainService.getNonce(account.address);\n\n    // 动态估算 gas\n    const gas = await this.blockchainService.getEstimateClient()!.estimateContractGas({\n      address: this.blockchainService.getVaultContractAddress() as `0x${string}`,\n      abi: UNIFIED_VAULT_ABI,\n      functionName: 'withdraw',\n      args: [\n        merchantIdBytes32,\n        tokenAddress as `0x${string}`,\n        amount\n      ],\n      account: account.address\n    });\n\n    // 创建符合统一格式的请求数据\n    const request: RelayedRequestData = {\n      from: account.address,\n      to: this.blockchainService.getVaultContractAddress(),\n      value: '0', // 提款不需要原生代币\n      gas: gas.toString(), // 动态估算\n      nonce: userNonce.toString(),\n      deadline: deadlineValue.toString(),\n      data: withdrawCallData\n    };\n\n    console.log('构建的请求数据:', request);\n\n    // 尝试生成签名\n    try {\n      const signature = await this.signingService.signTypedData(request, chainId, userNonce);\n      request.signature = signature;\n      console.log('签名成功');\n    } catch (signError: any) {\n      console.error('签名失败:', signError);\n      console.warn('返回未签名的请求数据');\n    }\n\n    return request;\n  }\n\n  // ===== 查询方法 =====\n\n  /**\n   * 获取指定用户在指定商户的余额\n   * @param userAddress 用户地址\n   * @param merchantId 商户ID\n   * @param tokenAddress 代币地址\n   * @returns 余额\n   */\n  async getUserBalance(userAddress: string, merchantId: string, tokenAddress: string): Promise<bigint> {\n    await this.blockchainService.ensureWalletConnected();\n    const publicClient = this.blockchainService.getPublicClient();\n\n    if (!publicClient) {\n      throw new Error('公共客户端未初始化');\n    }\n\n    const merchantIdBytes32 = this.stringToBytes32(merchantId);\n\n    console.log('查询用户金库余额:');\n    console.log('- 用户地址:', userAddress);\n    console.log('- 商户ID:', merchantId);\n    console.log('- 代币地址:', tokenAddress);\n\n    const balance = await this.blockchainService.readContract(this.blockchainService.getVaultContractAddress(), UNIFIED_VAULT_ABI, 'getUserBalance', [userAddress as `0x${string}`, merchantIdBytes32, tokenAddress as `0x${string}`]) as bigint;\n\n    console.log('查询结果:', balance.toString());\n    return balance;\n  }\n\n  /**\n   * 获取指定用户在指定商户的积分\n   * @param userAddress 用户地址\n   * @param merchantId 商户ID\n   * @returns 积分数量\n   */\n  async getUserPoints(userAddress: string, merchantId: string): Promise<bigint> {\n    await this.blockchainService.ensureWalletConnected();\n    const publicClient = this.blockchainService.getPublicClient();\n\n    if (!publicClient) {\n      throw new Error('公共客户端未初始化');\n    }\n\n    const merchantIdBytes32 = this.stringToBytes32(merchantId);\n\n    console.log('查询用户积分:');\n    console.log('- 用户地址:', userAddress);\n    console.log('- 商户ID:', merchantId);\n\n    const points = await this.blockchainService.readContract(this.blockchainService.getVaultContractAddress(), UNIFIED_VAULT_ABI, 'getUserPoints', [userAddress as `0x${string}`, merchantIdBytes32]) as bigint;\n\n    console.log('查询结果:', points.toString());\n    return points;\n  }\n\n  /**\n   * 获取当前用户的所有代金券\n   * @returns 代金券信息\n   */\n  async getMyVouchers(): Promise<{\n    ids: bigint[];\n    merchantIds: string[];\n    tokens: string[];\n    amounts: bigint[];\n    used: boolean[];\n    expireAts: bigint[];\n  }> {\n    await this.blockchainService.ensureWalletConnected();\n    const publicClient = this.blockchainService.getPublicClient();\n    const account = this.blockchainService.getAccount();\n\n    if (!publicClient || !account) {\n      throw new Error('钱包未连接或初始化失败');\n    }\n\n    console.log('查询我的代金券...');\n\n    const result = await this.blockchainService.readContract(this.blockchainService.getVaultContractAddress(), UNIFIED_VAULT_ABI, 'getMyVouchers', []) as [bigint[], string[], string[], bigint[], boolean[], bigint[]];\n\n    const vouchers = {\n      ids: result[0],\n      merchantIds: result[1],\n      tokens: result[2],\n      amounts: result[3],\n      used: result[4],\n      expireAts: result[5]\n    };\n\n    console.log('查询到代金券数量:', vouchers.ids.length);\n    return vouchers;\n  }\n\n  /**\n   * 获取指定代金券的详细信息\n   * @param voucherId 代金券ID\n   * @returns 代金券详情\n   */\n  async getVoucher(voucherId: bigint): Promise<{\n    merchantId: string;\n    token: string;\n    amount: bigint;\n    used: boolean;\n    expireAt: bigint;\n  }> {\n    await this.blockchainService.ensureWalletConnected();\n    const publicClient = this.blockchainService.getPublicClient();\n\n    if (!publicClient) {\n      throw new Error('公共客户端未初始化');\n    }\n\n    console.log('查询代金券详情:');\n    console.log('- 代金券ID:', voucherId.toString());\n\n    const result = await this.blockchainService.readContract(this.blockchainService.getVaultContractAddress(), UNIFIED_VAULT_ABI, 'getVoucher', [voucherId]) as [string, string, bigint, boolean, bigint];\n\n    const voucher = {\n      merchantId: result[0],\n      token: result[1],\n      amount: result[2],\n      used: result[3],\n      expireAt: result[4]\n    };\n\n    console.log('代金券详情:', voucher);\n    return voucher;\n  }\n\n  /**\n   * 获取手续费接收地址\n   * @returns 手续费接收地址\n   */\n  async getFeeReceiver(): Promise<string> {\n    await this.blockchainService.ensureWalletConnected();\n    const publicClient = this.blockchainService.getPublicClient();\n\n    if (!publicClient) {\n      throw new Error('公共客户端未初始化');\n    }\n\n    console.log('查询手续费接收地址...');\n\n    const feeReceiver = await this.blockchainService.readContract(this.blockchainService.getVaultContractAddress(), UNIFIED_VAULT_ABI, 'feeReceiver', []) as string;\n\n    console.log('手续费接收地址:', feeReceiver);\n    return feeReceiver;\n  }\n\n  /**\n   * 获取手续费规则提供者地址\n   * @returns 手续费规则提供者地址\n   */\n  async getFeeRuleProvider(): Promise<string> {\n    await this.blockchainService.ensureWalletConnected();\n    const publicClient = this.blockchainService.getPublicClient();\n\n    if (!publicClient) {\n      throw new Error('公共客户端未初始化');\n    }\n\n    console.log('查询手续费规则提供者地址...');\n\n    const feeRuleProvider = await this.blockchainService.readContract(this.blockchainService.getVaultContractAddress(), UNIFIED_VAULT_ABI, 'feeRuleProvider', []) as string;\n\n    console.log('手续费规则提供者地址:', feeRuleProvider);\n    return feeRuleProvider;\n  }\n\n  /**\n   * 获取可信转发器地址\n   * @returns 可信转发器地址\n   */\n  async getTrustedForwarder(): Promise<string> {\n    await this.blockchainService.ensureWalletConnected();\n    const publicClient = this.blockchainService.getPublicClient();\n\n    if (!publicClient) {\n      throw new Error('公共客户端未初始化');\n    }\n\n    console.log('查询可信转发器地址...');\n\n    const trustedForwarder = await this.blockchainService.readContract(this.blockchainService.getVaultContractAddress(), UNIFIED_VAULT_ABI, 'trustedForwarder', []) as string;\n\n    console.log('可信转发器地址:', trustedForwarder);\n    return trustedForwarder;\n  }\n\n  /**\n   * 检查是否为可信转发器\n   * @param forwarderAddress 转发器地址\n   * @returns 是否为可信转发器\n   */\n  async isTrustedForwarder(forwarderAddress: string): Promise<boolean> {\n    await this.blockchainService.ensureWalletConnected();\n    const publicClient = this.blockchainService.getPublicClient();\n\n    if (!publicClient) {\n      throw new Error('公共客户端未初始化');\n    }\n\n    console.log('检查是否为可信转发器:');\n    console.log('- 转发器地址:', forwarderAddress);\n\n    const isTrusted = await this.blockchainService.readContract(this.blockchainService.getVaultContractAddress(), UNIFIED_VAULT_ABI, 'isTrustedForwarder', [forwarderAddress as `0x${string}`]) as boolean;\n\n    console.log('是否为可信转发器:', isTrusted);\n    return isTrusted;\n  }\n\n  /**\n   * 获取合约所有者地址\n   * @returns 所有者地址\n   */\n  async getOwner(): Promise<string> {\n    await this.blockchainService.ensureWalletConnected();\n    const publicClient = this.blockchainService.getPublicClient();\n\n    if (!publicClient) {\n      throw new Error('公共客户端未初始化');\n    }\n\n    console.log('查询合约所有者地址...');\n\n    const owner = await this.blockchainService.readContract(this.blockchainService.getVaultContractAddress(), UNIFIED_VAULT_ABI, 'owner', []) as string;\n\n    console.log('合约所有者地址:', owner);\n    return owner;\n  }\n\n  /**\n   * 查询商户活动档位详情（PromoTier）\n   * @param merchantId 商户ID\n   * @param idx 活动档位编号\n   * @returns PromoTier 详情\n   */\n  async getPromoTier(merchantId: string, idx: number): Promise<any> {\n    await this.blockchainService.ensureWalletConnected();\n    const merchantIdBytes32 = this.stringToBytes32(merchantId);\n    const result = await this.blockchainService.readContract(\n      this.blockchainService.getVaultContractAddress(),\n      UNIFIED_VAULT_ABI,\n      'getPromoTier',\n      [merchantIdBytes32, idx]\n    );\n    // 返回结构与合约一致\n    return {\n      minAmount: result[0],\n      discountRate: result[1],\n      voucherAmount: result[2],\n      pointAmount: result[3],\n      startTime: result[4],\n      endTime: result[5],\n      voucherExpirePeriod: result[6],\n      enabled: result[7]\n    };\n  }\n\n  /**\n   * 消费主流程（consume）前端参数校验\n   * @param params 消费参数\n   * @throws 校验不通过抛出异常\n   */\n  async validateConsumeParams(params: {\n    merchantId: string,\n    token: string,\n    amount: bigint,\n    voucherId: bigint,\n    pointToUse: bigint,\n    seq: bigint,\n    idx: bigint,\n    recipient: string,\n    userAddress: string\n  }) {\n    // 1. 检查 token 白名单\n    const isWhitelisted = await this.blockchainService.readContract(\n      this.blockchainService.getVaultContractAddress(),\n      UNIFIED_VAULT_ABI,\n      'tokenWhitelist',\n      [params.token]\n    );\n    if (!isWhitelisted) throw new Error('Token not whitelisted');\n    // 2. 金额校验\n    if (params.amount <= 0n) throw new Error('Amount must be greater than 0');\n    // 3. seq 校验\n    const isSeqUsed = await this.blockchainService.readContract(\n      this.blockchainService.getVaultContractAddress(),\n      UNIFIED_VAULT_ABI,\n      'usedSeq',\n      [params.seq]\n    );\n    if (isSeqUsed) throw new Error('Seq already used');\n    // 4. 档位校验\n    const promoTier = await this.getPromoTier(params.merchantId, Number(params.idx));\n    if (!promoTier.enabled) throw new Error('Promo tier not enabled');\n    if (params.amount < promoTier.minAmount) throw new Error('Not match minAmount');\n    const now = Math.floor(Date.now() / 1000);\n    if (now < Number(promoTier.startTime) || now > Number(promoTier.endTime)) throw new Error('Not in promo time');\n    // 5. 余额校验\n    const vaultBalance = await this.getUserBalance(params.userAddress, params.merchantId, params.token);\n    // 计算 spendAmount = amount * discountRate / 100\n    const spendAmount = (params.amount * promoTier.discountRate) / 100n;\n    if (vaultBalance < spendAmount) throw new Error('Insufficient vault balance');\n    // 6. 券校验（如有）\n    if (params.voucherId !== 0n) {\n      const voucher = await this.getVoucher(params.voucherId);\n      if (voucher.used) throw new Error('Voucher already used');\n      if (voucher.merchantId !== params.merchantId) throw new Error('Voucher merchant mismatch');\n      if (voucher.token !== params.token) throw new Error('Voucher token mismatch');\n      if (voucher.expireAt <= now) throw new Error('Voucher expired');\n      // 还可校验是否属于当前用户\n    }\n    // 7. 积分校验（如有）\n    if (params.pointToUse > 0n) {\n      const myPoints = await this.getUserPoints(params.userAddress , params.merchantId);\n      if (myPoints < params.pointToUse) throw new Error('Insufficient points');\n    }\n    // 通过即不抛异常\n  }\n} ","import { \n  type Account,\n  type Address,\n  stringToHex,\n  pad\n} from 'viem';\nimport { DelegateConfig, MerchantOperationResult, PromoTier } from '../types';\nimport { UNIFIED_VAULT_ABI } from '../config/contract';\nimport { BlockchainService } from './blockchain';\n\nexport class MerchantConfigManager extends BlockchainService {\n\n  constructor(config: DelegateConfig) {\n    super(config);\n  }\n\n  /**\n   * 设置或更新商户活动档位（PromoTier）\n   * @param merchantId 商户ID\n   * @param idx 活动档位编号（由前端维护，0表示新建，非0表示更新）\n   * @param minAmount 最低消费金额\n   * @param discountRate 折扣率（百分制，100=无折扣）\n   * @param voucherAmount 返券金额\n   * @param pointAmount 返积分数量\n   * @param startTime 档位开始时间\n   * @param endTime 档位结束时间\n   * @param voucherExpirePeriod 券奖励有效期（秒）\n   * @param enabled 档位开关\n   * @returns 交易哈希\n   */\n  async setPromoTier(\n    merchantId: string,\n    idx: number,\n    minAmount: bigint,\n    discountRate: bigint,\n    voucherAmount: bigint,\n    pointAmount: bigint,\n    startTime: bigint,\n    endTime: bigint,\n    voucherExpirePeriod: bigint,\n    enabled: boolean\n  ): Promise<string> {\n    await this.ensureWalletConnected();\n    const merchantIdBytes32 = this.stringToBytes32(merchantId);\n    const txHash = await this.writeContract(\n      this.getVaultContractAddress(),\n      UNIFIED_VAULT_ABI,\n      'setPromoTier',\n      [\n        merchantIdBytes32,\n        idx,\n        minAmount,\n        discountRate,\n        voucherAmount,\n        pointAmount,\n        startTime,\n        endTime,\n        voucherExpirePeriod,\n        enabled\n      ]\n    );\n    return txHash;\n  }\n\n  /**\n   * 工具：将字符串转为 bytes32\n   */\n  private stringToBytes32(str: string): `0x${string}` {\n    if (str.startsWith('0x') && str.length === 66) {\n      return str as `0x${string}`;\n    }\n    const hex = Buffer.from(str, 'utf8').toString('hex');\n    return ('0x' + hex.padEnd(64, '0')) as `0x${string}`;\n  }\n\n  /**\n   * 生成商户ID\n   * @param merchantName 商户名称或标识符\n   * @returns 32字节的商户ID\n   */\n  generateMerchantId(merchantName: string): string {\n    if (!merchantName || merchantName.trim() === '') {\n      throw new Error('商户名称不能为空');\n    }\n    \n    // 将字符串转换为十六进制\n    const merchantIdHex = stringToHex(merchantName);\n    \n    // 确保是bytes32（32字节，64个十六进制字符加上0x前缀）\n    const merchantId = pad(merchantIdHex, { size: 32 });\n    \n    console.log('生成的merchantId:', merchantId);\n    return merchantId;\n  }\n\n  /**\n   * 设置商户操作员\n   * @param merchantId 商户ID\n   * @param operator 操作员地址\n   * @returns 操作结果\n   */\n  async setMerchantOperator(\n    merchantId: string,\n    operator: string\n  ): Promise<MerchantOperationResult> {\n    try {\n      await this.ensureWalletConnected();\n\n      console.log('设置商户操作员...');\n      console.log('- 商户ID:', merchantId);\n      console.log('- 操作员地址:', operator);\n      \n      const merchantIdBytes32 = this.stringToBytes32(merchantId);\n      \n      const txHash = await this.writeContract(\n        this.getVaultContractAddress(),\n        UNIFIED_VAULT_ABI,\n        'setMerchantOperator',\n        [merchantIdBytes32, operator as `0x${string}`]\n      );\n      \n      console.log('交易已发送，哈希:', txHash);\n      \n      return {\n        success: true,\n        message: '设置商户操作员交易已发送',\n        data: { txHash }\n      };\n    } catch (error: any) {\n      console.error('设置商户操作员失败:', error);\n      return {\n        success: false,\n        message: `设置商户操作员失败: ${error.message}`\n      };\n    }\n  }\n\n  /**\n   * 检查商户操作员权限\n   * @param merchantId 商户ID\n   * @param operator 操作员地址\n   * @returns 权限状态\n   */\n  async checkMerchantOperator(merchantId: string, operator: string): Promise<MerchantOperationResult> {\n    try {\n      await this.ensureWalletConnected();\n\n      console.log('检查商户操作员权限...');\n      console.log('- 商户ID:', merchantId);\n      console.log('- 操作员地址:', operator);\n      \n      const merchantIdBytes32 = this.stringToBytes32(merchantId);\n      \n      const operatorAddress = await this.readContract<string>(\n        this.getVaultContractAddress(),\n        UNIFIED_VAULT_ABI,\n        'merchantOperator',\n        [merchantIdBytes32]\n      );\n      const hasPermission = operatorAddress.toLowerCase() === operator.toLowerCase();\n      \n      console.log('操作员权限状态:', hasPermission);\n      \n      return {\n        success: true,\n        message: '获取商户操作员权限成功',\n        data: { hasPermission, operatorAddress }\n      };\n    } catch (error: any) {\n      console.error('获取商户操作员权限失败:', error);\n      return {\n        success: false,\n        message: `获取商户操作员权限失败: ${error.message}`\n      };\n    }\n  }\n}\n\n  ","import { \n  encodeFunctionData,\n  keccak256,\n  type Hash,\n  type Account\n} from 'viem';\nimport { \n  ERC20_ABI, \n  PAYMENT_CONTRACT_ABI, \n  forwarderAddress,  \n  FORWARD_REQUEST_TYPES,\n  EIP712_DOMAIN_TYPE\n} from '../config/contract';\nimport { BlockchainService } from './blockchain';\nimport { SigningService } from './signing';\nimport { TokenOperations, DirectPayment, VaultOperations, RelayedPayment, type RelayedRequestData } from './operations';\n\n// 检查是否在浏览器环境中\nconst isBrowser = typeof window !== 'undefined';\n\n// 安全地访问window.ethereum\nconst getEthereum = () => {\n  if (!isBrowser) {\n    return null;\n  }\n  return window.ethereum;\n};\n\nexport interface ForwardRequestData {\n  from: string;     // address\n  to: string;       // address\n  value: string;    // uint256\n  gas: string;      // uint256\n  nonce: string;    // uint256\n  deadline: string; // uint48\n  data: string;     // bytes\n}\n\nexport interface SignedRequest extends ForwardRequestData {\n  signature?: string;\n}\n\nexport class TransactionService {\n  private blockchainService: BlockchainService;\n  private signingService: SigningService;\n  private tokenOperations: TokenOperations;\n  private directPayment: DirectPayment;\n  private vaultOperations: VaultOperations;\n  private relayedPayment: RelayedPayment;\n\n  constructor(blockchainService: BlockchainService) {\n    this.blockchainService = blockchainService;\n    this.signingService = new SigningService(blockchainService);\n    this.tokenOperations = new TokenOperations(blockchainService);\n    this.directPayment = new DirectPayment(blockchainService);\n    this.vaultOperations = new VaultOperations(blockchainService);\n    this.relayedPayment = new RelayedPayment(blockchainService);\n  }\n\n  // === ERC20代币相关 ===\n\n  // 授权代币\n  async approveToken(tokenAddress: string, spender: string, amount: bigint): Promise<Hash> {\n    return this.tokenOperations.approveToken(tokenAddress, spender, amount);\n  }\n\n  // 检查授权额度\n  async checkAllowance(tokenAddress: string, owner: string, spender: string): Promise<bigint> {\n    return this.tokenOperations.checkAllowance(tokenAddress, owner, spender);\n  }\n\n  // === 支付合约相关 ===\n\n  // 编码对 pay 函数的调用\n  encodePayCallData(\n    token: string,\n    to: string,\n    amount: bigint, // 金额\n    seq: bigint = 0n,  // api获取的\n  ): `0x${string}` {\n    return this.directPayment.encodePayCallData(token, to, amount, seq);\n  }\n\n  // 用户直接支付（自己付gas）\n  async userPayDirect(\n    to: string,\n    amount: bigint,\n    tokenAddress?: string,\n    seq: bigint = BigInt(Math.floor(Date.now() / 1000))\n  ): Promise<Hash> {\n    return this.directPayment.pay(to, amount, tokenAddress, seq);\n  }\n\n  // 准备代付gas的支付请求 (仅签名，不发送)\n  async prepareRelayedPayment(\n    to: string,\n    amount: bigint,\n    seq: bigint,\n    tokenAddress: string,\n    deadline: bigint\n  ): Promise<RelayedRequestData> {\n    return this.relayedPayment.preparePayment(to, amount, seq, tokenAddress, deadline);\n  }\n\n  // === UnifiedVault相关 ===\n\n  // 存款到金库\n  async depositToVault(merchantId: string, tokenAddress: string, amount: bigint): Promise<Hash> {\n    return this.vaultOperations.deposit(merchantId, tokenAddress, amount);\n  }\n\n  // 从金库提款\n  async withdrawFromVault(merchantId: string, tokenAddress: string, amount: bigint): Promise<Hash> {\n    return this.vaultOperations.withdraw(merchantId, tokenAddress, amount);\n  }\n\n  // 从金库消费\n  async consumeFromVault(\n    merchantId: string,\n    tokenAddress: string,\n    amount: bigint,\n    voucherId: bigint = 0n,\n    pointToUse: bigint = 0n,\n    seq: bigint = BigInt(Math.floor(Date.now() / 1000)),\n    idx: bigint,\n    recipient: string,\n    userAddress: string\n  ): Promise<Hash> {\n    return this.vaultOperations.consumeDirect(merchantId, tokenAddress, amount, voucherId, pointToUse, seq, idx, recipient, userAddress);\n  }\n\n  async getUserBalance(userAddress: string, merchantId: string, tokenAddress: string): Promise<bigint> {\n    return this.vaultOperations.getUserBalance(userAddress, merchantId, tokenAddress);\n  }\n\n  async getUserPoints(userAddress: string, merchantId: string): Promise<bigint> {\n    return this.vaultOperations.getUserPoints(userAddress, merchantId);\n  }\n\n  async getSpecificUserPoints(userAddress: string, merchantId: string): Promise<bigint> {\n    return this.vaultOperations.getUserPoints(userAddress, merchantId);\n  }\n\n  // 准备代付gas的消费请求\n  async prepareRelayedConsume(\n    merchantId: string,\n    tokenAddress: string,\n    amount: bigint,\n    voucherId: bigint = 0n,\n    pointToUse: bigint = 0n,\n    seq: bigint = BigInt(Math.floor(Date.now() / 1000)),\n    idx: bigint,\n    recipient: string,\n    deadline: bigint,\n    userAddress: string\n  ): Promise<RelayedRequestData> {\n    return this.vaultOperations.prepareRelayedConsume(merchantId, tokenAddress, amount, voucherId, pointToUse, seq, idx, recipient, deadline, userAddress);\n  }\n\n  // 准备代付gas的存款请求\n  async prepareRelayedDeposit(\n    merchantId: string,\n    tokenAddress: string,\n    amount: bigint,\n    deadline: bigint\n  ): Promise<RelayedRequestData> {\n    return this.vaultOperations.prepareRelayedDeposit(merchantId, tokenAddress, amount, deadline);\n  }\n\n  // 准备代付gas的提款请求\n  async prepareRelayedWithdraw(\n    merchantId: string,\n    tokenAddress: string,\n    amount: bigint,\n    deadline: bigint\n  ): Promise<RelayedRequestData> {\n    return this.vaultOperations.prepareRelayedWithdraw(merchantId, tokenAddress, amount, deadline);\n  }\n} ","import { BlockchainService, BlockchainConfig } from './blockchain';\nimport { TokenOperations } from './operations/token';\nimport { DirectPayment } from './operations/direct-payment';\nimport { RelayedPayment, RelayedRequestData } from './operations/relayed-payment';\nimport { VaultOperations } from './operations/vault';\nimport type { Hash } from 'viem';\nimport { MerchantConfigManager } from './merchant-config-manager';\nimport { TransactionService } from './transaction';\n\n/**\n * Web3Delegate主类\n * 提供统一的接口来访问所有区块链操作功能\n */\nexport class Web3Delegate {\n  private blockchainService: BlockchainService;\n  \n  // 各功能模块\n  public readonly token: TokenOperations;\n  public readonly directPayment: DirectPayment;\n  public readonly relayedPayment: RelayedPayment;\n  public readonly vault: VaultOperations;\n  public readonly merchantConfigManager: MerchantConfigManager;\n  public readonly transactionService: TransactionService;\n\n  constructor(config: BlockchainConfig = {  }) {\n    console.log('[Web3Delegate] 构造收到的config:', config);\n    // 初始化基础服务\n    this.blockchainService = new BlockchainService(config);\n    console.log('[Web3Delegate] blockchainService.getPaymentContractAddress():', this.blockchainService.getPaymentContractAddress());\n    // 初始化各功能模块\n    this.token = new TokenOperations(this.blockchainService);\n    this.directPayment = new DirectPayment(this.blockchainService);\n    this.relayedPayment = new RelayedPayment(this.blockchainService);\n    this.vault = new VaultOperations(this.blockchainService);\n    this.merchantConfigManager = new MerchantConfigManager(config);\n    this.transactionService = new TransactionService(this.blockchainService);\n  }\n\n  // === 基础钱包操作 ===\n\n  /**\n   * 连接钱包\n   * @returns 连接的钱包地址\n   */\n  async connectWallet(): Promise<string> {\n    return this.blockchainService.connectWallet();\n  }\n\n  /**\n   * 检查钱包是否已连接\n   * @returns 是否已连接\n   */\n  isConnected(): boolean {\n    return this.blockchainService.isConnected();\n  }\n\n  /**\n   * 获取当前连接的钱包地址\n   * @returns 当前连接的钱包地址\n   */\n  getConnectedAddress(): string | undefined {\n    return this.blockchainService.getConnectedAddress();\n  }\n\n  /**\n   * 获取当前连接的链ID\n   * @returns 当前连接的链ID\n   */\n  getChainId(): number | undefined {\n    return this.blockchainService.getChainId();\n  }\n\n  // === 向后兼容的快捷方法 ===\n\n  /**\n   * ERC20代币授权\n   * @param tokenAddress 代币地址\n   * @param spender 被授权者地址\n   * @param amount 授权金额\n   * @returns 交易哈希\n   */\n  async approveToken(tokenAddress: string, spender: string, amount: bigint): Promise<Hash> {\n    return this.token.approveToken(tokenAddress, spender, amount);\n  }\n\n  /**\n   * 检查代币授权额度\n   * @param tokenAddress 代币地址\n   * @param owner 代币持有者\n   * @param spender 被授权者\n   * @returns 授权额度\n   */\n  async checkAllowance(tokenAddress: string, owner: string, spender: string): Promise<bigint> {\n    return this.token.checkAllowance(tokenAddress, owner, spender);\n  }\n\n  /**\n   * 确保代币授权额度充足\n   * @param tokenAddress 代币地址\n   * @param spender 被授权者\n   * @param amount 需要的授权额度\n   * @returns 是否授权成功\n   */\n  async ensureTokenAllowance(tokenAddress: string, spender: string, amount: bigint): Promise<boolean> {\n    return this.token.ensureTokenAllowance(tokenAddress, spender, amount);\n  }\n\n  /**\n   * 用户直接支付（自己付gas）\n   * @param to 接收方地址\n   * @param amount 支付金额\n   * @param tokenAddress 代币地址，如不提供则为原生代币\n   * @param seq 序列号，默认为当前时间戳\n   * @returns 交易哈希\n   */\n  async userPayDirect(to: string, amount: bigint, tokenAddress?: string, seq?: bigint): Promise<Hash> {\n    return this.directPayment.pay(to, amount, tokenAddress, seq);\n  }\n\n  /**\n   * 准备代付gas的支付请求（仅签名，不发送）\n   * @param to 接收方地址\n   * @param amount 支付金额\n   * @param seq 序列号，默认为当前时间戳\n   * @param tokenAddress 代币地址，如不提供则为原生代币\n   * @param deadline 过期时间戳（秒，bigint，必须是未来的绝对时间戳）\n   * @returns 包含签名的请求数据\n   */\n  async prepareRelayedPayment(\n    to: string, \n    amount: bigint, \n    seq: bigint, \n    tokenAddress: string, \n    deadline: bigint\n  ): Promise<RelayedRequestData> {\n    return this.transactionService.prepareRelayedPayment(to, amount, seq, tokenAddress, deadline);\n  }\n\n  /**\n   * 向金库存款（用户付gas）\n   * @param merchantId 商户ID\n   * @param tokenAddress 代币地址\n   * @param amount 存款金额\n   * @returns 交易哈希\n   */\n  async depositToVault(merchantId: string, tokenAddress: string, amount: bigint): Promise<Hash> {\n    return this.vault.deposit(merchantId, tokenAddress, amount);\n  }\n\n  /**\n   * 从金库提现（用户付gas）\n   * @param merchantId 商户ID\n   * @param tokenAddress 代币地址\n   * @param amount 提现金额\n   * @returns 交易哈希\n   */\n  async withdrawFromVault(merchantId: string, tokenAddress: string, amount: bigint): Promise<Hash> {\n    return this.vault.withdraw(merchantId, tokenAddress, amount);\n  }\n\n  /**\n   * 查询金库余额\n   * @param merchantId 商户ID\n   * @param tokenAddress 代币地址\n   * @returns 余额\n   */\n  async getUserBalance(userAddress: string, merchantId: string, tokenAddress: string): Promise<bigint> {\n    return this.vault.getUserBalance(userAddress, merchantId, tokenAddress);\n  }\n\n  /**\n   * 用户直接从金库消费（自己付gas）\n   * @param merchantId 商家ID\n   * @param tokenAddress 代币地址\n   * @param amount 消费金额\n   * @param voucherId 代金券ID\n   * @param pointToUse 使用的积分\n   * @param idx 由前端传入\n   * @param seq 序列号\n   * @param recipient 接收方地址\n   * @param userAddress 用户地址\n   * @returns 交易哈希\n   */\n  async consumeFromVault(\n    merchantId: string,\n    tokenAddress: string,\n    amount: bigint,\n    voucherId: bigint = 0n,\n    pointToUse: bigint = 0n,\n    idx: bigint,\n    seq: bigint,\n    recipient: string,\n    userAddress: string\n  ): Promise<Hash> {\n    if (!recipient) throw new Error('recipient is required');\n    return this.vault.consumeDirect(\n      merchantId,\n      tokenAddress,\n      amount,\n      voucherId,\n      pointToUse,\n      seq,\n      idx,\n      recipient,\n      userAddress\n    );\n  }\n\n  /**\n   * 准备代付gas的金库消费请求（仅签名，不发送）\n   * @param merchantId 商家ID\n   * @param tokenAddress 代币地址\n   * @param amount 消费金额\n   * @param voucherId 代金券ID\n   * @param pointToUse 使用的积分\n   * @param idx 由前端传入\n   * @param seq 序列号\n   * @param recipient 接收方地址\n   * @param deadline 过期时间戳（秒，bigint，必须是未来的绝对时间戳）\n   * @param userAddress 用户地址\n   * @returns 包含签名的请求数据\n   */\n  async prepareRelayedConsume(\n    merchantId: string,\n    tokenAddress: string,\n    amount: bigint,\n    voucherId: bigint = 0n,\n    pointToUse: bigint = 0n,\n    idx: bigint,\n    seq: bigint,\n    recipient: string,\n    deadline: bigint,\n    userAddress: string\n  ): Promise<RelayedRequestData> {\n    if (!recipient) throw new Error('recipient is required');\n    if (!deadline) throw new Error('deadline is required');\n    return this.transactionService.prepareRelayedConsume(\n      merchantId,\n      tokenAddress,\n      amount,\n      voucherId,\n      pointToUse,\n      idx,\n      seq,\n      recipient,\n      deadline,\n      userAddress\n    );\n  }\n\n  /**\n   * 准备代付gas的金库存款请求（仅签名，不发送）\n   * @param merchantId 商户ID\n   * @param tokenAddress 代币地址\n   * @param amount 存款金额\n   * @param deadline 过期时间戳（秒，bigint，必须是未来的绝对时间戳）\n   * @returns 包含签名的请求数据\n   */\n  async prepareRelayedDeposit(\n    merchantId: string,\n    tokenAddress: string,\n    amount: bigint,\n    deadline: bigint\n  ): Promise<RelayedRequestData> {\n    return this.transactionService.prepareRelayedDeposit(merchantId, tokenAddress, amount, deadline);\n  }\n\n  /**\n   * 准备代付gas的金库提现请求（仅签名，不发送）\n   * @param merchantId 商户ID\n   * @param tokenAddress 代币地址\n   * @param amount 提现金额\n   * @param deadline 过期时间戳（秒，bigint，必须是未来的绝对时间戳）\n   * @returns 包含签名的请求数据\n   */\n  async prepareRelayedWithdraw(\n    merchantId: string,\n    tokenAddress: string,\n    amount: bigint,\n    deadline: bigint\n  ): Promise<RelayedRequestData> {\n    return this.transactionService.prepareRelayedWithdraw(merchantId, tokenAddress, amount, deadline);\n  }\n}\n\n// 导出所有类型和类\nexport type { RelayedRequestData } from './operations/relayed-payment';\nexport type { ForwardRequestData } from './signing';\nexport type { BlockchainConfig } from './blockchain';\n\nexport { BlockchainService } from './blockchain';\nexport { TokenOperations } from './operations/token';\nexport { DirectPayment } from './operations/direct-payment';\nexport { RelayedPayment } from './operations/relayed-payment';\nexport { VaultOperations } from './operations/vault';\nexport { SigningService } from './signing';\n\n// 默认导出\nexport default Web3Delegate; ","export interface DelegateConfig {\n  paymentContractAddress?: string;\n  vaultContractAddress?: string; // 金库合约地址\n  forwarderAddress?: string; // 转发合约地址\n  rpcUrl?:string;\n}\n\nexport interface TransferParams {\n  to: string;\n  amount: bigint;\n  tokenAddress?: string;\n  gasFee?: bigint;\n  seq?: bigint;\n  contractAddress?: string;\n  payer?: string;\n}\n\nexport interface ProcessResult {\n  request: {\n    from: string;     // address\n    to: string;       // address\n    value: string;    // uint256\n    gas: string;      // uint256\n    nonce: string;    // uint256\n    deadline: string; // uint48\n    data: string;     // bytes\n    signature?: string; // bytes - 签名\n  };\n}\n\nexport interface EncryptionResult {\n  encryptedKey: string;\n  encryptedData: string;\n  iv: string;\n}\n\nexport interface Call {\n  data: `0x${string}`;\n  to: string;\n  value: bigint;\n}\n\n// 促销分档配置\nexport interface PromoTier {\n  minAmount: bigint;       // 最低消费金额\n  discountRate: bigint;    // 折扣率（百分制，100=无折扣）\n  voucherAmount: bigint;   // 返券金额\n  pointAmount: bigint;     // 返积分数量\n}\n\n// 操作类型枚举\nexport enum OperationType {\n  Payment = 'payment',      // 支付操作\n  Consume = 'consume',      // 消费操作\n  Deposit = 'deposit',      // 存款操作\n  Withdraw = 'withdraw'     // 提款操作\n}\n\n// 中继请求接口\nexport interface RelayerRequest {\n  from: string;             // 发送方地址\n  to: string;               // 接收方地址\n  token: string;            // 代币地址\n  amount: bigint;           // 金额\n  seq: bigint;              // 序列号\n  gasFee?: bigint;          // Gas费用(可选)\n  consumerId?: string;      // 消费者ID(消费时需要)\n  merchantId?: string;      // 商户ID\n  voucherId?: bigint;       // 代金券ID(代金券消费时需要)\n  pointToUse?: bigint;      // 使用的积分(代金券消费时需要)\n  signature: string;        // 签名\n  deadline: number;         // 截止时间\n  data?: `0x${string}`;     // 调用数据\n  value?: string;           // 原生代币值\n  gas?: string;             // Gas限制\n}\n\n// 验证结果接口\nexport interface ValidationResult {\n  success: boolean;         // 是否验证成功\n  error?: string;           // 错误信息\n  fee?: bigint;             // 手续费\n  toAmount?: bigint;        // 接收方到账金额\n  rewardAmount?: bigint;    // 奖励金额(消费时)\n  merchantAmount?: bigint;  // 商家到账金额(代金券消费时)\n  voucherReward?: bigint;   // 返券金额\n  discountedAmount?: bigint; // 折扣后金额\n  pointsUsed?: bigint;      // 使用的积分\n  voucherUsed?: bigint;     // 使用的代金券金额\n  spendAmount?: bigint;     // 实际扣除金额\n}\n\n// 商户管理员操作结果\nexport interface MerchantOperationResult {\n  success: boolean;         // 操作是否成功\n  message: string;          // 结果消息\n  data?: any;               // 返回数据\n} ","import { \n  type Account,\n  type Address,\n  encodeFunctionData,\n  decodeFunctionData\n} from 'viem';\nimport { DelegateConfig, RelayerRequest, OperationType, ValidationResult } from '../types';\nimport { BlockchainService } from './blockchain';\nimport { \n  PAYMENT_CONTRACT_ABI, \n  ERC2771_FORWARDER_ABI,\n  ERC20_ABI,\n  paymentContractAddress,\n  forwarderAddress,\n  UNIFIED_VAULT_ABI,\n  VaultContractAddress\n} from '../config/contract';\n\n// 新的简化请求接口\nexport interface SimpleRelayerRequest {\n  from: string;           // 发送方地址\n  to: string;             // 目标合约地址\n  value: string;          // 原生代币值\n  gas: string;            // Gas限制\n  deadline: string;       // 截止时间\n  data: string;           // 调用数据\n  signature: string;      // 签名\n}\n\nexport class RelayerService extends BlockchainService {\n  private paymentContractAddress: string;\n  private consumeContractAddress: string;\n  private forwarderAddress: string;\n\n  constructor(config: DelegateConfig) {\n    super(config);\n    this.paymentContractAddress = config.paymentContractAddress || this.getPaymentContractAddress();\n    this.consumeContractAddress = config.vaultContractAddress || this.getVaultContractAddress();\n    this.forwarderAddress = config.forwarderAddress || this.getForwarderAddress() || forwarderAddress;\n  }\n\n  /**\n   * 验证支付请求\n   * @param params 请求参数\n   * @returns 验证结果\n   */\n  async validatePaymentRequest(params: {\n    token: string,\n    to: string,\n    amount: bigint,\n    gasFee: bigint,\n    seq: bigint,\n    from: string\n  }): Promise<ValidationResult> {\n    try {\n      // 确保客户端已初始化\n      await this.ensureWalletConnected();\n      \n      const { token, to, amount, gasFee, seq, from } = params;\n      \n      console.log('验证支付请求...');\n      console.log('- 代币:', token);\n      console.log('- 接收方:', to);\n      console.log('- 金额:', amount.toString());\n      console.log('- Gas费:', gasFee.toString());\n      console.log('- 序列号:', seq.toString());\n      console.log('- 发送方:', from);\n      \n      // 检查金额是否大于0\n      if (amount <= 0n) {\n        console.error('金额必须大于0');\n        return {\n          success: false,\n          error: '金额必须大于0'\n        };\n      }\n      \n      // 1. 检查序列号是否已使用\n      try {\n        const isUsed = await this.readContract<boolean>(\n          this.getPaymentContractAddress(),\n          PAYMENT_CONTRACT_ABI,\n          'usedSeq',\n          [seq]\n        );\n        \n        if (isUsed) {\n          console.error('序列号已被使用');\n          return {\n            success: false,\n            error: '序列号已被使用'\n          };\n        }\n      } catch (error: any) {\n        console.error('检查序列号失败:', error);\n        return {\n          success: false,\n          error: `检查序列号失败: ${error.message}`\n        };\n      }\n      \n      // 2. 检查代币是否在白名单中\n      try {\n        const isWhitelisted = await this.readContract<boolean>(\n          this.getPaymentContractAddress(),\n          PAYMENT_CONTRACT_ABI,\n          'tokenWhitelist',\n          [token as `0x${string}`]\n        );\n        \n        if (!isWhitelisted) {\n          console.error('代币不在白名单中');\n          return {\n            success: false,\n            error: '代币不在白名单中'\n          };\n        }\n      } catch (error: any) {\n        console.error('检查代币白名单失败:', error);\n        return {\n          success: false,\n          error: `检查代币白名单失败: ${error.message}`\n        };\n      }\n      \n      // 3. 检查金额是否超过最大限制\n      try {\n        const maxAmount = await this.readContract<bigint>(\n          this.getPaymentContractAddress(),\n          PAYMENT_CONTRACT_ABI,\n          'MAX_AMOUNT',\n          []\n        );\n        \n        if (amount > maxAmount) {\n          console.error('金额超过最大限制');\n          return {\n            success: false,\n            error: `金额超过最大限制: ${maxAmount}`\n          };\n        }\n      } catch (error: any) {\n        console.error('检查最大金额限制失败:', error);\n        return {\n          success: false,\n          error: `检查最大金额限制失败: ${error.message}`\n        };\n      }\n      \n      // 4. 检查手续费地址是否设置\n      try {\n        const feeAddress = await this.readContract<string>(\n          this.getPaymentContractAddress(),\n          PAYMENT_CONTRACT_ABI,\n          'feeAddress',\n          []\n        );\n        \n        if (feeAddress === '0x0000000000000000000000000000000000000000') {\n          console.error('手续费地址未设置');\n          return {\n            success: false,\n            error: '手续费地址未设置'\n          };\n        }\n      } catch (error: any) {\n        console.error('检查手续费地址失败:', error);\n        return {\n          success: false,\n          error: `检查手续费地址失败: ${error.message}`\n        };\n      }\n      \n      // 5. 检查最小单位\n      let minUnit: bigint;\n      try {\n        minUnit = await this.readContract<bigint>(\n          this.getPaymentContractAddress(),\n          PAYMENT_CONTRACT_ABI,\n          'minUnitPerToken',\n          [token as `0x${string}`]\n        );\n        \n        if (minUnit <= 0n) {\n          console.error('代币最小单位未设置');\n          return {\n            success: false,\n            error: '代币最小单位未设置'\n          };\n        }\n        \n        if (amount < minUnit) {\n          console.error('金额低于最小单位');\n          return {\n            success: false,\n            error: `金额低于最小单位: ${minUnit}`\n          };\n        }\n        \n        // 检查金额是否是最小单位的整数倍\n        if (amount % minUnit !== 0n) {\n          console.error('金额必须是最小单位的整数倍');\n          return {\n            success: false,\n            error: `金额必须是最小单位的整数倍: ${minUnit}`\n          };\n        }\n      } catch (error: any) {\n        console.error('检查最小单位失败:', error);\n        return {\n          success: false,\n          error: `检查最小单位失败: ${error.message}`\n        };\n      }\n      \n      // 6. 计算手续费\n      let feePpm: bigint;\n      try {\n        // 首先检查是否有特定接收方的费率\n        const specificFeePpm = await this.readContract<bigint>(\n          this.getPaymentContractAddress(),\n          PAYMENT_CONTRACT_ABI,\n          'feePpmPerTo',\n          [to as `0x${string}`]\n        );\n        \n        if (specificFeePpm > 0n) {\n          feePpm = specificFeePpm;\n        } else {\n          // 使用默认费率\n          feePpm = await this.readContract<bigint>(\n            this.getPaymentContractAddress(),\n            PAYMENT_CONTRACT_ABI,\n            'feePpm',\n            []\n          );\n        }\n        \n        // 检查费率是否有效\n        if (feePpm >= 1000000n) {\n          console.error('费率无效');\n          return {\n            success: false,\n            error: '费率无效'\n          };\n        }\n      } catch (error: any) {\n        console.error('获取手续费率失败:', error);\n        return {\n          success: false,\n          error: `获取手续费率失败: ${error.message}`\n        };\n      }\n      \n      // 计算手续费和实际到账金额\n      const fee = (amount * feePpm) / 1000000n;\n      \n      // 检查手续费是否小于金额\n      if (fee >= amount) {\n        console.error('手续费过高');\n        return {\n          success: false,\n          error: '手续费过高'\n        };\n      }\n      \n      const toAmount = amount - fee;\n      \n      // 检查接收方到账金额是否大于0\n      if (toAmount <= 0n) {\n        console.error('接收方到账金额过低');\n        return {\n          success: false,\n          error: '接收方到账金额过低'\n        };\n      }\n      \n      console.log('验证通过');\n      console.log('- 手续费率:', feePpm.toString(), 'ppm');\n      console.log('- 手续费:', fee.toString());\n      console.log('- 实际到账:', toAmount.toString());\n      \n      return {\n        success: true,\n        fee,\n        toAmount\n      };\n    } catch (error: any) {\n      console.error('验证支付请求失败:', error);\n      return {\n        success: false,\n        error: `验证支付请求失败: ${error.message}`\n      };\n    }\n  }\n\n  /**\n   * 验证消费请求\n   * @param params 请求参数\n   * @returns 验证结果\n   */\n  async validateConsumeRequest(params: {\n    token: string,\n    merchantId: string,\n    amount: bigint,\n    seq: bigint,\n    from: string,\n    voucherId?: bigint,\n    pointToUse?: bigint\n  }): Promise<ValidationResult> {\n    try {\n      // 确保客户端已初始化\n      await this.ensureWalletConnected();\n      \n      const { token, merchantId, amount, seq, from, voucherId = 0n, pointToUse = 0n } = params;\n      \n      console.log('验证消费请求...');\n      console.log('- 商家ID:', merchantId);\n      console.log('- 代币:', token);\n      console.log('- 金额:', amount.toString());\n      console.log('- 序列号:', seq.toString());\n      console.log('- 发送方:', from);\n      \n      if (voucherId > 0n) {\n        console.log('- 代金券ID:', voucherId.toString());\n      }\n      \n      if (pointToUse > 0n) {\n        console.log('- 使用积分:', pointToUse.toString());\n      }\n      \n      // 1. 验证商家是否设置\n      let merchantRecipient: string;\n      try {\n        merchantRecipient = await this.readContract<string>(\n          this.getVaultContractAddress(),\n          UNIFIED_VAULT_ABI,\n          'merchantRecipients',\n          [merchantId]\n        );\n        \n        if (merchantRecipient === '0x0000000000000000000000000000000000000000') {\n          console.error('商家未设置');\n          return {\n            success: false,\n            error: '商家未设置'\n          };\n        }\n      } catch (error: any) {\n        console.error('检查商家设置失败:', error);\n        return {\n          success: false,\n          error: `检查商家设置失败: ${error.message}`\n        };\n      }\n      \n      // 2. 检查代币是否在白名单中\n      try {\n        const isWhitelisted = await this.readContract<boolean>(\n          this.getVaultContractAddress(),\n          UNIFIED_VAULT_ABI,\n          'tokenWhitelist',\n          [token as `0x${string}`]\n        );\n        \n        if (!isWhitelisted) {\n          console.error('代币不在白名单中');\n          return {\n            success: false,\n            error: '代币不在白名单中'\n          };\n        }\n      } catch (error: any) {\n        console.error('检查代币白名单失败:', error);\n        return {\n          success: false,\n          error: `检查代币白名单失败: ${error.message}`\n        };\n      }\n      \n      // 3. 检查金额是否大于0\n      if (amount <= 0n) {\n        console.error('金额必须大于0');\n        return {\n          success: false,\n          error: '金额必须大于0'\n        };\n      }\n      \n      // 4. 检查序列号是否已使用\n      try {\n        const isUsed = await this.readContract<boolean>(\n          this.getVaultContractAddress(),\n          UNIFIED_VAULT_ABI,\n          'usedSeq',\n          [seq]\n        );\n        \n        if (isUsed) {\n          console.error('序列号已被使用');\n          return {\n            success: false,\n            error: '序列号已被使用'\n          };\n        }\n      } catch (error: any) {\n        console.error('检查序列号失败:', error);\n        return {\n          success: false,\n          error: `检查序列号失败: ${error.message}`\n        };\n      }\n      \n      // 5. 获取商家配置\n      let merchantConfig: any;\n      try {\n        merchantConfig = await this.readContract<any>(\n          this.getVaultContractAddress(),\n          UNIFIED_VAULT_ABI,\n          'merchantConfigs',\n          [merchantId]\n        );\n      } catch (error: any) {\n        console.error('获取商家配置失败:', error);\n        return {\n          success: false,\n          error: `获取商家配置失败: ${error.message}`\n        };\n      }\n      \n      // 6. 计算折扣和促销\n      let spendAmount = amount;\n      let discountedAmount = amount;\n      let voucherReward = 0n;\n      let pointsReward = 0n;\n      let promoTierMatched = false;\n      \n      // 这里简化处理，实际上需要获取完整的促销分档信息\n      // 由于合约中的促销分档是数组，这里只能简化处理\n      if (merchantConfig.discountEnabled && amount >= merchantConfig.discountBase) {\n        spendAmount = (amount * merchantConfig.discountRate) / 100n;\n        discountedAmount = spendAmount;\n        console.log('应用折扣:', merchantConfig.discountRate.toString(), '%');\n        console.log('折扣后金额:', spendAmount.toString());\n      }\n      \n      // 7. 如果使用代金券，验证代金券\n      let voucherUsed = 0n;\n      if (voucherId !== 0n) {\n        try {\n          const voucher = await this.readContract<any>(\n            this.getVaultContractAddress(),\n            UNIFIED_VAULT_ABI,\n            'vouchers',\n            [voucherId]\n          );\n          \n          if (voucher.used) {\n            console.error('代金券已使用');\n            return {\n              success: false,\n              error: '代金券已使用'\n            };\n          }\n          \n          if (voucher.merchantId !== merchantId) {\n            console.error('代金券不属于该商家');\n            return {\n              success: false,\n              error: '代金券不属于该商家'\n            };\n          }\n          \n          const currentTimestamp = BigInt(Math.floor(Date.now() / 1000));\n          if (voucher.expireAt <= currentTimestamp) {\n            console.error('代金券已过期');\n            return {\n              success: false,\n              error: '代金券已过期'\n            };\n          }\n          \n          // 验证代金券所有者\n          const userVouchers = await this.readContract<bigint[]>(\n            this.getVaultContractAddress(),\n            UNIFIED_VAULT_ABI,\n            'userVouchers',\n            [from as `0x${string}`]\n          );\n          \n          if (!userVouchers.includes(voucherId)) {\n            console.error('不是代金券所有者');\n            return {\n              success: false,\n              error: '不是代金券所有者'\n            };\n          }\n          \n          voucherUsed = voucher.amount;\n          spendAmount = spendAmount > voucherUsed ? spendAmount - voucherUsed : 0n;\n          \n          console.log('✅ 验证通过：代金券有效');\n          console.log('- 代金券抵扣金额:', voucherUsed.toString());\n          console.log('- 抵扣后金额:', spendAmount.toString());\n        } catch (error: any) {\n          console.error('验证代金券失败:', error);\n          return {\n            success: false,\n            error: `验证代金券失败: ${error.message}`\n          };\n        }\n      }\n      \n      // 8. 验证并计算积分抵扣\n      let pointsUsed = 0n;\n      if (pointToUse > 0n) {\n        try {\n          const userPoints = await this.readContract<bigint>(\n            this.getVaultContractAddress(),\n            UNIFIED_VAULT_ABI,\n            'userPoints',\n            [from as `0x${string}`, merchantId]\n          );\n          \n          // 取用户积分和请求使用积分的较小值\n          pointsUsed = pointToUse > userPoints ? userPoints : pointToUse;\n          \n          // 如果积分大于剩余金额，则只使用等于剩余金额的积分\n          if (pointsUsed > spendAmount) {\n            pointsUsed = spendAmount;\n          }\n          \n          spendAmount -= pointsUsed;\n          \n          console.log('- 可用积分:', userPoints.toString());\n          console.log('- 使用积分:', pointsUsed.toString());\n          console.log('- 积分抵扣后金额:', spendAmount.toString());\n        } catch (error: any) {\n          console.error('验证积分失败:', error);\n          return {\n            success: false,\n            error: `验证积分失败: ${error.message}`\n          };\n        }\n      }\n      \n      // 9. 验证用户余额\n      try {\n        const userBalance = await this.readContract<bigint>(\n          this.getVaultContractAddress(),\n          UNIFIED_VAULT_ABI,\n          'userBalances',\n          [from as `0x${string}`, token as `0x${string}`]\n        );\n        \n        if (userBalance < spendAmount) {\n          console.error('余额不足');\n          console.error('- 用户余额:', userBalance.toString());\n          console.error('- 需要金额:', spendAmount.toString());\n          return {\n            success: false,\n            error: '余额不足'\n          };\n        }\n        \n        console.log('- 用户余额:', userBalance.toString());\n        console.log('- 需要金额:', spendAmount.toString());\n      } catch (error: any) {\n        console.error('检查用户余额失败:', error);\n        return {\n          success: false,\n          error: `检查用户余额失败: ${error.message}`\n        };\n      }\n      \n      // 10. 获取手续费率并计算手续费\n      try {\n        // 获取手续费率\n        // 注意：这里简化处理，实际应该调用feeRuleProvider.feePpmPerTo(recipient)\n        // 由于我们没有直接访问feeRuleProvider的方式，这里使用固定值\n        const feePpm = 10000n; // 假设费率为1%\n        \n        if (feePpm >= 1000000n) {\n          console.error('费率过高');\n          return {\n            success: false,\n            error: '费率过高'\n          };\n        }\n        \n        const feeAmount = (spendAmount * feePpm) / 1000000n;\n        const merchantAmount = spendAmount - feeAmount;\n        \n        if (merchantAmount <= 0n && feeAmount <= 0n) {\n          console.error('没有可转账的金额');\n          return {\n            success: false,\n            error: '没有可转账的金额'\n          };\n        }\n        \n        // 11. 计算奖励\n        // 这里简化处理，实际应根据商家配置计算\n        if (merchantConfig.cashbackPointEnabled && amount >= merchantConfig.cashbackPointBase) {\n          pointsReward = merchantConfig.cashbackPointAmount;\n        }\n        \n        if (merchantConfig.cashbackVoucherEnabled && amount >= merchantConfig.cashbackVoucherBase) {\n          voucherReward = merchantConfig.cashbackVoucherAmount;\n        }\n        \n        console.log('验证通过');\n        console.log('- 原始金额:', amount.toString());\n        console.log('- 折扣后金额:', discountedAmount.toString());\n        console.log('- 代金券抵扣:', voucherUsed.toString());\n        console.log('- 积分抵扣:', pointsUsed.toString());\n        console.log('- 实际扣除金额:', spendAmount.toString());\n        console.log('- 手续费率:', feePpm.toString(), 'ppm');\n        console.log('- 手续费:', feeAmount.toString());\n        console.log('- 商家到账金额:', merchantAmount.toString());\n        console.log('- 返积分:', pointsReward.toString());\n        console.log('- 返券金额:', voucherReward.toString());\n        \n        return {\n          success: true,\n          fee: feeAmount,\n          merchantAmount,\n          rewardAmount: pointsReward,\n          voucherReward,\n          discountedAmount,\n          pointsUsed,\n          voucherUsed,\n          spendAmount\n        };\n      } catch (error: any) {\n        console.error('计算手续费和奖励失败:', error);\n        return {\n          success: false,\n          error: `计算手续费和奖励失败: ${error.message}`\n        };\n      }\n    } catch (error: any) {\n      console.error('验证消费请求失败:', error);\n      return {\n        success: false,\n        error: `验证消费请求失败: ${error.message}`\n      };\n    }\n  }\n\n  /**\n   * 验证存款请求\n   * @param params 请求参数\n   * @returns 验证结果\n   */\n  async validateDepositRequest(params: {\n    token: string,\n    amount: bigint,\n    seq: bigint,\n    from: string\n  }): Promise<ValidationResult> {\n    try {\n      // 确保客户端已初始化\n      await this.ensureWalletConnected();\n      \n      const { token, amount, seq, from } = params;\n      \n      console.log('验证存款请求...');\n      console.log('- 代币:', token);\n      console.log('- 金额:', amount.toString());\n      console.log('- 序列号:', seq.toString());\n      console.log('- 发送方:', from);\n      \n      // 1. 检查代币是否在白名单中\n      try {\n        const isWhitelisted = await this.readContract<boolean>(\n          this.getVaultContractAddress(),\n          UNIFIED_VAULT_ABI,\n          'tokenWhitelist',\n          [token as `0x${string}`]\n        );\n        \n        if (!isWhitelisted) {\n          console.error('代币不在白名单中');\n          return {\n            success: false,\n            error: '代币不在白名单中'\n          };\n        }\n      } catch (error: any) {\n        console.error('检查代币白名单失败:', error);\n        return {\n          success: false,\n          error: `检查代币白名单失败: ${error.message}`\n        };\n      }\n      \n      // 2. 检查金额是否大于0\n      if (amount <= 0n) {\n        console.error('金额必须大于0');\n        return {\n          success: false,\n          error: '金额必须大于0'\n        };\n      }\n      \n      // 3. 检查用户是否有足够的代币余额和授权\n      try {\n        // 获取代币余额\n        const balance = await this.readContract<bigint>(\n          token as `0x${string}`,\n          ERC20_ABI,\n          'balanceOf',\n          [from as `0x${string}`]\n        );\n        \n        if (balance < amount) {\n          console.error('代币余额不足');\n          return {\n            success: false,\n            error: '代币余额不足'\n          };\n        }\n        \n        // 检查授权额度\n        const allowance = await this.readContract<bigint>(\n          token as `0x${string}`,\n          ERC20_ABI,\n          'allowance',\n          [from as `0x${string}`, this.getVaultContractAddress() as `0x${string}`]\n        );\n        \n        if (allowance < amount) {\n          console.error('代币授权不足');\n          return {\n            success: false,\n            error: '代币授权不足'\n          };\n        }\n      } catch (error: any) {\n        console.error('检查代币余额和授权失败:', error);\n        return {\n          success: false,\n          error: `检查代币余额和授权失败: ${error.message}`\n        };\n      }\n      \n      console.log('验证通过');\n      \n      return {\n        success: true\n      };\n    } catch (error: any) {\n      console.error('验证存款请求失败:', error);\n      return {\n        success: false,\n        error: `验证存款请求失败: ${error.message}`\n      };\n    }\n  }\n\n  /**\n   * 验证提款请求\n   * @param params 请求参数\n   * @returns 验证结果\n   */\n  async validateWithdrawRequest(params: {\n    token: string,\n    amount: bigint,\n    seq: bigint,\n    from: string\n  }): Promise<ValidationResult> {\n    try {\n      // 确保客户端已初始化\n      await this.ensureWalletConnected();\n      \n      const { token, amount, seq, from } = params;\n      \n      console.log('验证提款请求...');\n      console.log('- 代币:', token);\n      console.log('- 金额:', amount.toString());\n      console.log('- 序列号:', seq.toString());\n      console.log('- 发送方:', from);\n      \n      // 1. 检查用户余额\n      try {\n        const userBalance = await this.readContract<bigint>(\n          this.getVaultContractAddress(),\n          UNIFIED_VAULT_ABI,\n          'userBalances',\n          [from as `0x${string}`, token as `0x${string}`]\n        );\n        \n        if (userBalance < amount) {\n          console.error('余额不足');\n          console.error('- 用户余额:', userBalance.toString());\n          console.error('- 提款金额:', amount.toString());\n          return {\n            success: false,\n            error: '余额不足'\n          };\n        }\n        \n        console.log('- 用户余额:', userBalance.toString());\n        console.log('- 提款金额:', amount.toString());\n      } catch (error: any) {\n        console.error('检查用户余额失败:', error);\n        return {\n          success: false,\n          error: `检查用户余额失败: ${error.message}`\n        };\n      }\n      \n      console.log('验证通过');\n      \n      return {\n        success: true\n      };\n    } catch (error: any) {\n      console.error('验证提款请求失败:', error);\n      return {\n        success: false,\n        error: `验证提款请求失败: ${error.message}`\n      };\n    }\n  }\n\n  /**\n   * 编码支付调用数据\n   * @param token 代币地址\n   * @param to 接收方地址\n   * @param amount 金额\n   * @param seq 序列号\n   * @returns 编码后的调用数据\n   */\n  private encodePayCallData(\n    token: string,\n    to: string,\n    amount: bigint,\n    seq: bigint\n  ): `0x${string}` {\n    return encodeFunctionData({\n      abi: PAYMENT_CONTRACT_ABI,\n      functionName: 'pay',\n      args: [\n        token as `0x${string}`,\n        to as `0x${string}`,\n        amount,\n        seq\n      ]\n    });\n  }\n\n  /**\n   * 编码消费调用数据\n   * @param merchantId 商家ID\n   * @param token 代币地址\n   * @param amount 金额\n   * @param voucherId 代金券ID\n   * @param pointToUse 使用的积分\n   * @param seq 序列号\n   * @returns 编码后的调用数据\n   */\n  private encodeConsumeCallData(\n    merchantId: string,\n    token: string,\n    amount: bigint,\n    voucherId: bigint,\n    pointToUse: bigint,\n    seq: bigint\n  ): `0x${string}` {\n    return encodeFunctionData({\n      abi: UNIFIED_VAULT_ABI,\n      functionName: 'consume',\n      args: [\n        merchantId,\n        token as `0x${string}`,\n        amount,\n        voucherId,\n        pointToUse,\n        seq\n      ]\n    });\n  }\n\n  /**\n   * 编码存款调用数据\n   * @param token 代币地址\n   * @param amount 金额\n   * @returns 编码后的调用数据\n   */\n  private encodeDepositCallData(\n    token: string,\n    amount: bigint\n  ): `0x${string}` {\n    return encodeFunctionData({\n      abi: UNIFIED_VAULT_ABI,\n      functionName: 'deposit',\n      args: [\n        token as `0x${string}`,\n        amount\n      ]\n    });\n  }\n\n  /**\n   * 编码提款调用数据\n   * @param token 代币地址\n   * @param amount 金额\n   * @returns 编码后的调用数据\n   */\n  private encodeWithdrawCallData(\n    token: string,\n    amount: bigint\n  ): `0x${string}` {\n    return encodeFunctionData({\n      abi: UNIFIED_VAULT_ABI,\n      functionName: 'withdraw',\n      args: [\n        token as `0x${string}`,\n        amount\n      ]\n    });\n  }\n\n  /**\n   * 获取nonce\n   * @param address 地址\n   * @param options 选项\n   * @returns nonce\n   */\n  async getNonce(address: string, options?: { timeout?: number }): Promise<bigint> {\n    try {\n      return await this.readContract<bigint>(\n        this.forwarderAddress,\n        ERC2771_FORWARDER_ABI,\n        'nonces',\n        [address as `0x${string}`],\n        options\n      );\n    } catch (error: any) {\n      console.error('获取nonce失败:', error);\n      throw new Error(`获取nonce失败: ${error.message}`);\n    }\n  }\n\n  /**\n   * 解析请求数据并根据操作类型进行验证\n   * @param type 操作类型\n   * @param request 简化的请求数据\n   * @returns 验证结果\n   */\n  async validateSimpleRequest(\n    type: OperationType,\n    request: SimpleRelayerRequest\n  ): Promise<ValidationResult> {\n    try {\n      console.log(`解析并验证 ${type} 请求...`);\n      console.log('- 调用数据:', request.data);\n      \n      let validationResult: ValidationResult;\n      \n      // 根据操作类型解析函数调用数据\n      if (type === OperationType.Payment) {\n        const payParams = this.decodePaymentData(request.data);\n        validationResult = await this.validatePaymentRequest({\n          token: payParams.token,\n          to: payParams.to,\n          amount: payParams.amount,\n          gasFee: payParams.gasFee || 0n,\n          seq: payParams.seq,\n          from: request.from\n        });\n      } \n      else if (type === OperationType.Consume) {\n        const consumeParams = this.decodeConsumeData(request.data);\n        validationResult = await this.validateConsumeRequest({\n          token: consumeParams.token,\n          merchantId: consumeParams.merchantId,\n          amount: consumeParams.amount,\n          seq: consumeParams.seq,\n          from: request.from,\n          voucherId: consumeParams.voucherId,\n          pointToUse: consumeParams.pointToUse\n        });\n      }\n      else if (type === OperationType.Deposit) {\n        const depositParams = this.decodeDepositData(request.data);\n        validationResult = await this.validateDepositRequest({\n          token: depositParams.token,\n          amount: depositParams.amount,\n          seq: 0n, // deposit没有seq参数\n          from: request.from\n        });\n      }\n      else if (type === OperationType.Withdraw) {\n        const withdrawParams = this.decodeWithdrawData(request.data);\n        validationResult = await this.validateWithdrawRequest({\n          token: withdrawParams.token,\n          amount: withdrawParams.amount,\n          seq: 0n, // withdraw没有seq参数\n          from: request.from\n        });\n      }\n      else {\n        throw new Error(`不支持的操作类型: ${type}`);\n      }\n      \n      return validationResult;\n    } catch (error: any) {\n      console.error('解析和验证请求失败:', error);\n      return {\n        success: false,\n        error: `解析和验证请求失败: ${error.message}`\n      };\n    }\n  }\n  \n  /**\n   * 使用简化接口发送请求\n   * @param type 操作类型\n   * @param request 简化的请求数据\n   * @returns 发送结果\n   */\n  async sendSimpleRequest(\n    type: OperationType,\n    request: SimpleRelayerRequest\n  ): Promise<{\n    success: boolean,\n    txHash?: string,\n    error?: string\n  }> {\n    try {\n      // 确保钱包已连接\n      await this.ensureWalletConnected();\n      \n      // 转换参数类型\n      const forwardRequest = {\n        from: request.from as `0x${string}`,\n        to: request.to as `0x${string}`,\n        value: BigInt(request.value || '0'),\n        gas: BigInt(request.gas || '500000'),\n        deadline: BigInt(request.deadline),\n        data: request.data as `0x${string}`,\n        signature: request.signature as `0x${string}`\n      };\n      \n      console.log('发送转发请求...');\n      console.log('- 类型:', type);\n      console.log('- 发送方:', request.from);\n      console.log('- 目标合约:', request.to);\n      console.log('- 截止时间:', request.deadline);\n      \n      // 发送交易\n      const txHash = await this.writeContract(\n        this.forwarderAddress,\n        ERC2771_FORWARDER_ABI,\n        'execute',\n        [forwardRequest]\n      );\n      \n      console.log('交易已发送，哈希:', txHash);\n      \n      return {\n        success: true,\n        txHash\n      };\n    } catch (error: any) {\n      console.error('发送请求失败:', error);\n      return {\n        success: false,\n        error: `发送请求失败: ${error.message}`\n      };\n    }\n  }\n\n  /**\n   * 解析支付函数调用数据\n   * @param data 调用数据\n   * @returns 解析后的参数\n   */\n  private decodePaymentData(data: string): {\n    token: string,\n    to: string,\n    amount: bigint,\n    gasFee?: bigint,\n    seq: bigint\n  } {\n    try {\n      // 检查函数选择器\n      const functionSelector = data.slice(0, 10);\n      \n      if (functionSelector === '0xa4b072d0') { // pay 函数选择器\n        console.log('检测到 pay 函数调用，解析参数...');\n        \n        // 尝试使用viem的解码功能\n        try {\n          const decoded = decodeFunctionData({\n            abi: PAYMENT_CONTRACT_ABI,\n            data: data as `0x${string}`\n          });\n          \n          if (decoded.functionName === 'pay' && decoded.args && Array.isArray(decoded.args)) {\n            const token = decoded.args[0] !== undefined ? String(decoded.args[0]) : '';\n            const to = decoded.args[1] !== undefined ? String(decoded.args[1]) : '';\n            const amount = decoded.args[2] !== undefined ? BigInt(Number(decoded.args[2])) : 0n;\n            const seq = decoded.args[3] !== undefined ? BigInt(Number(decoded.args[3])) : 0n;\n            \n            return { token, to, amount, seq };\n          }\n        } catch (decodeError) {\n          console.log('使用viem解码失败，尝试手动解析:', decodeError);\n        }\n        \n        // 手动解析\n        const payFunctionArguments = data.slice(10);\n        const token = '0x' + payFunctionArguments.slice(0, 64).slice(-40);\n        const to = '0x' + payFunctionArguments.slice(64, 128).slice(-40);\n        const amount = BigInt('0x' + payFunctionArguments.slice(128, 192));\n        const seq = BigInt('0x' + payFunctionArguments.slice(192, 256));\n        \n        return { token, to, amount, seq };\n      } else {\n        throw new Error(`未知的函数选择器: ${functionSelector}`);\n      }\n    } catch (error: any) {\n      console.error('解析支付数据失败:', error);\n      throw new Error(`解析支付数据失败: ${error.message}`);\n    }\n  }\n  \n  /**\n   * 解析消费函数调用数据\n   * @param data 调用数据\n   * @returns 解析后的参数\n   */\n  private decodeConsumeData(data: string): {\n    merchantId: string,\n    token: string,\n    amount: bigint,\n    voucherId: bigint,\n    pointToUse: bigint,\n    seq: bigint\n  } {\n    try {\n      // 检查函数选择器\n      const functionSelector = data.slice(0, 10);\n      \n      if (functionSelector === '0x5d495aea') { // consume 函数选择器\n        console.log('检测到 consume 函数调用，解析参数...');\n        \n        // 尝试使用viem的解码功能\n        try {\n          const decoded = decodeFunctionData({\n            abi: UNIFIED_VAULT_ABI,\n            data: data as `0x${string}`\n          });\n          \n          if (decoded.functionName === 'consume' && decoded.args && Array.isArray(decoded.args)) {\n            const merchantId = decoded.args[0] !== undefined ? String(decoded.args[0]) : '';\n            const token = decoded.args[1] !== undefined ? String(decoded.args[1]) : '';\n            const amount = decoded.args[2] !== undefined ? BigInt(Number(decoded.args[2])) : 0n;\n            const voucherId = decoded.args[3] !== undefined ? BigInt(Number(decoded.args[3])) : 0n;\n            const pointToUse = decoded.args[4] !== undefined ? BigInt(Number(decoded.args[4])) : 0n;\n            const seq = decoded.args[5] !== undefined ? BigInt(Number(decoded.args[5])) : 0n;\n            \n            return { merchantId, token, amount, voucherId, pointToUse, seq };\n          }\n        } catch (decodeError) {\n          console.log('使用viem解码失败，尝试手动解析:', decodeError);\n        }\n        \n        // 手动解析\n        const consumeFunctionArguments = data.slice(10);\n        const merchantId = '0x' + consumeFunctionArguments.slice(0, 64).slice(-40);\n        const token = '0x' + consumeFunctionArguments.slice(64, 128).slice(-40);\n        const amount = BigInt('0x' + consumeFunctionArguments.slice(128, 192));\n        const voucherId = BigInt('0x' + consumeFunctionArguments.slice(192, 256));\n        const pointToUse = BigInt('0x' + consumeFunctionArguments.slice(256, 320));\n        const seq = BigInt('0x' + consumeFunctionArguments.slice(320, 384));\n        \n        return { merchantId, token, amount, voucherId, pointToUse, seq };\n      } else {\n        throw new Error(`未知的函数选择器: ${functionSelector}`);\n      }\n    } catch (error: any) {\n      console.error('解析消费数据失败:', error);\n      throw new Error(`解析消费数据失败: ${error.message}`);\n    }\n  }\n  \n  /**\n   * 解析存款函数调用数据\n   * @param data 调用数据\n   * @returns 解析后的参数\n   */\n  private decodeDepositData(data: string): {\n    token: string,\n    amount: bigint\n  } {\n    try {\n      // 检查函数选择器\n      const functionSelector = data.slice(0, 10);\n      \n      if (functionSelector === '0x47e7ef24') { // deposit 函数选择器\n        console.log('检测到 deposit 函数调用，解析参数...');\n        \n        // 尝试使用viem的解码功能\n        try {\n          const decoded = decodeFunctionData({\n            abi: UNIFIED_VAULT_ABI,\n            data: data as `0x${string}`\n          });\n          \n          if (decoded.functionName === 'deposit' && decoded.args && Array.isArray(decoded.args)) {\n            const token = decoded.args[0] !== undefined ? String(decoded.args[0]) : '';\n            const amount = decoded.args[1] !== undefined ? BigInt(Number(decoded.args[1])) : 0n;\n            \n            return { token, amount };\n          }\n        } catch (decodeError) {\n          console.log('使用viem解码失败，尝试手动解析:', decodeError);\n        }\n        \n        // 手动解析\n        const depositFunctionArguments = data.slice(10);\n        const token = '0x' + depositFunctionArguments.slice(0, 64).slice(-40);\n        const amount = BigInt('0x' + depositFunctionArguments.slice(64, 128));\n        \n        return { token, amount };\n      } else {\n        throw new Error(`未知的函数选择器: ${functionSelector}`);\n      }\n    } catch (error: any) {\n      console.error('解析存款数据失败:', error);\n      throw new Error(`解析存款数据失败: ${error.message}`);\n    }\n  }\n  \n  /**\n   * 解析提款函数调用数据\n   * @param data 调用数据\n   * @returns 解析后的参数\n   */\n  private decodeWithdrawData(data: string): {\n    token: string,\n    amount: bigint\n  } {\n    try {\n      // 检查函数选择器\n      const functionSelector = data.slice(0, 10);\n      \n      if (functionSelector === '0x441a3e70') { // withdraw 函数选择器\n        console.log('检测到 withdraw 函数调用，解析参数...');\n        \n        // 尝试使用viem的解码功能\n        try {\n          const decoded = decodeFunctionData({\n            abi: UNIFIED_VAULT_ABI,\n            data: data as `0x${string}`\n          });\n          \n          if (decoded.functionName === 'withdraw' && decoded.args && Array.isArray(decoded.args)) {\n            const token = decoded.args[0] !== undefined ? String(decoded.args[0]) : '';\n            const amount = decoded.args[1] !== undefined ? BigInt(Number(decoded.args[1])) : 0n;\n            \n            return { token, amount };\n          }\n        } catch (decodeError) {\n          console.log('使用viem解码失败，尝试手动解析:', decodeError);\n        }\n        \n        // 手动解析\n        const withdrawFunctionArguments = data.slice(10);\n        const token = '0x' + withdrawFunctionArguments.slice(0, 64).slice(-40);\n        const amount = BigInt('0x' + withdrawFunctionArguments.slice(64, 128));\n        \n        return { token, amount };\n      } else {\n        throw new Error(`未知的函数选择器: ${functionSelector}`);\n      }\n    } catch (error: any) {\n      console.error('解析提款数据失败:', error);\n      throw new Error(`解析提款数据失败: ${error.message}`);\n    }\n  }\n} "],"names":["UNIFIED_VAULT_ABI","inputs","internalType","name","type","stateMutability","anonymous","indexed","outputs","PAYMENT_CONTRACT_ABI","ERC2771_FORWARDER_ABI","components","keccak256","EIP712_DOMAIN_TYPE","FORWARD_REQUEST_TYPES","ForwardRequest","ERC20_ABI","isBrowser","window","WalletService","constructor","config","this","initializeClients","timeoutMs","console","log","Error","provider","ethereum","walletLinkExtension","walletConnect","coinbaseWalletExtension","error","withTimeout","promise","ms","errorMessage","Promise","race","_","reject","setTimeout","chainIdHex","request","method","chainId","parseInt","wallet","createWalletClient","transport","custom","publicClient","createPublicClient","message","code","data","connectWallet","address","requestAddresses","account","isConnected","getConnectedAddress","getChainId","getWallet","getPublicClient","getAccount","ensureConnected","ensureInitialized","BlockchainService","delegateConfig","rpcUrl","paymentContractAddress","vaultContractAddress","forwarderAddress","super","customRpcClient","getWalletClient","ensureWalletConnected","ensureTokenAllowance","tokenAddress","spender","amount","currentAllowance","readContract","writeContract","getNonce","options","getForwarderAddress","sendTransaction","to","value","toString","transaction","chain","id","undefined","hash","waitForTransactionReceipt","status","abi","functionName","args","timeout","result","getCustomRpcClient","getPaymentContractAddress","addr","getVaultContractAddress","http","getEstimateClient","TokenOperations","blockchainService","approveToken","checkAllowance","owner","allowance","approveHash","getTokenBalance","targetOwner","balance","DirectPayment","tokenOperations","pay","seq","BigInt","Math","floor","Date","now","encodePayCallData","token","payData","encodeFunctionData","SigningService","verifyTypedDataSignature","signature","expectedSigner","domain","version","verifyingContract","signer","recoverTypedDataAddress","types","primaryType","valid","toLowerCase","signTypedData","nonce","from","safeRequest","gas","deadline","viemError","warn","typedDataForWallet","EIP712Domain","params","JSON","stringify","v4Error","RelayedPayment","directPayment","signingService","preparePayment","payCallData","deadlineValue","userNonce","estimateContractGas","signError","VaultOperations","stringToBytes32","str","startsWith","length","hex","stringToHex","pad","size","validateTokenWhitelist","validateAmount","validateMerchantRecipient","merchantId","merchantIdBytes32","validateSeq","deposit","withdraw","getUserBalance","consumeDirect","voucherId","pointToUse","idx","recipient","userAddress","validateConsumeParams","validateVoucher","getMyVouchers","ids","includes","voucher","getVoucher","used","currentTime","expireAt","transferMerchantBalance","fromMerchantId","toMerchantId","fromMerchantIdBytes32","toMerchantIdBytes32","prepareRelayedConsume","consumeCallData","prepareRelayedDeposit","depositCallData","prepareRelayedWithdraw","withdrawCallData","getUserPoints","points","vouchers","merchantIds","tokens","amounts","expireAts","getFeeReceiver","feeReceiver","getFeeRuleProvider","feeRuleProvider","getTrustedForwarder","trustedForwarder","isTrustedForwarder","isTrusted","getOwner","getPromoTier","minAmount","discountRate","voucherAmount","pointAmount","startTime","endTime","voucherExpirePeriod","enabled","promoTier","Number","MerchantConfigManager","setPromoTier","Buffer","padEnd","generateMerchantId","merchantName","trim","merchantIdHex","setMerchantOperator","operator","txHash","success","checkMerchantOperator","operatorAddress","hasPermission","TransactionService","vaultOperations","relayedPayment","userPayDirect","prepareRelayedPayment","depositToVault","withdrawFromVault","consumeFromVault","getSpecificUserPoints","Web3Delegate","vault","merchantConfigManager","transactionService","OperationType","RelayerService","consumeContractAddress","validatePaymentRequest","gasFee","maxAmount","minUnit","feePpm","specificFeePpm","fee","toAmount","validateConsumeRequest","merchantRecipient","merchantConfig","spendAmount","discountedAmount","voucherReward","pointsReward","discountEnabled","discountBase","voucherUsed","currentTimestamp","pointsUsed","userPoints","userBalance","feeAmount","merchantAmount","cashbackPointEnabled","cashbackPointBase","cashbackPointAmount","cashbackVoucherEnabled","cashbackVoucherBase","cashbackVoucherAmount","rewardAmount","validateDepositRequest","validateWithdrawRequest","encodeConsumeCallData","encodeDepositCallData","encodeWithdrawCallData","validateSimpleRequest","validationResult","Payment","payParams","decodePaymentData","Consume","consumeParams","decodeConsumeData","Deposit","depositParams","decodeDepositData","Withdraw","withdrawParams","decodeWithdrawData","sendSimpleRequest","forwardRequest","functionSelector","slice","decoded","decodeFunctionData","Array","isArray","String","decodeError","payFunctionArguments","consumeFunctionArguments","depositFunctionArguments","withdrawFunctionArguments"],"mappings":"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"}