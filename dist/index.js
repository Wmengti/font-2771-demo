"use strict";var e=require("viem");const t="0xA31a2dE4845e4fe869067618F2ABf0Cad279472F",o=[{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"gasFee",type:"uint256"},{internalType:"uint256",name:"seq",type:"uint256"}],name:"pay",outputs:[],stateMutability:"nonpayable",type:"function"}],n="0x9EF153E07BAFE741aAc34bE9AA01403D7aEc6d63";e.keccak256("EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"),e.keccak256("ForwardRequest(address from,address to,uint256 value,uint256 gas,uint256 nonce,uint48 deadline,bytes data)");const a=[{name:"name",type:"string"},{name:"version",type:"string"},{name:"chainId",type:"uint256"},{name:"verifyingContract",type:"address"}],s={ForwardRequest:[{name:"from",type:"address"},{name:"to",type:"address"},{name:"value",type:"uint256"},{name:"gas",type:"uint256"},{name:"nonce",type:"uint256"},{name:"deadline",type:"uint48"},{name:"data",type:"bytes"}]},r=[{inputs:[{type:"address",name:"to"},{type:"uint256",name:"amount"}],name:"transfer",outputs:[{type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{type:"address",name:"owner"},{type:"address",name:"spender"}],name:"allowance",outputs:[{type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{type:"address",name:"spender"},{type:"uint256",name:"amount"}],name:"approve",outputs:[{type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{type:"address",name:"account"}],name:"balanceOf",outputs:[{type:"uint256"}],stateMutability:"view",type:"function"}],i="undefined"!=typeof window,c=()=>i?window.ethereum:null;async function l(t,o,r,i,l){console.log("开始签名过程，参数:"),console.log("- 账户地址:",o.address),console.log("- 链 ID:",i),console.log("- Nonce:",l.toString()),console.log("- 请求数据:",r);const d={name:"MetaTxForwarder",version:"1",chainId:i,verifyingContract:n},u={from:r.from,to:r.to,value:r.value.toString(),gas:r.gas.toString(),nonce:r.nonce.toString(),deadline:r.deadline.toString(),data:r.data};try{if(t.signTypedData){console.log("使用 viem 钱包客户端签名...");const e=await t.signTypedData({account:o,domain:d,types:{...s},primaryType:"ForwardRequest",message:u});console.log("viem 签名成功:",e)}console.log("回退到 window.ethereum 直接签名...");const l=c();if(!l)throw new Error("MetaMask 未安装或不可用");const g={domain:{...d,chainId:d.chainId.toString()},message:u,primaryType:"ForwardRequest",types:{EIP712Domain:a,...s}};console.log("调用 eth_signTypedData_v4...");const h=await l.request({method:"eth_signTypedData_v4",params:[o.address,JSON.stringify(g)]}),{valid:p,signer:m}=await async function({chainId:t,types:o=s,message:a,signature:r,expectedSigner:i}){const c={name:"MetaTxForwarder",version:"1",chainId:t,verifyingContract:n},l=await e.recoverTypedDataAddress({domain:c,types:o,primaryType:"ForwardRequest",message:a,signature:r}),d=l.toLowerCase()===i.toLowerCase();return{valid:d,signer:l}}({chainId:i,message:r,signature:h,expectedSigner:r.from});return console.log("签名验证：",p,m),console.log("MetaMask 签名成功:",h),h}catch(e){throw console.error("签名过程中出错:",e),console.error("错误详情:",{message:e.message,code:e.code,data:e.data}),new Error(`签名失败: ${e.message}`)}}exports.PaymentDelegate=class{constructor(e){this.config=e}async initializeClients(){if(console.log("开始初始化客户端..."),!this.config.useMetaMask)throw console.warn("只支持 MetaMask，请设置 useMetaMask 为 true"),new Error("Currently only MetaMask is supported");{if(console.log("尝试使用 MetaMask..."),!i)throw new Error("MetaMask只能在浏览器环境中使用");const t=c();if(!t)throw console.error("MetaMask 未安装"),new Error("MetaMask not found. Please install MetaMask extension.");console.log("检测到 MetaMask，创建钱包客户端...");try{const o=await t.request({method:"eth_chainId"});this.chainId=parseInt(o,16),console.log("从 MetaMask 获取到链 ID:",this.chainId),this.wallet=e.createWalletClient({transport:e.custom(t)}),console.log("钱包客户端创建完成"),this.publicClient=e.createPublicClient({transport:e.custom(t)}),console.log("公共客户端创建完成")}catch(e){throw console.error("初始化客户端失败:",e),console.error("错误详情:",{message:e.message,code:e.code,data:e.data}),new Error(`初始化客户端失败: ${e.message}`)}}}async connectWallet(){if(!this.config.useMetaMask)throw new Error("MetaMask is required");this.wallet&&this.publicClient||await this.initializeClients();try{console.log("请求连接钱包...");const[e]=await this.wallet.requestAddresses();console.log("获取到钱包地址:",e),this.account={address:e,type:"json-rpc"};try{const e=await c().request({method:"eth_chainId"});this.chainId=parseInt(e,16),console.log("连接钱包后获取链 ID:",this.chainId)}catch(e){console.warn("获取链 ID 失败:",e),this.chainId=1,console.warn("使用默认链 ID:",this.chainId)}return console.log("钱包连接完成，地址:",e),console.log("当前链 ID:",this.chainId),e}catch(e){throw console.error("连接钱包失败:",e),new Error(`连接钱包失败: ${e.message}`)}}isConnected(){return!!this.account}getConnectedAddress(){return this.account?.address}getChainId(){return this.chainId}encodePayCallData(t,n,a,s=0n,r=0n){const i=e.encodeFunctionData({abi:o,functionName:"pay",args:[t,n,a,s,r]});return console.log("编码 pay 调用参数:"),console.log("- token:",t),console.log("- to:",n),console.log("- amount:",a.toString()),console.log("- gasFee:",s.toString()),console.log("- seq:",r.toString()),i}async ensureTokenAllowance(e,t,o,n){const a=await this.publicClient.readContract({address:e,abi:r,functionName:"allowance",args:[t,o]});if(console.log(`当前allowance: ${a} 需要: ${n}`),a>=n)return console.log("授权额度充足"),!0;console.log("授权额度不足，发起approve...");const s=await this.wallet.writeContract({account:this.account,chain:this.chainId?{id:this.chainId}:void 0,address:e,abi:r,functionName:"approve",args:[o,n]});console.log("等待approve确认...");if("success"!==(await this.publicClient.waitForTransactionReceipt({hash:s})).status)throw new Error("ERC20 approve 失败！");return console.log("approve成功，继续metaTx流程"),!0}async processTransfer(e){try{if(console.log("开始处理转账..."),!(this.wallet&&void 0!==this.chainId&&this.account||(console.log("钱包未初始化或未连接，尝试初始化和连接..."),this.wallet&&this.publicClient||(console.log("初始化客户端..."),await this.initializeClients()),this.account||(console.log("连接钱包..."),await this.connectWallet()),this.wallet&&void 0!==this.chainId&&this.account)))throw new Error("无法初始化或连接钱包");console.log("钱包状态: 已初始化"),console.log("钱包地址:",this.account.address),console.log("链ID:",this.chainId),e.tokenAddress&&await this.ensureTokenAllowance(e.tokenAddress,this.account.address,t,e.amount);const o=e.seq||BigInt(Math.floor(Date.now()/1e3));console.log("使用序列号 seq:",o.toString());const n=e.gasFee||0n;let a;if(console.log("使用 gasFee:",n.toString()),e.tokenAddress)a=this.encodePayCallData(e.tokenAddress,e.to,e.amount,n,o);else{const t="0x0000000000000000000000000000000000000000";a=this.encodePayCallData(t,e.to,e.amount,n,o)}const s=Math.floor(Date.now()/1e3)+36e3,r=await this.getNonce(this.account.address),i={from:this.account.address,to:t,value:e.tokenAddress?"0":e.amount.toString(),gas:"3000000",nonce:r.toString(),deadline:s.toString(),data:a};if(console.log("构建的请求数据:",i),this.wallet&&void 0!==this.chainId)try{if(console.log("准备进行 EIP-712 签名..."),console.log("钱包状态:",this.wallet?"已初始化":"未初始化"),console.log("账户状态:",this.account?"已连接":"未连接"),console.log("链ID:",this.chainId),c()&&c().isMetaMask){console.log("MetaMask 已安装");const e=await c().request({method:"eth_accounts"});console.log("MetaMask 连接的账户:",e),e&&0!==e.length||(console.warn("MetaMask 未连接任何账户，尝试请求连接..."),await c().request({method:"eth_requestAccounts"}))}const t=await l(this.wallet,this.account,i,this.chainId,r);console.log("生成的签名:",t);const a={token:e.tokenAddress||"0x0000000000000000000000000000000000000000",to:e.to,amount:e.amount.toString(),gasFee:n.toString(),seq:o.toString(),payer:this.account.address};return{...i,signature:t,payParams:a}}catch(t){console.error("签名失败:",t),console.error("签名错误详情:",{message:t.message,code:t.code,data:t.data,stack:t.stack});let a="签名请求被拒绝或发生错误";4001===t.code||t.message&&t.message.includes("user rejected")?a="用户拒绝了签名请求":t.message&&(a=`签名错误: ${t.message}`);const s={token:e.tokenAddress||"0x0000000000000000000000000000000000000000",to:e.to,amount:e.amount.toString(),gasFee:n.toString(),seq:o.toString(),payer:this.account.address};return{...i,payParams:s,error:a,rawError:{message:t.message,code:t.code}}}const d={token:e.tokenAddress||"0x0000000000000000000000000000000000000000",to:e.to,amount:e.amount.toString(),gasFee:n.toString(),seq:o.toString(),payer:this.account.address};return{...i,payParams:d}}catch(e){throw console.error("处理转账失败:",e),new Error(`处理转账失败: ${e.message}`)}}async getNonce(e,t){if(!this.publicClient)throw new Error("Public client not initialized");const o=t?.timeout??1e4;try{return await Promise.race([this.publicClient.readContract({address:n,abi:[{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"nonces",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"}],functionName:"nonces",args:[e]}),new Promise(((e,t)=>setTimeout((()=>t(new Error("TimeoutError: readContract timeout"))),o)))])}catch(e){throw e}}};
//# sourceMappingURL=index.js.map
