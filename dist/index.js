"use strict";var e=require("viem");const t=[{inputs:[{internalType:"address",name:"_trustedForwarder",type:"address"},{internalType:"address",name:"_feeReceiver",type:"address"},{internalType:"address",name:"_feeRuleProvider",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"OwnableInvalidOwner",type:"error"},{inputs:[{internalType:"address",name:"account",type:"address"}],name:"OwnableUnauthorizedAccount",type:"error"},{inputs:[{internalType:"address",name:"token",type:"address"}],name:"SafeERC20FailedOperation",type:"error"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"user",type:"address"},{indexed:!0,internalType:"bytes32",name:"merchantId",type:"bytes32"},{indexed:!0,internalType:"address",name:"token",type:"address"},{indexed:!1,internalType:"uint256",name:"originalAmount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"discountedAmount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"spendAmount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"merchantAmount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"pointsUsed",type:"uint256"},{indexed:!1,internalType:"uint256",name:"voucherUsed",type:"uint256"},{indexed:!1,internalType:"uint256",name:"pointsReward",type:"uint256"},{indexed:!1,internalType:"uint256",name:"voucherReward",type:"uint256"},{indexed:!1,internalType:"uint256",name:"feePaid",type:"uint256"},{indexed:!1,internalType:"address",name:"merchantRecipient",type:"address"},{indexed:!1,internalType:"address",name:"feeReceiver",type:"address"},{indexed:!1,internalType:"uint256",name:"seq",type:"uint256"}],name:"Consumed",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"user",type:"address"},{indexed:!0,internalType:"bytes32",name:"merchantId",type:"bytes32"},{indexed:!0,internalType:"address",name:"token",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Deposit",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"merchantId",type:"bytes32"},{indexed:!0,internalType:"address",name:"operator",type:"address"}],name:"MerchantOperatorSet",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"bytes32",name:"merchantId",type:"bytes32"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"PointsGranted",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"merchantId",type:"bytes32"},{indexed:!1,internalType:"uint256",name:"idx",type:"uint256"},{indexed:!1,internalType:"uint256",name:"minAmount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"discountRate",type:"uint256"},{indexed:!1,internalType:"uint256",name:"voucherAmount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"pointAmount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"startTime",type:"uint256"},{indexed:!1,internalType:"uint256",name:"endTime",type:"uint256"},{indexed:!1,internalType:"uint256",name:"voucherExpirePeriod",type:"uint256"},{indexed:!1,internalType:"bool",name:"enabled",type:"bool"}],name:"PromoTierSet",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"token",type:"address"},{indexed:!1,internalType:"bool",name:"status",type:"bool"}],name:"TokenWhitelistChanged",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"user",type:"address"},{indexed:!0,internalType:"bytes32",name:"fromMerchantId",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"toMerchantId",type:"bytes32"},{indexed:!1,internalType:"address",name:"token",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"TransferMerchantBalance",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"voucherId",type:"uint256"},{indexed:!1,internalType:"bytes32",name:"merchantId",type:"bytes32"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"expireAt",type:"uint256"}],name:"VoucherGranted",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"user",type:"address"},{indexed:!0,internalType:"bytes32",name:"merchantId",type:"bytes32"},{indexed:!0,internalType:"address",name:"token",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Withdraw",type:"event"},{inputs:[{internalType:"bytes32",name:"merchantId",type:"bytes32"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"voucherId",type:"uint256"},{internalType:"uint256",name:"pointToUse",type:"uint256"},{internalType:"uint256",name:"seq",type:"uint256"},{internalType:"uint256",name:"idx",type:"uint256"},{internalType:"address",name:"recipient",type:"address"}],name:"consume",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"merchantId",type:"bytes32"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"deposit",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"feeReceiver",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"feeRuleProvider",outputs:[{internalType:"contract IFeeRuleProvider",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"merchantId",type:"bytes32"},{internalType:"uint256",name:"idx",type:"uint256"}],name:"getPromoTier",outputs:[{internalType:"uint256",name:"_minAmount",type:"uint256"},{internalType:"uint256",name:"discountRate",type:"uint256"},{internalType:"uint256",name:"voucherAmount",type:"uint256"},{internalType:"uint256",name:"pointAmount",type:"uint256"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"uint256",name:"voucherExpirePeriod",type:"uint256"},{internalType:"bool",name:"enabled",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"user",type:"address"},{internalType:"bytes32",name:"merchantId",type:"bytes32"},{internalType:"address",name:"token",type:"address"}],name:"getUserBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"user",type:"address"},{internalType:"bytes32",name:"merchantId",type:"bytes32"}],name:"getUserPoints",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"vid",type:"uint256"}],name:"getVoucher",outputs:[{internalType:"bytes32",name:"merchantId",type:"bytes32"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"bool",name:"used",type:"bool"},{internalType:"uint256",name:"expireAt",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"forwarder",type:"address"}],name:"isTrustedForwarder",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"",type:"bytes32"}],name:"merchantOperator",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"nextTierIndex",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"nextVoucherId",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"merchantId",type:"bytes32"}],name:"removeMerchantOperator",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"merchantId",type:"bytes32"},{internalType:"address",name:"operator",type:"address"}],name:"setMerchantOperator",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"merchantId",type:"bytes32"},{internalType:"uint256",name:"idx",type:"uint256"},{internalType:"uint256",name:"minAmount",type:"uint256"},{internalType:"uint256",name:"discountRate",type:"uint256"},{internalType:"uint256",name:"voucherAmount",type:"uint256"},{internalType:"uint256",name:"pointAmount",type:"uint256"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"uint256",name:"voucherExpirePeriod",type:"uint256"},{internalType:"bool",name:"enabled",type:"bool"}],name:"setPromoTier",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"bool",name:"status",type:"bool"}],name:"setTokenWhitelist",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"forwarder",type:"address"}],name:"setTrustedForwarder",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"tokenWhitelist",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"fromMerchantId",type:"bytes32"},{internalType:"bytes32",name:"toMerchantId",type:"bytes32"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transferMerchantBalance",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"trustedForwarder",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"usedSeq",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"bytes32",name:"",type:"bytes32"},{internalType:"address",name:"",type:"address"}],name:"userMerchantBalances",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"bytes32",name:"",type:"bytes32"}],name:"userMerchantPoints",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"}],name:"userVouchers",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"vouchers",outputs:[{internalType:"bytes32",name:"merchantId",type:"bytes32"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"bool",name:"used",type:"bool"},{internalType:"uint256",name:"expireAt",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"merchantId",type:"bytes32"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"withdraw",outputs:[],stateMutability:"nonpayable",type:"function"}],n=[{inputs:[{internalType:"string",name:"_name",type:"string"},{internalType:"address",name:"_feeAddress",type:"address"},{internalType:"uint256",name:"_feePpm",type:"uint256"},{internalType:"address",name:"_initTrustedForwarder",type:"address"},{internalType:"address[]",name:"initialTokens",type:"address[]"},{internalType:"uint256[]",name:"initialMinUnits",type:"uint256[]"}],stateMutability:"nonpayable",type:"constructor"},{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"OwnableInvalidOwner",type:"error"},{inputs:[{internalType:"address",name:"account",type:"address"}],name:"OwnableUnauthorizedAccount",type:"error"},{inputs:[{internalType:"address",name:"token",type:"address"}],name:"SafeERC20FailedOperation",type:"error"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"newFeeAddress",type:"address"}],name:"FeeAddressUpdated",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"newFeePpm",type:"uint256"}],name:"FeePpmForToUpdated",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"newFeePpm",type:"uint256"}],name:"FeePpmUpdated",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"token",type:"address"},{indexed:!1,internalType:"uint256",name:"minUnit",type:"uint256"}],name:"MinUnitUpdated",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"payer",type:"address"},{indexed:!0,internalType:"address",name:"token",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"fee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"toAmount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"seq",type:"uint256"}],name:"Paid",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"token",type:"address"},{indexed:!1,internalType:"bool",name:"isWhitelisted",type:"bool"}],name:"TokenWhitelistUpdated",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"newForwarder",type:"address"}],name:"TrustedForwarderUpdated",type:"event"},{inputs:[],name:"MAX_AMOUNT",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"feeAddress",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"feePpm",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"feePpmPerTo",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"token",type:"address"}],name:"isTokenWhitelisted",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"forwarder",type:"address"}],name:"isTrustedForwarder",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"minUnitPerToken",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"seq",type:"uint256"}],name:"pay",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"_feePpm",type:"uint256"}],name:"setFee",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"_feeAddress",type:"address"}],name:"setFeeAddress",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"newFeePpm",type:"uint256"}],name:"setFeePpmForTo",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"minUnit",type:"uint256"}],name:"setMinUnit",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"bool",name:"allowed",type:"bool"}],name:"setTokenWhitelist",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"forwarder",type:"address"}],name:"setTrustedForwarder",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"tokenWhitelist",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"trustedForwarder",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"usedSeq",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"}],r=[{inputs:[],stateMutability:"nonpayable",type:"constructor"},{inputs:[{internalType:"uint48",name:"deadline",type:"uint48"}],name:"ERC2771ForwarderExpiredRequest",type:"error"},{inputs:[{internalType:"address",name:"signer",type:"address"},{internalType:"address",name:"from",type:"address"}],name:"ERC2771ForwarderInvalidSigner",type:"error"},{inputs:[{internalType:"uint256",name:"requestedValue",type:"uint256"},{internalType:"uint256",name:"msgValue",type:"uint256"}],name:"ERC2771ForwarderMismatchedValue",type:"error"},{inputs:[{internalType:"address",name:"target",type:"address"},{internalType:"address",name:"forwarder",type:"address"}],name:"ERC2771UntrustfulTarget",type:"error"},{inputs:[],name:"FailedCall",type:"error"},{inputs:[{internalType:"uint256",name:"balance",type:"uint256"},{internalType:"uint256",name:"needed",type:"uint256"}],name:"InsufficientBalance",type:"error"},{inputs:[{internalType:"address",name:"account",type:"address"},{internalType:"uint256",name:"currentNonce",type:"uint256"}],name:"InvalidAccountNonce",type:"error"},{inputs:[],name:"InvalidShortString",type:"error"},{inputs:[{internalType:"string",name:"str",type:"string"}],name:"StringTooLong",type:"error"},{anonymous:!1,inputs:[],name:"EIP712DomainChanged",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"signer",type:"address"},{indexed:!1,internalType:"uint256",name:"nonce",type:"uint256"},{indexed:!1,internalType:"bool",name:"success",type:"bool"}],name:"ExecutedForwardRequest",type:"event"},{inputs:[],name:"eip712Domain",outputs:[{internalType:"bytes1",name:"fields",type:"bytes1"},{internalType:"string",name:"name",type:"string"},{internalType:"string",name:"version",type:"string"},{internalType:"uint256",name:"chainId",type:"uint256"},{internalType:"address",name:"verifyingContract",type:"address"},{internalType:"bytes32",name:"salt",type:"bytes32"},{internalType:"uint256[]",name:"extensions",type:"uint256[]"}],stateMutability:"view",type:"function"},{inputs:[{components:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"value",type:"uint256"},{internalType:"uint256",name:"gas",type:"uint256"},{internalType:"uint48",name:"deadline",type:"uint48"},{internalType:"bytes",name:"data",type:"bytes"},{internalType:"bytes",name:"signature",type:"bytes"}],internalType:"struct ERC2771Forwarder.ForwardRequestData",name:"request",type:"tuple"}],name:"execute",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{components:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"value",type:"uint256"},{internalType:"uint256",name:"gas",type:"uint256"},{internalType:"uint48",name:"deadline",type:"uint48"},{internalType:"bytes",name:"data",type:"bytes"},{internalType:"bytes",name:"signature",type:"bytes"}],internalType:"struct ERC2771Forwarder.ForwardRequestData[]",name:"requests",type:"tuple[]"},{internalType:"address payable",name:"refundReceiver",type:"address"}],name:"executeBatch",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"nonces",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{components:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"value",type:"uint256"},{internalType:"uint256",name:"gas",type:"uint256"},{internalType:"uint48",name:"deadline",type:"uint48"},{internalType:"bytes",name:"data",type:"bytes"},{internalType:"bytes",name:"signature",type:"bytes"}],internalType:"struct ERC2771Forwarder.ForwardRequestData",name:"request",type:"tuple"}],name:"verify",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"}];e.keccak256("EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"),e.keccak256("ForwardRequest(address from,address to,uint256 value,uint256 gas,uint256 nonce,uint48 deadline,bytes data)");const a=[{name:"name",type:"string"},{name:"version",type:"string"},{name:"chainId",type:"uint256"},{name:"verifyingContract",type:"address"}],s={ForwardRequest:[{name:"from",type:"address"},{name:"to",type:"address"},{name:"value",type:"uint256"},{name:"gas",type:"uint256"},{name:"nonce",type:"uint256"},{name:"deadline",type:"uint48"},{name:"data",type:"bytes"}]},o=[{inputs:[{type:"address",name:"to"},{type:"uint256",name:"amount"}],name:"transfer",outputs:[{type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{type:"address",name:"owner"},{type:"address",name:"spender"}],name:"allowance",outputs:[{type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{type:"address",name:"spender"},{type:"uint256",name:"amount"}],name:"approve",outputs:[{type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{type:"address",name:"account"}],name:"balanceOf",outputs:[{type:"uint256"}],stateMutability:"view",type:"function"}],i="undefined"!=typeof window;class c{constructor(e){this.config=e}async initializeClients(t=15e3){if(console.log("开始初始化钱包客户端..."),!i)throw new Error("钱包只能在浏览器环境中使用");const n=i&&(window.ethereum||window.walletLinkExtension||window.walletConnect||window.coinbaseWalletExtension)||null;if(!n)throw console.error("未检测到可用的钱包"),new Error("未检测到可用的钱包。请安装MetaMask、Coinbase Wallet或其他以太坊钱包。");console.log("检测到钱包提供者，创建钱包客户端...");try{const r=(e,t,n)=>Promise.race([e,new Promise(((e,r)=>setTimeout((()=>r(new Error(n))),t)))]),a=await r(n.request({method:"eth_chainId"}),t,"获取链ID超时，请检查钱包连接状态");return this.chainId=parseInt(a,16),console.log("从钱包获取到链 ID:",this.chainId),this.wallet=e.createWalletClient({transport:e.custom(n)}),console.log("钱包客户端创建完成"),this.publicClient=e.createPublicClient({transport:e.custom(n)}),console.log("公共客户端创建完成"),!0}catch(e){throw console.error("初始化客户端失败:",e),console.error("错误详情:",{message:e.message,code:e.code,data:e.data}),new Error(`初始化客户端失败: ${e.message}`)}}async connectWallet(e=15e3){this.wallet&&this.publicClient||await this.initializeClients(e);try{console.log("请求连接钱包...");const t=(e,t,n)=>Promise.race([e,new Promise(((e,r)=>setTimeout((()=>r(new Error(n))),t)))]),[n]=await t(this.wallet.requestAddresses(),e,"请求钱包地址超时，用户可能未响应钱包连接请求");return console.log("获取到钱包地址:",n),this.account={address:n,type:"json-rpc"},n}catch(e){throw console.error("连接钱包失败:",e),new Error(`连接钱包失败: ${e.message}`)}}isConnected(){return!!this.account}getConnectedAddress(){return this.account?.address}getChainId(){return this.chainId}getWallet(){return this.wallet}getPublicClient(){return this.publicClient}getAccount(){return this.account}async ensureConnected(e=15e3){return this.isConnected()||await this.connectWallet(e),this.isConnected()}async ensureInitialized(e=15e3){return this.publicClient&&this.wallet||await this.initializeClients(e),!!this.publicClient&&!!this.wallet}}class l extends c{constructor(e={}){console.log("[BlockchainService] 构造收到的config:",e);const t={rpcUrl:e.rpcUrl,paymentContractAddress:e.paymentContractAddress||"",vaultContractAddress:e.vaultContractAddress||"",forwarderAddress:e.forwarderAddress||""};console.log("[BlockchainService] delegateConfig:",t),super(t),this.customRpcClient=null}getWalletClient(){return this.wallet}getAccount(){return this.account}async ensureWalletConnected(e=15e3){await this.ensureConnected(e)}async ensureTokenAllowance(e,t,n){await this.ensureWalletConnected();const r=await this.readContract(e,o,"allowance",[this.account.address,t]);return console.log(`当前allowance: ${r} 需要: ${n}`),r>=n?(console.log("授权额度充足"),!0):(console.log("授权额度不足，发起approve..."),await this.writeContract(e,o,"approve",[t,n]),console.log("approve成功"),!0)}async getNonce(e,t){try{return await this.readContract(this.getForwarderAddress(),r,"nonces",[e],t)}catch(e){throw e}}async sendTransaction(e,t,n){await this.ensureWalletConnected(),console.log("发送交易..."),console.log("- 发送方:",this.account.address),console.log("- 接收方:",e),console.log("- 金额:",t.toString());const r={account:this.account,chain:this.chainId?{id:this.chainId}:void 0,to:e,value:t,data:n};try{const e=await this.wallet.sendTransaction(r);console.log("交易已发送，等待确认，哈希:",e);if("success"!==(await this.publicClient.waitForTransactionReceipt({hash:e})).status)throw new Error("交易执行失败");return console.log("交易已确认"),e}catch(e){throw console.error("发送交易失败:",e),new Error(`发送交易失败: ${e.message}`)}}async writeContract(e,t,n,r,a=0n){await this.ensureWalletConnected(),console.log("调用合约写方法..."),console.log("- 合约地址:",e),console.log("- 函数名:",n),console.log("- 参数:",r);try{const s=await this.wallet.writeContract({account:this.account,chain:this.chainId?{id:this.chainId}:void 0,address:e,abi:t,functionName:n,args:r,value:a});console.log("合约调用已发送，等待确认，哈希:",s);if("success"!==(await this.publicClient.waitForTransactionReceipt({hash:s})).status)throw new Error("合约调用执行失败");return console.log("合约调用已确认"),s}catch(e){throw console.error("调用合约写方法失败:",e),new Error(`调用合约写方法失败: ${e.message}`)}}async readContract(e,t,n,r=[],a){const s=a?.timeout??1e4;console.log("调用合约读方法..."),console.log("- 合约地址:",e),console.log("- 函数名:",n),console.log("- 参数:",r);try{const a=await Promise.race([this.getCustomRpcClient().readContract({address:e,abi:t,functionName:n,args:r}),new Promise(((e,t)=>setTimeout((()=>t(new Error("TimeoutError: readContract timeout"))),s)))]);return console.log("合约读取结果:",a),a}catch(e){throw console.error("调用合约读方法失败:",e),new Error(`调用合约读方法失败: ${e.message}`)}}getPaymentContractAddress(){const e=this.config?.paymentContractAddress||"";return console.log("[BlockchainService] getPaymentContractAddress 返回:",e),e}getVaultContractAddress(){const e=this.config?.vaultContractAddress||"";return console.log("[BlockchainService] getVaultContractAddress 返回:",e),e}getForwarderAddress(){const e=this.config?.forwarderAddress||"";return console.log("[BlockchainService] getForwarderAddress 返回:",e),e}getCustomRpcClient(){if(this.customRpcClient)return this.customRpcClient;const t=this.config.rpcUrl;if(t)return console.log("使用配置的 RPC URL:",t),this.customRpcClient=e.createPublicClient({transport:e.http(t)}),this.customRpcClient;if(this.publicClient)return console.log("使用钱包提供的 RPC 连接"),this.customRpcClient=this.publicClient,this.customRpcClient;throw console.error("未提供RPC URL且未连接钱包"),new Error("未提供RPC URL且未连接钱包，请配置RPC URL或连接MetaMask")}getEstimateClient(){return this.publicClient?this.publicClient:this.getCustomRpcClient()}}class d{constructor(e){this.blockchainService=e}async approveToken(e,t,n){await this.blockchainService.ensureWalletConnected();const r=this.blockchainService.getWalletClient(),a=this.blockchainService.getAccount(),s=this.blockchainService.getChainId();if(!r||!a||void 0===s)throw new Error("钱包未连接或初始化失败");console.log(`开始授权代币 ${e} 给 ${t}，金额: ${n.toString()}`);const i=await r.writeContract({account:a,chain:{id:s},address:e,abi:o,functionName:"approve",args:[t,n]});return console.log("授权交易已发送，哈希:",i),i}async checkAllowance(e,t,n){await this.blockchainService.ensureWalletConnected();const r=this.blockchainService.getPublicClient();if(!r)throw new Error("公共客户端未初始化");const a=await r.readContract({address:e,abi:o,functionName:"allowance",args:[t,n]});return console.log(`当前授权额度: ${a.toString()}`),a}async ensureTokenAllowance(e,t,n){const r=this.blockchainService.getConnectedAddress();if(!r)throw new Error("钱包未连接");const a=await this.checkAllowance(e,r,t);if(console.log(`检查授权额度: 当前 ${a.toString()}, 需要 ${n.toString()}`),a>=n)return console.log("授权额度充足"),!0;console.log("授权额度不足，发起授权交易...");const s=await this.approveToken(e,t,n),o=this.blockchainService.getPublicClient();if(o){console.log("等待授权交易确认...");if("success"!==(await o.waitForTransactionReceipt({hash:s})).status)throw new Error("授权交易失败");console.log("授权交易确认成功")}return!0}async getTokenBalance(e,t){await this.blockchainService.ensureWalletConnected();const n=this.blockchainService.getPublicClient();if(!n)throw new Error("公共客户端未初始化");const r=t||this.blockchainService.getConnectedAddress();if(!r)throw new Error("未指定查询地址且钱包未连接");const a=await n.readContract({address:e,abi:o,functionName:"balanceOf",args:[r]});return console.log(`代币 ${e} 余额: ${a.toString()}`),a}}class u{constructor(e){this.blockchainService=e,this.tokenOperations=new d(e)}async pay(e,t,r,a=BigInt(Math.floor(Date.now()/1e3))){await this.blockchainService.ensureWalletConnected();const s=this.blockchainService.getWalletClient(),o=this.blockchainService.getAccount(),i=this.blockchainService.getChainId();if(!s||!o||void 0===i)throw new Error("钱包未连接或初始化失败");console.log("开始直接支付:"),console.log("- 接收方:",e),console.log("- 金额:",t.toString()),console.log("- 代币地址:",r||"ETH"),console.log("- 序列号:",a.toString()),console.log("- paymentContractAddress:",this.blockchainService.getPaymentContractAddress()),r&&await this.tokenOperations.ensureTokenAllowance(r,this.blockchainService.getPaymentContractAddress(),t);const c=await s.writeContract({account:o,chain:{id:i},address:this.blockchainService.getPaymentContractAddress(),abi:n,functionName:"pay",args:[r||"0x0000000000000000000000000000000000000000",e,t,a],value:r?0n:t});return console.log("支付交易已发送，哈希:",c),c}encodePayCallData(t,r,a,s=0n){const o=e.encodeFunctionData({abi:n,functionName:"pay",args:[t,r,a,s]});return console.log("编码支付调用参数:"),console.log("- token:",t),console.log("- to:",r),console.log("- amount:",a.toString()),console.log("- seq:",s.toString()),o}}const p="undefined"!=typeof window;class y{constructor(e){this.blockchainService=e}async verifyTypedDataSignature({chainId:t,message:n,signature:r,expectedSigner:a}){const o={name:"MetaTxForwarder",version:"1",chainId:t,verifyingContract:this.blockchainService.getForwarderAddress()},i=await e.recoverTypedDataAddress({domain:o,types:s,primaryType:"ForwardRequest",message:n,signature:r});return{valid:i.toLowerCase()===a.toLowerCase(),signer:i}}async signTypedData(e,t,n){console.log("开始签名过程，参数:"),console.log("- 账户地址:",e.from),console.log("- 链 ID:",t),console.log("- Nonce:",n.toString());const r={name:"MetaTxForwarder",version:"1",chainId:t,verifyingContract:this.blockchainService.getForwarderAddress()},o={from:e.from,to:e.to,value:e.value.toString(),gas:e.gas.toString(),nonce:e.nonce.toString(),deadline:e.deadline.toString(),data:e.data};try{const n=this.blockchainService.getWalletClient(),i=this.blockchainService.getAccount();if(!n||!i)throw new Error("钱包未连接或初始化失败");if(n.signTypedData){console.log("使用 viem 钱包客户端签名...");try{const e=await n.signTypedData({account:i,domain:r,types:{...s},primaryType:"ForwardRequest",message:o});return console.log("viem 签名成功:",e),e}catch(e){console.warn("viem 签名失败，回退到原生方法:",e.message)}}if(!p||!window.ethereum)throw new Error("浏览器环境不可用或未安装钱包");console.log("使用浏览器原生签名方法...");const c={domain:{...r,chainId:r.chainId.toString()},message:o,primaryType:"ForwardRequest",types:{EIP712Domain:a,...s}};let l;try{l=await window.ethereum.request({method:"eth_signTypedData_v4",params:[e.from,JSON.stringify(c)]})}catch(t){console.warn("eth_signTypedData_v4 失败，尝试 eth_signTypedData_v3"),l=await window.ethereum.request({method:"eth_signTypedData_v3",params:[e.from,JSON.stringify(c)]})}const{valid:d,signer:u}=await this.verifyTypedDataSignature({chainId:t,message:o,signature:l,expectedSigner:e.from});if(console.log("签名验证：",d,u),!d)throw new Error("签名验证失败");return console.log("签名成功:",l),l}catch(e){throw console.error("签名过程中出错:",e),new Error(`签名失败: ${e.message}`)}}}class h{constructor(e){this.blockchainService=e,this.tokenOperations=new d(e),this.directPayment=new u(e),this.signingService=new y(e)}async preparePayment(e,t,r,a,s){await this.blockchainService.ensureWalletConnected();const o=this.blockchainService.getAccount(),i=this.blockchainService.getChainId();if(!o||void 0===i)throw new Error("钱包未连接或初始化失败");console.log("准备代付gas支付请求:"),console.log("- 接收方:",e),console.log("- 金额:",t.toString()),console.log("- 序列号:",r.toString()),console.log("- 代币地址:",a||"ETH"),console.log("- 过期时间戳:",s.toString()),a&&await this.tokenOperations.ensureTokenAllowance(a,this.blockchainService.getPaymentContractAddress(),t);const c=this.directPayment.encodePayCallData(a||"0x0000000000000000000000000000000000000000",e,t,r),l=s,d=await this.blockchainService.getNonce(o.address),u=await this.blockchainService.getEstimateClient().estimateContractGas({address:this.blockchainService.getPaymentContractAddress(),abi:n,functionName:"pay",args:[a||"0x0000000000000000000000000000000000000000",e,t,r],account:o.address}),p={from:o.address,to:this.blockchainService.getPaymentContractAddress(),value:a?"0":t.toString(),gas:u.toString(),nonce:d.toString(),deadline:l.toString(),data:c};console.log("构建的请求数据:",p);try{const e=await this.signingService.signTypedData(p,i,d);p.signature=e,console.log("签名成功")}catch(e){console.error("签名失败:",e),console.warn("返回未签名的请求数据")}return p}}class m{constructor(e){this.blockchainService=e,this.tokenOperations=new d(e),this.signingService=new y(e)}int64ToBytes32(e){return"0x"+BigInt(e).toString(16).padStart(64,"0")}async validateTokenWhitelist(e){if(!this.blockchainService.getPublicClient())throw new Error("公共客户端未初始化");if(!await this.blockchainService.readContract(this.blockchainService.getVaultContractAddress(),t,"tokenWhitelist",[e]))throw new Error("Token not whitelisted")}validateAmount(e){if(e<=0n)throw new Error("Amount must be greater than 0")}async validateMerchantRecipient(e){if(!this.blockchainService.getPublicClient())throw new Error("公共客户端未初始化");const n=this.int64ToBytes32(e);if("0x0000000000000000000000000000000000000000"===await this.blockchainService.readContract(this.blockchainService.getVaultContractAddress(),t,"merchantRecipients",[n]))throw new Error("Merchant recipient not set")}async validateSeq(e){if(!this.blockchainService.getPublicClient())throw new Error("公共客户端未初始化");if(await this.blockchainService.readContract(this.blockchainService.getVaultContractAddress(),t,"usedSeq",[e]))throw new Error("Seq already used")}async deposit(e,n,r){await this.blockchainService.ensureWalletConnected();const a=this.blockchainService.getWalletClient(),s=this.blockchainService.getAccount(),o=this.blockchainService.getChainId();if(!a||!s||void 0===o)throw new Error("钱包未连接或初始化失败");console.log("开始存款到金库:"),console.log("- 商户ID:",e.toString()),console.log("- 代币地址:",n),console.log("- 存款金额:",r.toString()),this.validateAmount(r),await this.validateTokenWhitelist(n);if(await this.tokenOperations.getTokenBalance(n,s.address)<r)throw new Error("Insufficient wallet balance");await this.tokenOperations.ensureTokenAllowance(n,this.blockchainService.getVaultContractAddress(),r);const i=this.int64ToBytes32(e),c=await a.writeContract({account:s,chain:{id:o},address:this.blockchainService.getVaultContractAddress(),abi:t,functionName:"deposit",args:[i,n,r]});return console.log("存款交易已发送，哈希:",c),c}async withdraw(e,n,r){await this.blockchainService.ensureWalletConnected();const a=this.blockchainService.getWalletClient(),s=this.blockchainService.getAccount(),o=this.blockchainService.getChainId();if(!a||!s||void 0===o)throw new Error("钱包未连接或初始化失败");console.log("开始从金库提现:"),console.log("- 商户ID:",e.toString()),console.log("- 代币地址:",n),console.log("- 提现金额:",r.toString()),this.validateAmount(r);if(await this.getUserBalance(s.address,e,n)<r)throw new Error("Insufficient vault balance");const i=this.int64ToBytes32(e),c=await a.writeContract({account:s,chain:{id:o},address:this.blockchainService.getVaultContractAddress(),abi:t,functionName:"withdraw",args:[i,n,r]});return console.log("提现交易已发送，哈希:",c),c}async consumeDirect(e,n,r,a=0n,s=0n,o=BigInt(Math.floor(Date.now()/1e3)),i,c,l){await this.blockchainService.ensureWalletConnected();const d=this.blockchainService.getWalletClient(),u=this.blockchainService.getAccount(),p=this.blockchainService.getChainId();if(!d||!u||void 0===p)throw new Error("钱包未连接或初始化失败");await this.validateConsumeParams({merchantId:e,token:n,amount:r,voucherId:a,pointToUse:s,seq:o,idx:i,recipient:c,userAddress:l||u.address});const y=this.int64ToBytes32(e);return await d.writeContract({account:u,chain:{id:p},address:this.blockchainService.getVaultContractAddress(),abi:t,functionName:"consume",args:[y,n,r,a,s,o,i,c]})}async validateVoucher(e,t,n,r){if(!this.blockchainService.getPublicClient())throw new Error("公共客户端未初始化");if(!(await this.getMyVouchers()).ids.includes(e))throw new Error("Voucher not owned");const a=await this.getVoucher(e);if(a.used)throw new Error("Voucher already used");const s=Math.floor(Date.now()/1e3);if(a.expireAt<=s)throw new Error("Voucher expired");const o=this.int64ToBytes32(t);if(this.int64ToBytes32(a.merchantId)!==o)throw new Error("Voucher merchant mismatch");if(a.token.toLowerCase()!==n.toLowerCase())throw new Error("Voucher token mismatch")}async transferMerchantBalance(e,n,r,a){await this.blockchainService.ensureWalletConnected();const s=this.blockchainService.getWalletClient(),o=this.blockchainService.getAccount(),i=this.blockchainService.getChainId();if(!s||!o||void 0===i)throw new Error("钱包未连接或初始化失败");if(console.log("开始余额跨商户转移:"),console.log("- 源商户ID:",e.toString()),console.log("- 目标商户ID:",n.toString()),console.log("- 代币地址:",r),console.log("- 转移金额:",a.toString()),e===n)throw new Error("Cannot transfer to same merchant");await this.validateTokenWhitelist(r),this.validateAmount(a);if(await this.getUserBalance(o.address,e,r)<a)throw new Error("Insufficient vault balance");const c=this.int64ToBytes32(e),l=this.int64ToBytes32(n),d=await s.writeContract({account:o,chain:{id:i},address:this.blockchainService.getVaultContractAddress(),abi:t,functionName:"transferMerchantBalance",args:[c,l,r,a]});return console.log("转移交易已发送，哈希:",d),d}async prepareRelayedConsume(n,r,a,s=0n,o=0n,i=BigInt(Math.floor(Date.now()/1e3)),c,l,d,u){await this.blockchainService.ensureWalletConnected();const p=this.blockchainService.getAccount(),y=this.blockchainService.getChainId();if(!p||void 0===y)throw new Error("钱包未连接或初始化失败");await this.validateConsumeParams({merchantId:n,token:r,amount:a,voucherId:s,pointToUse:o,seq:i,idx:c,recipient:l,userAddress:u||p.address});const h=this.int64ToBytes32(n),m=e.encodeFunctionData({abi:t,functionName:"consume",args:[h,r,a,s,o,i,c,l]}),g=d,w=await this.blockchainService.getNonce(u||p.address),b=await this.blockchainService.getEstimateClient().estimateContractGas({address:this.blockchainService.getVaultContractAddress(),abi:t,functionName:"consume",args:[h,r,a,s,o,i,c,l],account:u||p.address}),v={from:u||p.address,to:this.blockchainService.getVaultContractAddress(),value:"0",gas:b.toString(),nonce:w.toString(),deadline:g.toString(),data:m};try{const e=await this.signingService.signTypedData(v,y,w);v.signature=e}catch(e){}return v}async prepareRelayedDeposit(n,r,a,s){await this.blockchainService.ensureWalletConnected();const o=this.blockchainService.getAccount(),i=this.blockchainService.getChainId();if(!o||void 0===i)throw new Error("钱包未连接或初始化失败");console.log("准备代付gas存款请求:"),console.log("- 商户ID:",n.toString()),console.log("- 代币地址:",r),console.log("- 存款金额:",a.toString()),console.log("- 过期时间戳:",s.toString()),this.validateAmount(a),await this.validateTokenWhitelist(r);if(await this.tokenOperations.getTokenBalance(r,o.address)<a)throw new Error("Insufficient wallet balance");await this.tokenOperations.ensureTokenAllowance(r,this.blockchainService.getVaultContractAddress(),a);const c=this.int64ToBytes32(n),l=e.encodeFunctionData({abi:t,functionName:"deposit",args:[c,r,a]}),d=s,u=await this.blockchainService.getNonce(o.address),p=await this.blockchainService.getEstimateClient().estimateContractGas({address:this.blockchainService.getVaultContractAddress(),abi:t,functionName:"deposit",args:[c,r,a],account:o.address}),y={from:o.address,to:this.blockchainService.getVaultContractAddress(),value:"0",gas:p.toString(),nonce:u.toString(),deadline:d.toString(),data:l};console.log("构建的请求数据:",y);try{const e=await this.signingService.signTypedData(y,i,u);y.signature=e,console.log("签名成功")}catch(e){console.error("签名失败:",e),console.warn("返回未签名的请求数据")}return y}async prepareRelayedWithdraw(n,r,a,s){await this.blockchainService.ensureWalletConnected();const o=this.blockchainService.getAccount(),i=this.blockchainService.getChainId();if(!o||void 0===i)throw new Error("钱包未连接或初始化失败");console.log("准备代付gas提款请求:"),console.log("- 商户ID:",n.toString()),console.log("- 代币地址:",r),console.log("- 提款金额:",a.toString()),console.log("- 过期时间戳:",s.toString()),this.validateAmount(a);if(await this.getUserBalance(o.address,n,r)<a)throw new Error("Insufficient vault balance");const c=this.int64ToBytes32(n),l=e.encodeFunctionData({abi:t,functionName:"withdraw",args:[c,r,a]}),d=s,u=await this.blockchainService.getNonce(o.address),p=await this.blockchainService.getEstimateClient().estimateContractGas({address:this.blockchainService.getVaultContractAddress(),abi:t,functionName:"withdraw",args:[c,r,a],account:o.address}),y={from:o.address,to:this.blockchainService.getVaultContractAddress(),value:"0",gas:p.toString(),nonce:u.toString(),deadline:d.toString(),data:l};console.log("构建的请求数据:",y);try{const e=await this.signingService.signTypedData(y,i,u);y.signature=e,console.log("签名成功")}catch(e){console.error("签名失败:",e),console.warn("返回未签名的请求数据")}return y}async getUserBalance(e,n,r){await this.blockchainService.ensureWalletConnected();if(!this.blockchainService.getPublicClient())throw new Error("公共客户端未初始化");const a=this.int64ToBytes32(n);console.log("查询用户金库余额:"),console.log("- 用户地址:",e),console.log("- 商户ID:",n.toString()),console.log("- 代币地址:",r);const s=await this.blockchainService.readContract(this.blockchainService.getVaultContractAddress(),t,"getUserBalance",[e,a,r]);return console.log("查询结果:",s.toString()),s}async getUserPoints(e,n){await this.blockchainService.ensureWalletConnected();if(!this.blockchainService.getPublicClient())throw new Error("公共客户端未初始化");const r=this.int64ToBytes32(n);console.log("查询用户积分:"),console.log("- 用户地址:",e),console.log("- 商户ID:",n.toString());const a=await this.blockchainService.readContract(this.blockchainService.getVaultContractAddress(),t,"getUserPoints",[e,r]);return console.log("查询结果:",a.toString()),a}async getMyVouchers(){await this.blockchainService.ensureWalletConnected();const e=this.blockchainService.getPublicClient(),n=this.blockchainService.getAccount();if(!e||!n)throw new Error("钱包未连接或初始化失败");console.log("查询我的代金券...");const r=await this.blockchainService.readContract(this.blockchainService.getVaultContractAddress(),t,"getMyVouchers",[]),a={ids:r[0],merchantIds:r[1],tokens:r[2],amounts:r[3],used:r[4],expireAts:r[5]};return console.log("查询到代金券数量:",a.ids.length),a}async getVoucher(e){await this.blockchainService.ensureWalletConnected();if(!this.blockchainService.getPublicClient())throw new Error("公共客户端未初始化");console.log("查询代金券详情:"),console.log("- 代金券ID:",e.toString());const n=await this.blockchainService.readContract(this.blockchainService.getVaultContractAddress(),t,"getVoucher",[e]);let r;if(console.log("查询结果:",n),"boolean"==typeof n[2])r=n[2];else{const e=Number(n[2]);if(0!==e&&1!==e)throw new Error(`无效的布尔值: ${n[2]}`);r=Boolean(e)}const a={merchantId:n[0],token:"0x0000000000000000000000000000000000000000",amount:n[1],used:r,expireAt:n[3]};return console.log("代金券详情:",a),a}async getFeeReceiver(){await this.blockchainService.ensureWalletConnected();if(!this.blockchainService.getPublicClient())throw new Error("公共客户端未初始化");console.log("查询手续费接收地址...");const e=await this.blockchainService.readContract(this.blockchainService.getVaultContractAddress(),t,"feeReceiver",[]);return console.log("手续费接收地址:",e),e}async getFeeRuleProvider(){await this.blockchainService.ensureWalletConnected();if(!this.blockchainService.getPublicClient())throw new Error("公共客户端未初始化");console.log("查询手续费规则提供者地址...");const e=await this.blockchainService.readContract(this.blockchainService.getVaultContractAddress(),t,"feeRuleProvider",[]);return console.log("手续费规则提供者地址:",e),e}async getTrustedForwarder(){await this.blockchainService.ensureWalletConnected();if(!this.blockchainService.getPublicClient())throw new Error("公共客户端未初始化");console.log("查询可信转发器地址...");const e=await this.blockchainService.readContract(this.blockchainService.getVaultContractAddress(),t,"trustedForwarder",[]);return console.log("可信转发器地址:",e),e}async isTrustedForwarder(e){await this.blockchainService.ensureWalletConnected();if(!this.blockchainService.getPublicClient())throw new Error("公共客户端未初始化");console.log("检查是否为可信转发器:"),console.log("- 转发器地址:",e);const n=await this.blockchainService.readContract(this.blockchainService.getVaultContractAddress(),t,"isTrustedForwarder",[e]);return console.log("是否为可信转发器:",n),n}async getOwner(){await this.blockchainService.ensureWalletConnected();if(!this.blockchainService.getPublicClient())throw new Error("公共客户端未初始化");console.log("查询合约所有者地址...");const e=await this.blockchainService.readContract(this.blockchainService.getVaultContractAddress(),t,"owner",[]);return console.log("合约所有者地址:",e),e}async getPromoTier(e,n){await this.blockchainService.ensureWalletConnected();const r=this.int64ToBytes32(e),a=await this.blockchainService.readContract(this.blockchainService.getVaultContractAddress(),t,"getPromoTier",[r,n]);return{minAmount:a[0],discountRate:a[1],voucherAmount:a[2],pointAmount:a[3],startTime:a[4],endTime:a[5],voucherExpirePeriod:a[6],enabled:a[7]}}async validateConsumeParams(e){if(!await this.blockchainService.readContract(this.blockchainService.getVaultContractAddress(),t,"tokenWhitelist",[e.token]))throw new Error("Token not whitelisted");if(e.amount<=0n)throw new Error("Amount must be greater than 0");if(await this.blockchainService.readContract(this.blockchainService.getVaultContractAddress(),t,"usedSeq",[e.seq]))throw new Error("Seq already used");const n=Math.floor(Date.now()/1e3),r=await this.getUserBalance(e.userAddress,e.merchantId,e.token);if(0n===e.idx){if(r<e.amount)throw new Error("Insufficient vault balance")}else{const t=await this.getPromoTier(e.merchantId,Number(e.idx));if(!t.enabled)throw new Error("Promo tier not enabled");if(e.amount<t.minAmount)throw new Error("Not match minAmount");if(n<Number(t.startTime)||n>Number(t.endTime))throw new Error("Not in promo time");if(r<e.amount*t.discountRate/100n)throw new Error("Insufficient vault balance")}if(0n!==e.voucherId){const t=await this.getVoucher(e.voucherId);if(t.used)throw new Error("Voucher already used");if(this.int64ToBytes32(t.merchantId)!==this.int64ToBytes32(e.merchantId))throw new Error("Voucher merchant mismatch");if(t.token!==e.token)throw new Error("Voucher token mismatch");if(t.expireAt<=n)throw new Error("Voucher expired")}if(e.pointToUse>0n){if(await this.getUserPoints(e.userAddress,e.merchantId)<e.pointToUse)throw new Error("Insufficient points")}}}class g extends l{constructor(e){super(e)}async setPromoTier(e,n,r,a,s,o,i,c,l,d){await this.ensureWalletConnected();const u=this.int64ToBytes32(e);return await this.writeContract(this.getVaultContractAddress(),t,"setPromoTier",[u,n,r,a,s,o,i,c,l,d])}int64ToBytes32(e){return"0x"+BigInt(e).toString(16).padStart(64,"0")}generateMerchantId(t){if(!t||""===t.trim())throw new Error("商户名称不能为空");const n=e.stringToHex(t),r=e.pad(n,{size:32});return console.log("生成的merchantId:",r),r}async setMerchantOperator(e,n){try{await this.ensureWalletConnected(),console.log("设置商户操作员..."),console.log("- 商户ID:",e),console.log("- 操作员地址:",n);const r=this.int64ToBytes32(e),a=await this.writeContract(this.getVaultContractAddress(),t,"setMerchantOperator",[r,n]);return console.log("交易已发送，哈希:",a),{success:!0,message:"设置商户操作员交易已发送",data:{txHash:a}}}catch(e){return console.error("设置商户操作员失败:",e),{success:!1,message:`设置商户操作员失败: ${e.message}`}}}async checkMerchantOperator(e,n){try{await this.ensureWalletConnected(),console.log("检查商户操作员权限..."),console.log("- 商户ID:",e),console.log("- 操作员地址:",n);const r=this.int64ToBytes32(e),a=await this.readContract(this.getVaultContractAddress(),t,"merchantOperator",[r]),s=a.toLowerCase()===n.toLowerCase();return console.log("操作员权限状态:",s),{success:!0,message:"获取商户操作员权限成功",data:{hasPermission:s,operatorAddress:a}}}catch(e){return console.error("获取商户操作员权限失败:",e),{success:!1,message:`获取商户操作员权限失败: ${e.message}`}}}}class w{constructor(e){this.blockchainService=e,this.signingService=new y(e),this.tokenOperations=new d(e),this.directPayment=new u(e),this.vaultOperations=new m(e),this.relayedPayment=new h(e)}async approveToken(e,t,n){return this.tokenOperations.approveToken(e,t,n)}async checkAllowance(e,t,n){return this.tokenOperations.checkAllowance(e,t,n)}encodePayCallData(e,t,n,r=0n){return this.directPayment.encodePayCallData(e,t,n,r)}async userPayDirect(e,t,n,r=BigInt(Math.floor(Date.now()/1e3))){return this.directPayment.pay(e,t,n,r)}async prepareRelayedPayment(e,t,n,r,a){return this.relayedPayment.preparePayment(e,t,n,r,a)}async depositToVault(e,t,n){return this.vaultOperations.deposit(e,t,n)}async withdrawFromVault(e,t,n){return this.vaultOperations.withdraw(e,t,n)}async consumeFromVault(e,t,n,r=0n,a=0n,s,o,i,c){return this.vaultOperations.consumeDirect(e,t,n,r,a,o,s,i,c)}async getUserBalance(e,t,n){return this.vaultOperations.getUserBalance(e,t,n)}async getUserPoints(e,t){return this.vaultOperations.getUserPoints(e,t)}async getSpecificUserPoints(e,t){return this.vaultOperations.getUserPoints(e,t)}async prepareRelayedConsume(e,t,n,r=0n,a=0n,s,o,i,c,l){return this.vaultOperations.prepareRelayedConsume(e,t,n,r,a,o,s,i,c,l)}async prepareRelayedDeposit(e,t,n,r){return this.vaultOperations.prepareRelayedDeposit(e,t,n,r)}async prepareRelayedWithdraw(e,t,n,r){return this.vaultOperations.prepareRelayedWithdraw(e,t,n,r)}}var b;exports.OperationType=void 0,(b=exports.OperationType||(exports.OperationType={})).Payment="payment",b.Consume="consume",b.Deposit="deposit",b.Withdraw="withdraw";exports.BlockchainService=l,exports.MerchantConfigManager=g,exports.RelayerService=class extends l{constructor(e){super(e),this.paymentContractAddress=e.paymentContractAddress||this.getPaymentContractAddress(),this.consumeContractAddress=e.vaultContractAddress||this.getVaultContractAddress(),this.forwarderAddress=e.forwarderAddress||this.getForwarderAddress()||""}async validatePaymentRequest(e){try{await this.ensureWalletConnected();const{token:t,to:r,amount:a,seq:s,from:o}=e;if(console.log("验证支付请求..."),console.log("- 代币:",t),console.log("- 接收方:",r),console.log("- 金额:",a.toString()),console.log("- 序列号:",s.toString()),console.log("- 发送方:",o),a<=0n)return console.error("金额必须大于0"),{success:!1,error:"金额必须大于0"};try{if(await this.readContract(this.getPaymentContractAddress(),n,"usedSeq",[s]))return console.error("序列号已被使用"),{success:!1,error:"序列号已被使用"}}catch(e){return console.error("检查序列号失败:",e),{success:!1,error:`检查序列号失败: ${e.message}`}}try{if(!await this.readContract(this.getPaymentContractAddress(),n,"tokenWhitelist",[t]))return console.error("代币不在白名单中"),{success:!1,error:"代币不在白名单中"}}catch(e){return console.error("检查代币白名单失败:",e),{success:!1,error:`检查代币白名单失败: ${e.message}`}}try{const e=await this.readContract(this.getPaymentContractAddress(),n,"MAX_AMOUNT",[]);if(a>e)return console.error("金额超过最大限制"),{success:!1,error:`金额超过最大限制: ${e}`}}catch(e){return console.error("检查最大金额限制失败:",e),{success:!1,error:`检查最大金额限制失败: ${e.message}`}}try{if("0x0000000000000000000000000000000000000000"===await this.readContract(this.getPaymentContractAddress(),n,"feeAddress",[]))return console.error("手续费地址未设置"),{success:!1,error:"手续费地址未设置"}}catch(e){return console.error("检查手续费地址失败:",e),{success:!1,error:`检查手续费地址失败: ${e.message}`}}let i,c;try{if(i=await this.readContract(this.getPaymentContractAddress(),n,"minUnitPerToken",[t]),i<=0n)return console.error("代币最小单位未设置"),{success:!1,error:"代币最小单位未设置"};if(a<i)return console.error("金额低于最小单位"),{success:!1,error:`金额低于最小单位: ${i}`};if(a%i!==0n)return console.error("金额必须是最小单位的整数倍"),{success:!1,error:`金额必须是最小单位的整数倍: ${i}`}}catch(e){return console.error("检查最小单位失败:",e),{success:!1,error:`检查最小单位失败: ${e.message}`}}try{const e=await this.readContract(this.getPaymentContractAddress(),n,"feePpmPerTo",[r]);if(c=e>0n?e:await this.readContract(this.getPaymentContractAddress(),n,"feePpm",[]),c>=1000000n)return console.error("费率无效"),{success:!1,error:"费率无效"}}catch(e){return console.error("获取手续费率失败:",e),{success:!1,error:`获取手续费率失败: ${e.message}`}}const l=a*c/1000000n;if(l>=a)return console.error("手续费过高"),{success:!1,error:"手续费过高"};const d=a-l;return d<=0n?(console.error("接收方到账金额过低"),{success:!1,error:"接收方到账金额过低"}):(console.log("验证通过"),console.log("- 手续费率:",c.toString(),"ppm"),console.log("- 手续费:",l.toString()),console.log("- 实际到账:",d.toString()),{success:!0,fee:l,toAmount:d})}catch(e){return console.error("验证支付请求失败:",e),{success:!1,error:`验证支付请求失败: ${e.message}`}}}async validateConsumeRequest(e){try{await this.ensureWalletConnected();const{token:n,merchantId:r,amount:a,seq:s,idx:o,recipient:i,from:c,voucherId:l=0n,pointToUse:d=0n}=e;console.log("验证消费请求..."),console.log("- 商家ID:",r.toString()),console.log("- 代币:",n),console.log("- 金额:",a.toString()),console.log("- 序列号:",s.toString()),console.log("- 档位idx:",o.toString()),console.log("- 收款人:",i),console.log("- 发送方:",c),l>0n&&console.log("- 代金券ID:",l.toString()),d>0n&&console.log("- 使用积分:",d.toString());try{if(!await this.readContract(this.getVaultContractAddress(),t,"tokenWhitelist",[n]))return console.error("代币不在白名单中"),{success:!1,error:"代币不在白名单中"}}catch(e){return console.error("检查代币白名单失败:",e),{success:!1,error:`检查代币白名单失败: ${e.message}`}}if(a<=0n)return console.error("金额必须大于0"),{success:!1,error:"金额必须大于0"};try{if(await this.readContract(this.getVaultContractAddress(),t,"usedSeq",[s]))return console.error("序列号已被使用"),{success:!1,error:"序列号已被使用"}}catch(e){return console.error("检查序列号失败:",e),{success:!1,error:`检查序列号失败: ${e.message}`}}let u;try{u=await this.readContract(this.getVaultContractAddress(),t,"merchantConfigs",[r])}catch(e){return console.error("获取商家配置失败:",e),{success:!1,error:`获取商家配置失败: ${e.message}`}}let p=a,y=a,h=0n,m=0n;u.discountEnabled&&a>=u.discountBase&&(p=a*u.discountRate/100n,y=p,console.log("应用折扣:",u.discountRate.toString(),"%"),console.log("折扣后金额:",p.toString()));let g=0n;if(0n!==l)try{const e=await this.readContract(this.getVaultContractAddress(),t,"vouchers",[l]);if(e.used)return console.error("代金券已使用"),{success:!1,error:"代金券已使用"};if(e.merchantId!==r)return console.error("代金券不属于该商家"),{success:!1,error:"代金券不属于该商家"};const n=BigInt(Math.floor(Date.now()/1e3));if(e.expireAt<=n)return console.error("代金券已过期"),{success:!1,error:"代金券已过期"};if(!(await this.readContract(this.getVaultContractAddress(),t,"userVouchers",[c])).includes(l))return console.error("不是代金券所有者"),{success:!1,error:"不是代金券所有者"};g=e.amount,p=p>g?p-g:0n,console.log("✅ 验证通过：代金券有效"),console.log("- 代金券抵扣金额:",g.toString()),console.log("- 抵扣后金额:",p.toString())}catch(e){return console.error("验证代金券失败:",e),{success:!1,error:`验证代金券失败: ${e.message}`}}let w=0n;if(d>0n)try{const e=await this.readContract(this.getVaultContractAddress(),t,"userPoints",[c,r]);w=d>e?e:d,w>p&&(w=p),p-=w,console.log("- 可用积分:",e.toString()),console.log("- 使用积分:",w.toString()),console.log("- 积分抵扣后金额:",p.toString())}catch(e){return console.error("验证积分失败:",e),{success:!1,error:`验证积分失败: ${e.message}`}}try{const e=await this.readContract(this.getVaultContractAddress(),t,"userBalances",[c,n]);if(e<p)return console.error("余额不足"),console.error("- 用户余额:",e.toString()),console.error("- 需要金额:",p.toString()),{success:!1,error:"余额不足"};console.log("- 用户余额:",e.toString()),console.log("- 需要金额:",p.toString())}catch(e){return console.error("检查用户余额失败:",e),{success:!1,error:`检查用户余额失败: ${e.message}`}}try{const e=10000n;if(e>=1000000n)return console.error("费率过高"),{success:!1,error:"费率过高"};const t=p*e/1000000n,n=p-t;return n<=0n&&t<=0n?(console.error("没有可转账的金额"),{success:!1,error:"没有可转账的金额"}):(u.cashbackPointEnabled&&a>=u.cashbackPointBase&&(m=u.cashbackPointAmount),u.cashbackVoucherEnabled&&a>=u.cashbackVoucherBase&&(h=u.cashbackVoucherAmount),console.log("验证通过"),console.log("- 原始金额:",a.toString()),console.log("- 折扣后金额:",y.toString()),console.log("- 代金券抵扣:",g.toString()),console.log("- 积分抵扣:",w.toString()),console.log("- 实际扣除金额:",p.toString()),console.log("- 手续费率:",e.toString(),"ppm"),console.log("- 手续费:",t.toString()),console.log("- 商家到账金额:",n.toString()),console.log("- 返积分:",m.toString()),console.log("- 返券金额:",h.toString()),{success:!0,fee:t,merchantAmount:n,rewardAmount:m,voucherReward:h,discountedAmount:y,pointsUsed:w,voucherUsed:g,spendAmount:p})}catch(e){return console.error("计算手续费和奖励失败:",e),{success:!1,error:`计算手续费和奖励失败: ${e.message}`}}}catch(e){return console.error("验证消费请求失败:",e),{success:!1,error:`验证消费请求失败: ${e.message}`}}}async validateDepositRequest(e){try{await this.ensureWalletConnected();const{token:n,amount:r,seq:a,from:s}=e;console.log("验证存款请求..."),console.log("- 代币:",n),console.log("- 金额:",r.toString()),console.log("- 序列号:",a.toString()),console.log("- 发送方:",s);try{if(!await this.readContract(this.getVaultContractAddress(),t,"tokenWhitelist",[n]))return console.error("代币不在白名单中"),{success:!1,error:"代币不在白名单中"}}catch(e){return console.error("检查代币白名单失败:",e),{success:!1,error:`检查代币白名单失败: ${e.message}`}}if(r<=0n)return console.error("金额必须大于0"),{success:!1,error:"金额必须大于0"};try{if(await this.readContract(n,o,"balanceOf",[s])<r)return console.error("代币余额不足"),{success:!1,error:"代币余额不足"};if(await this.readContract(n,o,"allowance",[s,this.getVaultContractAddress()])<r)return console.error("代币授权不足"),{success:!1,error:"代币授权不足"}}catch(e){return console.error("检查代币余额和授权失败:",e),{success:!1,error:`检查代币余额和授权失败: ${e.message}`}}return console.log("验证通过"),{success:!0}}catch(e){return console.error("验证存款请求失败:",e),{success:!1,error:`验证存款请求失败: ${e.message}`}}}async validateWithdrawRequest(e){try{await this.ensureWalletConnected();const{token:n,amount:r,seq:a,from:s}=e;console.log("验证提款请求..."),console.log("- 代币:",n),console.log("- 金额:",r.toString()),console.log("- 序列号:",a.toString()),console.log("- 发送方:",s);try{const e=await this.readContract(this.getVaultContractAddress(),t,"userBalances",[s,n]);if(e<r)return console.error("余额不足"),console.error("- 用户余额:",e.toString()),console.error("- 提款金额:",r.toString()),{success:!1,error:"余额不足"};console.log("- 用户余额:",e.toString()),console.log("- 提款金额:",r.toString())}catch(e){return console.error("检查用户余额失败:",e),{success:!1,error:`检查用户余额失败: ${e.message}`}}return console.log("验证通过"),{success:!0}}catch(e){return console.error("验证提款请求失败:",e),{success:!1,error:`验证提款请求失败: ${e.message}`}}}encodePayCallData(t,r,a,s){return e.encodeFunctionData({abi:n,functionName:"pay",args:[t,r,a,s]})}encodeConsumeCallData(n,r,a,s,o,i){return e.encodeFunctionData({abi:t,functionName:"consume",args:[n,r,a,s,o,i]})}encodeDepositCallData(n,r){return e.encodeFunctionData({abi:t,functionName:"deposit",args:[n,r]})}encodeWithdrawCallData(n,r){return e.encodeFunctionData({abi:t,functionName:"withdraw",args:[n,r]})}async getNonce(e,t){try{return await this.readContract(this.forwarderAddress,r,"nonces",[e],t)}catch(e){throw console.error("获取nonce失败:",e),new Error(`获取nonce失败: ${e.message}`)}}async validateSimpleRequest(e,t){try{let n;if(console.log(`解析并验证 ${e} 请求...`),console.log("- 调用数据:",t.data),e===exports.OperationType.Payment){const e=this.decodePaymentData(t.data);n=await this.validatePaymentRequest({token:e.token,to:e.to,amount:e.amount,seq:e.seq,from:t.from})}else if(e===exports.OperationType.Consume){const e=this.decodeConsumeData(t.data);n=await this.validateConsumeRequest({token:e.token,merchantId:e.merchantId,amount:e.amount,seq:e.seq,idx:e.idx,recipient:e.recipient,from:t.from,voucherId:e.voucherId,pointToUse:e.pointToUse})}else if(e===exports.OperationType.Deposit){const e=this.decodeDepositData(t.data);n=await this.validateDepositRequest({token:e.token,amount:e.amount,seq:0n,from:t.from})}else{if(e!==exports.OperationType.Withdraw)throw new Error(`不支持的操作类型: ${e}`);{const e=this.decodeWithdrawData(t.data);n=await this.validateWithdrawRequest({token:e.token,amount:e.amount,seq:0n,from:t.from})}}return n}catch(e){return console.error("解析和验证请求失败:",e),{success:!1,error:`解析和验证请求失败: ${e.message}`}}}async sendSimpleRequest(e,t){try{await this.ensureWalletConnected();const n={from:t.from,to:t.to,value:BigInt(t.value||"0"),gas:BigInt(t.gas||"500000"),deadline:BigInt(t.deadline),data:t.data,signature:t.signature};console.log("发送转发请求..."),console.log("- 类型:",e),console.log("- 发送方:",t.from),console.log("- 目标合约:",t.to),console.log("- 截止时间:",t.deadline);const a=await this.writeContract(this.forwarderAddress,r,"execute",[n]);return console.log("交易已发送，哈希:",a),{success:!0,txHash:a}}catch(e){return console.error("发送请求失败:",e),{success:!1,error:`发送请求失败: ${e.message}`}}}decodePaymentData(t){try{const r=t.slice(0,10);if("0xa4b072d0"===r){console.log("检测到 pay 函数调用，解析参数...");try{const r=e.decodeFunctionData({abi:n,data:t});if("pay"===r.functionName&&r.args&&Array.isArray(r.args)){const e=void 0!==r.args[0]?String(r.args[0]):"",t=void 0!==r.args[1]?String(r.args[1]):"",n=void 0!==r.args[2]?BigInt(Number(r.args[2])):0n;return{token:e,to:t,amount:n,seq:void 0!==r.args[3]?BigInt(Number(r.args[3])):0n}}}catch(e){console.log("使用viem解码失败，尝试手动解析:",e)}const r=t.slice(10),a="0x"+r.slice(0,64).slice(-40),s="0x"+r.slice(64,128).slice(-40),o=BigInt("0x"+r.slice(128,192));return{token:a,to:s,amount:o,seq:BigInt("0x"+r.slice(192,256))}}throw new Error(`未知的函数选择器: ${r}`)}catch(e){throw console.error("解析支付数据失败:",e),new Error(`解析支付数据失败: ${e.message}`)}}decodeConsumeData(n){try{const r=n.slice(0,10);if("0x5d495aea"===r){console.log("检测到 consume 函数调用，解析参数...");try{const r=e.decodeFunctionData({abi:t,data:n});if("consume"===r.functionName&&r.args&&Array.isArray(r.args)){const e=BigInt(void 0!==r.args[0]?r.args[0]:"0"),t=void 0!==r.args[1]?String(r.args[1]):"",n=void 0!==r.args[2]?BigInt(Number(r.args[2])):0n,a=void 0!==r.args[3]?BigInt(Number(r.args[3])):0n,s=void 0!==r.args[4]?BigInt(Number(r.args[4])):0n,o=void 0!==r.args[5]?BigInt(Number(r.args[5])):0n,i=void 0!==r.args[6]?BigInt(Number(r.args[6])):0n;return{merchantId:e,token:t,amount:n,voucherId:a,pointToUse:s,seq:o,idx:i,recipient:void 0!==r.args[7]?String(r.args[7]):""}}}catch(e){console.log("使用viem解码失败，尝试手动解析:",e)}const r=n.slice(10),a=BigInt("0x"+r.slice(0,64)),s="0x"+r.slice(64,128).slice(-40),o=BigInt("0x"+r.slice(128,192)),i=BigInt("0x"+r.slice(192,256)),c=BigInt("0x"+r.slice(256,320)),l=BigInt("0x"+r.slice(320,384)),d=BigInt("0x"+r.slice(384,448));return{merchantId:a,token:s,amount:o,voucherId:i,pointToUse:c,seq:l,idx:d,recipient:"0x"+r.slice(448,512).slice(-40)}}throw new Error(`未知的函数选择器: ${r}`)}catch(e){throw console.error("解析消费数据失败:",e),new Error(`解析消费数据失败: ${e.message}`)}}decodeDepositData(n){try{const r=n.slice(0,10);if("0x47e7ef24"===r){console.log("检测到 deposit 函数调用，解析参数...");try{const r=e.decodeFunctionData({abi:t,data:n});if("deposit"===r.functionName&&r.args&&Array.isArray(r.args)){const e=void 0!==r.args[0]?String(r.args[0]):"";return{token:e,amount:void 0!==r.args[1]?BigInt(Number(r.args[1])):0n}}}catch(e){console.log("使用viem解码失败，尝试手动解析:",e)}const r=n.slice(10),a="0x"+r.slice(0,64).slice(-40);return{token:a,amount:BigInt("0x"+r.slice(64,128))}}throw new Error(`未知的函数选择器: ${r}`)}catch(e){throw console.error("解析存款数据失败:",e),new Error(`解析存款数据失败: ${e.message}`)}}decodeWithdrawData(n){try{const r=n.slice(0,10);if("0x441a3e70"===r){console.log("检测到 withdraw 函数调用，解析参数...");try{const r=e.decodeFunctionData({abi:t,data:n});if("withdraw"===r.functionName&&r.args&&Array.isArray(r.args)){const e=void 0!==r.args[0]?String(r.args[0]):"";return{token:e,amount:void 0!==r.args[1]?BigInt(Number(r.args[1])):0n}}}catch(e){console.log("使用viem解码失败，尝试手动解析:",e)}const r=n.slice(10),a="0x"+r.slice(0,64).slice(-40);return{token:a,amount:BigInt("0x"+r.slice(64,128))}}throw new Error(`未知的函数选择器: ${r}`)}catch(e){throw console.error("解析提款数据失败:",e),new Error(`解析提款数据失败: ${e.message}`)}}},exports.SigningService=y,exports.TransactionService=w,exports.WalletService=c,exports.Web3Delegate=class{constructor(e={}){console.log("[Web3Delegate] 构造收到的config:",e),this.blockchainService=new l(e),console.log("[Web3Delegate] blockchainService.getPaymentContractAddress():",this.blockchainService.getPaymentContractAddress()),this.token=new d(this.blockchainService),this.directPayment=new u(this.blockchainService),this.relayedPayment=new h(this.blockchainService),this.vault=new m(this.blockchainService),this.merchantConfigManager=new g(e),this.transactionService=new w(this.blockchainService)}async connectWallet(){return this.blockchainService.connectWallet()}isConnected(){return this.blockchainService.isConnected()}getConnectedAddress(){return this.blockchainService.getConnectedAddress()}getChainId(){return this.blockchainService.getChainId()}async approveToken(e,t,n){return this.token.approveToken(e,t,n)}async checkAllowance(e,t,n){return this.token.checkAllowance(e,t,n)}async ensureTokenAllowance(e,t,n){return this.token.ensureTokenAllowance(e,t,n)}async userPayDirect(e,t,n,r){return this.directPayment.pay(e,t,n,r)}async prepareRelayedPayment(e,t,n,r,a){return this.transactionService.prepareRelayedPayment(e,t,n,r,a)}async depositToVault(e,t,n){return this.vault.deposit(e,t,n)}async withdrawFromVault(e,t,n){return this.vault.withdraw(e,t,n)}async getUserBalance(e,t,n){return this.vault.getUserBalance(e,t,n)}async consumeFromVault(e,t,n,r=0n,a=0n,s,o,i,c){if(!i)throw new Error("recipient is required");return this.vault.consumeDirect(e,t,n,r,a,o,s,i,c)}async prepareRelayedConsume(e,t,n,r=0n,a=0n,s,o,i,c,l){if(!i)throw new Error("recipient is required");if(!c)throw new Error("deadline is required");return this.transactionService.prepareRelayedConsume(e,t,n,r,a,s,o,i,c,l)}async prepareRelayedDeposit(e,t,n,r){return this.transactionService.prepareRelayedDeposit(e,t,n,r)}async prepareRelayedWithdraw(e,t,n,r){return this.transactionService.prepareRelayedWithdraw(e,t,n,r)}};
//# sourceMappingURL=index.js.map
